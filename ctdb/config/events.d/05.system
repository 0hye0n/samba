#!/bin/sh
# ctdb event script for checking local file system utilization

[ -n "$CTDB_BASE" ] || \
    export CTDB_BASE=$(cd -P $(dirname "$0") ; dirname "$PWD")

. $CTDB_BASE/functions
loadconfig

validate_percentage ()
{
    case "$1" in
	"") return 1 ;;  # A failure that doesn't need a warning
	[0-9]|[0-9][0-9]|100) return 0 ;;
	*) echo "WARNING: ${1} is an invalid percentage${2:+ in \"}${2}${2:+\"} check"
	   return 1
    esac
}

check_thresholds ()
{
    _thing="$1"
    _thresholds="$2"
    _usage="$3"
    _unhealthy_callout="$4"

    case "$_thresholds" in
	*:*)
	    _warn_threshold="${_thresholds%:*}"
	    _unhealthy_threshold="${_thresholds#*:}"
	    ;;
	*)
	    _warn_threshold="$_thresholds"
	    _unhealthy_threshold=""
    esac

    if validate_percentage "$_unhealthy_threshold" "$_thing" ; then
        if [ "$_usage" -ge "$_unhealthy_threshold" ] ; then
	    echo "ERROR: ${_thing} utilization ${_usage}% >= threshold ${_unhealthy_threshold}%"
	    eval "$_unhealthy_callout"
	    exit 1
        fi
    fi

    if validate_percentage "$_warn_threshold" "$_what" ; then
        if [ "$_usage" -ge "$_warn_threshold" ] ; then
	    echo "WARNING: ${_thing} utilization ${_usage}% >= threshold ${_warn_threshold}%"
        fi
    fi
}

monitor_filesystem_usage ()
{
    # Check each specified filesystem, specified in format
    # <fs_mount>:<fs_warn_threshold>[:fs_unhealthy_threshold]
    for _fs in $CTDB_MONITOR_FILESYSTEM_USAGE ; do
	_fs_mount="${_fs%%:*}"
	_fs_thresholds="${_fs#*:}"

        if [ ! -d "$_fs_mount" ]; then
            echo "WARNING: Directory ${_fs_mount} does not exist"
	    continue
        fi

        # Get current utilization
        _fs_usage=$(df -kP "$_fs_mount" | \
			   sed -n -e 's@.*[[:space:]]\([[:digit:]]*\)%.*@\1@p')
        if [ -z "$_fs_usage" ] ; then
            echo "WARNING: Unable to get FS utilization for ${_fs_mount}"
	    continue
        fi

	check_thresholds "Filesystem ${_fs_mount}" \
			 "$_fs_thresholds" \
			 "$_fs_usage"
    done
}

dump_memory_info ()
{
    echo "CRITICAL: Shutting down CTDB!!!"
    get_proc "meminfo"
    ps auxfww
    set_proc "sysrq-trigger" "m"
    ctdb disable
    sleep 3
    ctdb shutdown
}

monitor_memory_usage ()
{
    if [ -z "$CTDB_MONITOR_MEMORY_USAGE" -a \
	 -z "$CTDB_MONITOR_SWAP_USAGE" ] ; then
	return
    fi

    _meminfo=$(get_proc "meminfo")
    set -- $(echo "$_meminfo" | awk '
$1 == "MemAvailable:" { memavail += $2 }
$1 == "MemFree:"      { memfree  += $2 }
$1 == "Cached:"       { memfree  += $2 }
$1 == "Buffers:"      { memfree  += $2 }
$1 == "MemTotal:"     { memtotal  = $2 }
$1 == "SwapFree:"     { swapfree  = $2 }
$1 == "SwapTotal:"    { swaptotal = $2 }
END {
    if (memavail != 0) { memfree = memavail ; }
    print int((memtotal -  memfree)  / memtotal * 100),
          int((swaptotal - swapfree) / swaptotal * 100)
}')
    _mem_usage="$1"
    _swap_usage="$2"

    check_thresholds "System memory" \
		     "$CTDB_MONITOR_MEMORY_USAGE" \
		     "$_mem_usage" \
		     dump_memory_info

    check_thresholds "System swap" \
		     "$CTDB_MONITOR_SWAP_USAGE" \
		     "$_swap_usage" \
		     dump_memory_info
}


case "$1" in
    monitor)
	monitor_filesystem_usage
	monitor_memory_usage
	;;

    *)
	ctdb_standard_event_handler "$@"
	;;
esac

exit 0
