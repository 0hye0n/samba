#!/bin/sh
# script to manage nfs in a clustered environment

[ -n "$CTDB_BASE" ] || \
    export CTDB_BASE=$(cd -P $(dirname "$0") ; dirname "$PWD")

. $CTDB_BASE/functions

service_name="nfs"

if [ -z "$CTDB_NFS_CALLOUT" ] ; then
    CTDB_NFS_CALLOUT="${CTDB_BASE}/nfs-linux-kernel-callout"
fi
# Always export, for statd callout
export CTDB_NFS_CALLOUT

nfs_callout ()
{
    eval "$CTDB_NFS_CALLOUT" "$@"
}

service_reconfigure ()
{
    # Restart lock manager, notify clients
    if [ -x "${CTDB_BASE}/statd-callout" ] ; then
	"${CTDB_BASE}/statd-callout" notify &
    fi >/dev/null 2>&1
}

loadconfig

ctdb_setup_service_state_dir

ctdb_start_stop_service

is_ctdb_managed_service || exit 0

ctdb_service_check_reconfigure

case "$1" in
    startup)
	nfs_callout "$@"
	;;

    shutdown)
	 nfs_callout "$@"
	;;

    takeip)
	nfs_callout "$@"
	ctdb_service_set_reconfigure
	;;

    releaseip)
	nfs_callout "$@"
	ctdb_service_set_reconfigure
	;;

    monitor)
	nfs_callout "monitor-pre" || exit $?

	# Check that directories for shares actually exist
	if [ "$CTDB_NFS_SKIP_SHARE_CHECK" != "yes" ] ; then
	    nfs_callout "monitor-list-shares" | ctdb_check_directories || \
		exit $?
	fi

	update_tickles 2049
	nfs_update_lock_info

	nfs_check_services

	nfs_callout "monitor-post" || exit $?
       	;;

    *)
	ctdb_standard_event_handler "$@"
	;;
esac

exit 0
