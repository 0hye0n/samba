#! /usr/bin/env python

srcdir = '..'
blddir = 'bin'

import sys, os
sys.path.insert(0, srcdir+"/buildtools/wafsamba")
import wafsamba, Options

def set_options(opt):
    opt.recurse('../lib/replace')
    opt.recurse('dynconfig')
    opt.recurse('scripting/python')
    opt.recurse('lib/ldb')
    opt.recurse('selftest')
    opt.recurse('lib/tls')
    opt.recurse('../lib/nss_wrapper')
    opt.recurse('../lib/socket_wrapper')
    opt.recurse('../lib/uid_wrapper')
    opt.recurse('../lib/popt')

def configure(conf):
    conf.define('PACKAGE_NAME', 'samba')
    conf.define('PACKAGE_STRING', 'samba 4')
    conf.define('PACKAGE_TARNAME',  'samba')
    conf.define('PACKAGE_URL', "")
    conf.define('PACKAGE_VERSION', "4")
    conf.define('PACKAGE_BUGREPORT', 'samba-technical@samba.org')

    conf.DEFINE('CONFIG_H_IS_FROM_SAMBA', 1)
    conf.DEFINE('_SAMBA_BUILD_', 4, add_to_cflags=True)
    conf.DEFINE('HAVE_CONFIG_H', 1, add_to_cflags=True)
    if Options.options.developer:
        conf.ADD_CFLAGS('-DDEVELOPER -DDEBUG_PASSWORD')

    # set a lower limit on recursing in waf preprocessor
    conf.env.preprocessor_recursion_limit = 10

    conf.ADD_EXTRA_INCLUDES('#source4 #lib #source4/lib #source4/include #lib/replace #lib/talloc #lib/tevent')

    conf.sub_config('../lib/replace')

    conf.find_program('python', var='PYTHON', mandatory=True)
    conf.find_program('perl', var='PERL', mandatory=True)

    # enable tool to build python extensions
    conf.check_tool('python')
    conf.check_python_version((2,4,2))
    conf.check_python_headers()

    conf.sub_config('dynconfig')
    conf.sub_config('scripting/python')
    conf.sub_config('lib/ldb')
    conf.sub_config('heimdal_build')
    conf.sub_config('lib/tls')
    conf.sub_config('ntvfs/sysdep')
    conf.sub_config('../lib/util')
    conf.sub_config('../lib/zlib')
    conf.sub_config('../lib/util/charset')
    conf.sub_config('auth')
    conf.sub_config('../lib/nss_wrapper')
    conf.sub_config('../nsswitch')
    conf.sub_config('../lib/socket_wrapper')
    conf.sub_config('../lib/uid_wrapper')
    conf.sub_config('../lib/popt')
    conf.sub_config('lib/smbreadline')

    conf.SAMBA_CONFIG_H('include/config.h')


def etags(ctx):
    '''build TAGS file using etags'''
    import Utils
    source_root = os.path.dirname(Utils.g_module.root_path)
    cmd = 'etags $(find %s/.. -name "*.[ch]")' % source_root
    print "Running: %s" % cmd
    os.system(cmd)

def ctags(ctx):
    "build 'tags' file using ctags"
    import Utils
    source_root = os.path.dirname(Utils.g_module.root_path)
    cmd = 'ctags $(find %s/.. -name "*.[ch]" | grep -v "*_proto\.h")' % source_root
    print "Running: %s" % cmd
    os.system(cmd)

# putting this here enabled build in the list
# of commands in --help
def build(bld):
    '''build all targets'''
    pass
