import string, Utils, Options

# list of directory options to offer in configure
dir_options = {
    'with-piddir'                         : [ '${PREFIX}/var/run', 'where to put pid files' ],
    'with-privatedir'                     : [ '${PREFIX}/private', 'Where to put sam.ldb and other private files' ],
    'with-winbindd-socket-dir'            : [ '${PREFIX}/var/lib/winbindd', 'winbind socket directory' ],
    'with-winbindd-privileged-socket-dir' : [ '${PREFIX}/var/lib/winbindd_privileged', 'winbind privileged socket directory'],
    'with-ntp-signd-socket-dir'           : [ '${PREFIX}/var/run/ntp_signd', 'NTP signed directory'],
    'with-lockdir'                        : [ '${PREFIX}/var/locks', 'where to put lock files' ]
    }

# list of cflags to use for dynconfig.c
dyn_cflags = {
    'CONFIGFILE'                     : '${SYSCONFDIR}/smb.conf',
    'BINDIR'                         : '${BINDIR}',
    'SBINDIR'                        : '${SBINDIR}',
    'LMHOSTSFILE'                    : '${SYSCONFDIR}/lmhosts',
    'LOCKDIR'                        : '${LOCALSTATEDIR}/locks',
    'PIDDIR'                         : '${LOCALSTATEDIR}/run',
    'DATADIR'                        : '${DATADIR}',
    'LOGFILEBASE'                    : '${LOCALSTATEDIR}',
    'CONFIGDIR'                      : '${SYSCONFDIR}',
    'NCALRPCDIR'                     : '${LOCALSTATEDIR}/ncalrpc',
    'SWATDIR'                        : '${DATADIR}/swat',
    'PRIVATE_DIR'                    : '${PRIVATEDIR}',
    'MODULESDIR'                     : '${PREFIX}/modules',
    'SETUPDIR'                       : '${DATADIR}/setup',
    'WINBINDD_PRIVILEGED_SOCKET_DIR' : '${WINBINDD_PRIVILEGED_SOCKET_DIR}',
    'WINBINDD_SOCKET_DIR'            : '${WINBINDD_SOCKET_DIR}',
    'NTP_SIGND_SOCKET_DIR'           : '${NTP_SIGND_SOCKET_DIR}',
    }

def get_varname(v):
    '''work out a variable name from a configure option name'''
    if v.startswith('with-'):
        v = v[5:]
    v = v.upper()
    v = string.replace(v, '-', '_')
    return v


def set_options(opt):
    # get all the basic GNU options from the gnu_dirs tool
    opt.tool_options('gnu_dirs')
    for option in dir_options.keys():
        default = dir_options[option][0]
        help    = dir_options[option][1]
        varname = get_varname(option)
        opt.add_option('--%s' % option,
                       help=(help + ' [%s]' % default),
                       action="store", dest=varname, default=default)

def configure(conf):
    # get all the basic GNU options from the gnu_dirs tool
    conf.check_tool('gnu_dirs')
    for option in dir_options.keys():
        varname = get_varname(option)
        value = getattr(Options.options, varname, None)
        conf.ASSERT(value is not None, "Missing configure option %s" % varname)
        conf.ASSERT(varname not in conf.env, "Variable %s already defined" % varname)
        conf.env[varname] = value

def dynconfig_cflags(bld):
    '''work out the extra CFLAGS for dynconfig.c'''
    cflags = []
    for f in dyn_cflags.keys():
        # substitute twice, as we could have substitutions containing variables
        v = Utils.subst_vars(dyn_cflags[f], bld.env)
        v = Utils.subst_vars(v, bld.env)
        bld.ASSERT(v != '', "Empty dynconfig value for %s" % f)
        bld.ASSERT(v.find('${') == -1, "Unsubstituted variable in %s : %s : %s" % (f, dyn_cflags[f], v))
        cflags.append('-D%s="%s"' % (f, v))
    return cflags

def build(bld):
    cflags = dynconfig_cflags(bld)
    bld.SAMBA_SUBSYSTEM('DYNCONFIG',
                        'dynconfig.c',
                        deps='replace talloc',
                        cflags=cflags)
