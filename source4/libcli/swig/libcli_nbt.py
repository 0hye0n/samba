# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.

import _libcli_nbt
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import events
nbt_name_socket_init = _libcli_nbt.nbt_name_socket_init
NBT_NAME_CLIENT = _libcli_nbt.NBT_NAME_CLIENT
NBT_NAME_MS = _libcli_nbt.NBT_NAME_MS
NBT_NAME_USER = _libcli_nbt.NBT_NAME_USER
NBT_NAME_SERVER = _libcli_nbt.NBT_NAME_SERVER
NBT_NAME_PDC = _libcli_nbt.NBT_NAME_PDC
NBT_NAME_LOGON = _libcli_nbt.NBT_NAME_LOGON
NBT_NAME_MASTER = _libcli_nbt.NBT_NAME_MASTER
NBT_NAME_BROWSER = _libcli_nbt.NBT_NAME_BROWSER
class nbt_name(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_libcli_nbt.nbt_name_name_get, _libcli_nbt.nbt_name_name_set)
    scope = _swig_property(_libcli_nbt.nbt_name_scope_get, _libcli_nbt.nbt_name_scope_set)
    type = _swig_property(_libcli_nbt.nbt_name_type_get, _libcli_nbt.nbt_name_type_set)
    def __init__(self, *args, **kwargs): 
        _libcli_nbt.nbt_name_swiginit(self,_libcli_nbt.new_nbt_name(*args, **kwargs))
    __swig_destroy__ = _libcli_nbt.delete_nbt_name
nbt_name_swigregister = _libcli_nbt.nbt_name_swigregister
nbt_name_swigregister(nbt_name)

class nbt_name_query(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data_out = _swig_property(_libcli_nbt.nbt_name_query_data_out_get)
    data_in = _swig_property(_libcli_nbt.nbt_name_query_data_in_get)
    def __init__(self, *args, **kwargs): 
        _libcli_nbt.nbt_name_query_swiginit(self,_libcli_nbt.new_nbt_name_query(*args, **kwargs))
    __swig_destroy__ = _libcli_nbt.delete_nbt_name_query
nbt_name_query_swigregister = _libcli_nbt.nbt_name_query_swigregister
nbt_name_query_swigregister(nbt_name_query)

class nbt_name_query_out(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    reply_from = _swig_property(_libcli_nbt.nbt_name_query_out_reply_from_get, _libcli_nbt.nbt_name_query_out_reply_from_set)
    name = _swig_property(_libcli_nbt.nbt_name_query_out_name_get, _libcli_nbt.nbt_name_query_out_name_set)
    num_addrs = _swig_property(_libcli_nbt.nbt_name_query_out_num_addrs_get, _libcli_nbt.nbt_name_query_out_num_addrs_set)
    reply_addrs = _swig_property(_libcli_nbt.nbt_name_query_out_reply_addrs_get, _libcli_nbt.nbt_name_query_out_reply_addrs_set)
    def __init__(self, *args, **kwargs): 
        _libcli_nbt.nbt_name_query_out_swiginit(self,_libcli_nbt.new_nbt_name_query_out(*args, **kwargs))
    __swig_destroy__ = _libcli_nbt.delete_nbt_name_query_out
nbt_name_query_out_swigregister = _libcli_nbt.nbt_name_query_out_swigregister
nbt_name_query_out_swigregister(nbt_name_query_out)

class nbt_name_query_in(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_libcli_nbt.nbt_name_query_in_name_get, _libcli_nbt.nbt_name_query_in_name_set)
    dest_addr = _swig_property(_libcli_nbt.nbt_name_query_in_dest_addr_get, _libcli_nbt.nbt_name_query_in_dest_addr_set)
    broadcast = _swig_property(_libcli_nbt.nbt_name_query_in_broadcast_get, _libcli_nbt.nbt_name_query_in_broadcast_set)
    wins_lookup = _swig_property(_libcli_nbt.nbt_name_query_in_wins_lookup_get, _libcli_nbt.nbt_name_query_in_wins_lookup_set)
    timeout = _swig_property(_libcli_nbt.nbt_name_query_in_timeout_get, _libcli_nbt.nbt_name_query_in_timeout_set)
    retries = _swig_property(_libcli_nbt.nbt_name_query_in_retries_get, _libcli_nbt.nbt_name_query_in_retries_set)
    def __init__(self, *args, **kwargs): 
        _libcli_nbt.nbt_name_query_in_swiginit(self,_libcli_nbt.new_nbt_name_query_in(*args, **kwargs))
    __swig_destroy__ = _libcli_nbt.delete_nbt_name_query_in
nbt_name_query_in_swigregister = _libcli_nbt.nbt_name_query_in_swigregister
nbt_name_query_in_swigregister(nbt_name_query_in)

new_char_ptr_array = _libcli_nbt.new_char_ptr_array
delete_char_ptr_array = _libcli_nbt.delete_char_ptr_array
char_ptr_array_getitem = _libcli_nbt.char_ptr_array_getitem
char_ptr_array_setitem = _libcli_nbt.char_ptr_array_setitem
do_nbt_name_query = _libcli_nbt.do_nbt_name_query


