# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _registry
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import credentials
reg_get_predef_name = _registry.reg_get_predef_name
str_regtype = _registry.str_regtype
Registry = _registry.Registry
class reg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reg, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _registry.delete_reg
    __del__ = lambda self : None;
    def get_predefined_key_by_name(*args, **kwargs): return _registry.reg_get_predefined_key_by_name(*args, **kwargs)
    def get_predefined_key(*args, **kwargs): return _registry.reg_get_predefined_key(*args, **kwargs)
    def apply_patchfile(*args, **kwargs): return _registry.reg_apply_patchfile(*args, **kwargs)
    def mount_hive(*args, **kwargs): return _registry.reg_mount_hive(*args, **kwargs)
    def mount(self, path, hkey_id, elements=[]):
        self.mount_hive(Hive(path), hkey_id, elements)

    def __init__(self, *args, **kwargs): 
        this = _registry.new_reg(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
reg_swigregister = _registry.reg_swigregister
reg_swigregister(reg)

Hive = _registry.Hive
class hive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hive, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _registry.delete_hive
    __del__ = lambda self : None;
    def __init__(self, *args, **kwargs): 
        this = _registry.new_hive(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
hive_swigregister = _registry.hive_swigregister
hive_swigregister(hive)

open_samba = _registry.open_samba
HKEY_CLASSES_ROOT = _registry.HKEY_CLASSES_ROOT
HKEY_CURRENT_USER = _registry.HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE = _registry.HKEY_LOCAL_MACHINE
HKEY_USERS = _registry.HKEY_USERS
HKEY_PERFORMANCE_DATA = _registry.HKEY_PERFORMANCE_DATA
HKEY_CURRENT_CONFIG = _registry.HKEY_CURRENT_CONFIG
HKEY_DYN_DATA = _registry.HKEY_DYN_DATA
HKEY_PERFORMANCE_TEXT = _registry.HKEY_PERFORMANCE_TEXT
HKEY_PERFORMANCE_NLSTEXT = _registry.HKEY_PERFORMANCE_NLSTEXT


