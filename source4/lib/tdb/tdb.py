# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _tdb
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


REPLACE = _tdb.REPLACE
INSERT = _tdb.INSERT
MODIFY = _tdb.MODIFY
DEFAULT = _tdb.DEFAULT
CLEAR_IF_FIRST = _tdb.CLEAR_IF_FIRST
INTERNAL = _tdb.INTERNAL
NOLOCK = _tdb.NOLOCK
NOMMAP = _tdb.NOMMAP
CONVERT = _tdb.CONVERT
BIGENDIAN = _tdb.BIGENDIAN
TDB_SUCCESS = _tdb.TDB_SUCCESS
TDB_ERR_CORRUPT = _tdb.TDB_ERR_CORRUPT
TDB_ERR_IO = _tdb.TDB_ERR_IO
TDB_ERR_LOCK = _tdb.TDB_ERR_LOCK
TDB_ERR_OOM = _tdb.TDB_ERR_OOM
TDB_ERR_EXISTS = _tdb.TDB_ERR_EXISTS
TDB_ERR_NOLOCK = _tdb.TDB_ERR_NOLOCK
TDB_ERR_LOCK_TIMEOUT = _tdb.TDB_ERR_LOCK_TIMEOUT
TDB_ERR_NOEXIST = _tdb.TDB_ERR_NOEXIST
TDB_ERR_EINVAL = _tdb.TDB_ERR_EINVAL
TDB_ERR_RDONLY = _tdb.TDB_ERR_RDONLY
class tdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tdb, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def error(*args, **kwargs): return _tdb.tdb_error(*args, **kwargs)
    __swig_destroy__ = _tdb.delete_tdb
    __del__ = lambda self : None;
    def close(*args, **kwargs): return _tdb.tdb_close(*args, **kwargs)
    def append(*args, **kwargs): return _tdb.tdb_append(*args, **kwargs)
    def errorstr(*args, **kwargs): return _tdb.tdb_errorstr(*args, **kwargs)
    def fetch(*args, **kwargs): return _tdb.tdb_fetch(*args, **kwargs)
    def delete(*args, **kwargs): return _tdb.tdb_delete(*args, **kwargs)
    def store(*args, **kwargs): return _tdb.tdb_store(*args, **kwargs)
    def exists(*args, **kwargs): return _tdb.tdb_exists(*args, **kwargs)
    def firstkey(*args, **kwargs): return _tdb.tdb_firstkey(*args, **kwargs)
    def nextkey(*args, **kwargs): return _tdb.tdb_nextkey(*args, **kwargs)
    def lock_all(*args, **kwargs): return _tdb.tdb_lock_all(*args, **kwargs)
    def unlock_all(*args, **kwargs): return _tdb.tdb_unlock_all(*args, **kwargs)
    def read_lock_all(*args, **kwargs): return _tdb.tdb_read_lock_all(*args, **kwargs)
    def read_unlock_all(*args, **kwargs): return _tdb.tdb_read_unlock_all(*args, **kwargs)
    def reopen(*args, **kwargs): return _tdb.tdb_reopen(*args, **kwargs)
    def transaction_start(*args, **kwargs): return _tdb.tdb_transaction_start(*args, **kwargs)
    def transaction_commit(*args, **kwargs): return _tdb.tdb_transaction_commit(*args, **kwargs)
    def transaction_cancel(*args, **kwargs): return _tdb.tdb_transaction_cancel(*args, **kwargs)
    def transaction_recover(*args, **kwargs): return _tdb.tdb_transaction_recover(*args, **kwargs)
    def hash_size(*args, **kwargs): return _tdb.tdb_hash_size(*args, **kwargs)
    def map_size(*args, **kwargs): return _tdb.tdb_map_size(*args, **kwargs)
    def get_flags(*args, **kwargs): return _tdb.tdb_get_flags(*args, **kwargs)
    def set_max_dead(*args, **kwargs): return _tdb.tdb_set_max_dead(*args, **kwargs)
    def name(*args, **kwargs): return _tdb.tdb_name(*args, **kwargs)
    def __str__(self):
        return self.name()


    def __getitem__(self, key):
        result = self.fetch(key)
        if result is None:
            raise KeyError, '%s: %s' % (key, self.errorstr())
        return result

    def __setitem__(self, key, item):
        if self.store(key, item) == -1:
            raise IOError, self.errorstr()

    def __delitem__(self, key):
        if not self.exists(key):
            raise KeyError, '%s: %s' % (key, self.errorstr())
        self.delete(key)

    def __contains__(self, key):
        return self.exists(key) != 0

    def has_key(self, key):
        return self.exists(key) != 0


    class TdbIterator:
        def __init__(self, tdb):
            self.tdb = tdb
            self.key = None

        def __iter__(self):
            return self
            
        def next(self):
            if self.key is None:
                self.key = self.tdb.firstkey()
                if self.key is None:
                    raise StopIteration
                return self.key
            else:
                self.key = self.tdb.nextkey(self.key)
                if self.key is None:
                    raise StopIteration
                return self.key

    def __iter__(self):
        return self.TdbIterator(self)



    def keys(self):
        return [k for k in iter(self)]

    def values(self):
        return [self[k] for k in iter(self)]

    def items(self):
        return [(k, self[k]) for k in iter(self)]

    def __len__(self):
        return len(self.keys())

    def clear(self):
        for k in iter(self):
            del(self[k])





tdb_swigregister = _tdb.tdb_swigregister
tdb_swigregister(tdb)

def Tdb(*args, **kwargs):
    val = _tdb.new_Tdb(*args, **kwargs)
    return val



