#!/usr/bin/env python

APPNAME = 'ldb'
VERSION = '0.9.10'

blddir = 'bin'

import sys, os
# find the buildtools directory
buildtools = 'buildtools'
while not os.path.exists(buildtools) and len(buildtools.split('/')) < 5:
    buildtools = '../' + buildtools
srcdir = os.path.dirname(buildtools) or '.'

sys.path.insert(0, buildtools + "/wafsamba")
import wafsamba, samba_dist

samba_dist.DIST_DIRS('''lib/ldb:. lib/replace:lib/replace lib/talloc:lib/talloc
                        lib/tdb:lib/tdb lib/tevent:lib/tevent buildtools:buildtools''')


LIBTDB_DIR= '../../../lib/tdb'
LIBTEVENT_DIR= '../../../lib/tevent'
LIBPOPT_DIR= '../../../lib/popt'

def set_options(opt):
    opt.BUILTIN_DEFAULT('replace')
    opt.BUNDLED_EXTENSION_DEFAULT('ldb', noextenion='ldb')
    opt.recurse(LIBTDB_DIR)
    opt.recurse(LIBTEVENT_DIR)

def configure(conf):
    conf.sub_config(LIBTDB_DIR)
    conf.sub_config(LIBTEVENT_DIR)
    conf.sub_config(LIBPOPT_DIR)
    # where does the default LIBDIR end up? in conf.env somewhere?
    #
    conf.CONFIG_PATH('LDB_MODULESDIR', conf.SUBST_ENV_VAR('MODULESDIR') + '/ldb')

    s4_build = getattr(conf.env, '_SAMBA_BUILD_', 0) == 4


    if not s4_build:
        if conf.CHECK_BUNDLED_SYSTEM('ldb', minversion=VERSION,
                                     onlyif='talloc tdb tevent',
                                     implied_deps='replace talloc tdb tevent'):
            conf.define('USING_SYSTEM_LDB', 1)
        # we need this for the ldap backend
        conf.CHECK_FUNCS_IN('ber_flush ldap_open', 'lber ldap', headers='lber.h ldap.h', mandatory=True)

    conf.DEFINE('HAVE_CONFIG_H', 1, add_to_cflags=True)

    conf.SAMBA_CONFIG_H()

def build(bld):
    bld.BUILD_SUBDIR(LIBTDB_DIR)
    bld.BUILD_SUBDIR(LIBTEVENT_DIR)
    bld.BUILD_SUBDIR(LIBPOPT_DIR)

    # in Samba4 we build some extra modules, and add extra
    # capabilities to the ldb cmdline tools
    s4_build = getattr(bld.env, '_SAMBA_BUILD_', 0) == 4

    LDB_MAP_SRC = bld.SUBDIR('ldb_map',
                             'ldb_map.c ldb_map_inbound.c ldb_map_outbound.c')

    COMMON_SRC = bld.SUBDIR('common',
                            '''ldb.c ldb_ldif.c ldb_parse.c ldb_msg.c ldb_utf8.c
                            ldb_debug.c ldb_dn.c ldb_match.c
                            ldb_attributes.c attrib_handlers.c ldb_controls.c qsort.c''')

    bld.SAMBA_SUBSYSTEM('LIBLDB',
                        includes='include',
                        deps='tevent',
                        source='common/ldb_modules.c')

    bld.SAMBA_MODULE('ldb_asq',
                     'modules/asq.c',
                     init_function='LDB_MODULE(asq)',
                     subsystem='LIBLDB')

    bld.SAMBA_MODULE('ldb_server_sort',
                     'modules/sort.c',
                     init_function='LDB_MODULE(server_sort)',
                     subsystem='LIBLDB')

    bld.SAMBA_MODULE('ldb_paged_results',
                     'modules/paged_results.c',
                     init_function='LDB_MODULE(paged_results)',
                     subsystem='LIBLDB')

    bld.SAMBA_MODULE('ldb_paged_searches',
                     'modules/paged_searches.c',
                     init_function='LDB_MODULE(paged_searches)',
                     enabled = s4_build,
                     subsystem='LIBLDB')

    bld.SAMBA_MODULE('ldb_rdn_name',
                     'modules/rdn_name.c',
                     init_function='LDB_MODULE(rdn_name)',
                     subsystem='LIBLDB')

    bld.SAMBA_MODULE('ldb_sample',
                     'tests/sample_module.c',
                     init_function='LDB_MODULE(sample)',
                     subsystem='LIBLDB')

    bld.SAMBA_MODULE('ldb_skel',
                     'modules/skel.c',
                     init_function='LDB_MODULE(skel)',
                     subsystem='LIBLDB')

    bld.SAMBA_MODULE('ldb_sqlite3',
                     'sqlite3/ldb_sqlite3.c',
                     init_function='LDB_BACKEND(sqlite3)',
                     enabled=False,
                     subsystem='LIBLDB')

    bld.SAMBA_MODULE('ldb_tdb',
                     bld.SUBDIR('ldb_tdb',
                                '''ldb_tdb.c ldb_pack.c ldb_search.c ldb_index.c
                                ldb_cache.c ldb_tdb_wrap.c'''),
                     init_function='LDB_BACKEND(tdb)',
                     deps='tdb',
                     subsystem='LIBLDB')

    # this is only in the s4 build
    bld.SAMBA_MODULE('ldb_ildap', 'ldb_ildap/ldb_ildap.c',
                     init_function='LDB_BACKEND(ldapi),LDB_BACKEND(ldaps),LDB_BACKEND(ldap)',
                     deps='talloc LIBCLI_LDAP CREDENTIALS',
                     enabled=s4_build,
                     subsystem='LIBLDB')

    # this is not included in the s4 build
    bld.SAMBA_MODULE('ldb_ldap', 'ldb_ldap/ldb_ldap.c',
                     init_function='LDB_BACKEND(ldapi),LDB_BACKEND(ldaps),LDB_BACKEND(ldap)',
                     deps='talloc lber ldap',
                     enabled=not s4_build,
                     subsystem='LIBLDB')

    # we're not currently linking against the ldap libs, but ldb.pc.in
    # has @LDAP_LIBS@
    bld.env.LDAP_LIBS = ''

    if not 'PACKAGE_VERSION' in bld.env:
        bld.env.PACKAGE_VERSION = VERSION
        bld.env.PKGCONFIGDIR = '${LIBDIR}/pkgconfig'

    ldb_deps = 'tevent LIBLDB'
    if s4_build:
        ldb_deps += ' LDBSAMBA POPT_CREDENTIALS POPT_SAMBA LIBCMDLINE_CREDENTIALS gensec'

    if not bld.CONFIG_SET('USING_SYSTEM_LDB'):
        modules_dir = bld.EXPAND_VARIABLES('${LDB_MODULESDIR}')
        bld.SAMBA_LIBRARY('ldb',
                          COMMON_SRC + ' ' + LDB_MAP_SRC,
                          deps=ldb_deps,
                          includes='include',
                          public_headers='include/ldb.h include/ldb_errors.h',
                          pc_files='ldb.pc',
                          cflags='-DLDB_MODULESDIR=\"%s\"' % modules_dir,
                          vnum=VERSION)

    bld.SAMBA_SUBSYSTEM('LIBLDB_CMDLINE',
                        'tools/ldbutil.c tools/cmdline.c',
                        'ldb dl popt')

    LDB_TOOLS='ldbadd ldbsearch ldbdel ldbmodify ldbedit ldbrename'
    for t in LDB_TOOLS.split():
        bld.SAMBA_BINARY(t, 'tools/%s.c' % t, deps='LIBLDB_CMDLINE')

    # ldbtest doesn't get installed
    bld.SAMBA_BINARY('ldbtest', 'tools/ldbtest.c', deps='LIBLDB_CMDLINE', install=False)

    if s4_build:
        bld.SAMBA_PYTHON('pyldb', 'pyldb.c',
                         deps='ldb',
                         realname='ldb.so')

