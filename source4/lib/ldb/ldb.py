# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _ldb
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


SCOPE_DEFAULT = _ldb.SCOPE_DEFAULT
SCOPE_BASE = _ldb.SCOPE_BASE
SCOPE_ONELEVEL = _ldb.SCOPE_ONELEVEL
SCOPE_SUBTREE = _ldb.SCOPE_SUBTREE
CHANGETYPE_NONE = _ldb.CHANGETYPE_NONE
CHANGETYPE_ADD = _ldb.CHANGETYPE_ADD
CHANGETYPE_DELETE = _ldb.CHANGETYPE_DELETE
CHANGETYPE_MODIFY = _ldb.CHANGETYPE_MODIFY
class Dn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dn, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ldb.new_Dn(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ldb.delete_Dn
    __del__ = lambda self : None;
    def validate(*args, **kwargs): return _ldb.Dn_validate(*args, **kwargs)
    def get_casefold(*args, **kwargs): return _ldb.Dn_get_casefold(*args, **kwargs)
    def __str__(*args, **kwargs): return _ldb.Dn___str__(*args, **kwargs)
    def parent(*args, **kwargs): return _ldb.Dn_parent(*args, **kwargs)
    def __cmp__(*args, **kwargs): return _ldb.Dn___cmp__(*args, **kwargs)
    def is_valid(*args, **kwargs): return _ldb.Dn_is_valid(*args, **kwargs)
    def is_special(*args, **kwargs): return _ldb.Dn_is_special(*args, **kwargs)
    def is_null(*args, **kwargs): return _ldb.Dn_is_null(*args, **kwargs)
    def check_special(*args, **kwargs): return _ldb.Dn_check_special(*args, **kwargs)
    def __len__(*args, **kwargs): return _ldb.Dn___len__(*args, **kwargs)
    def add_child(*args, **kwargs): return _ldb.Dn_add_child(*args, **kwargs)
    def add_base(*args, **kwargs): return _ldb.Dn_add_base(*args, **kwargs)
    def canonical_str(*args, **kwargs): return _ldb.Dn_canonical_str(*args, **kwargs)
    def canonical_ex_str(*args, **kwargs): return _ldb.Dn_canonical_ex_str(*args, **kwargs)
    def __add__(*args, **kwargs): return _ldb.Dn___add__(*args, **kwargs)
Dn_swigregister = _ldb.Dn_swigregister
Dn_swigregister(Dn)

ldb_dn_from_pyobject = _ldb.ldb_dn_from_pyobject
ldb_msg_element_from_pyobject = _ldb.ldb_msg_element_from_pyobject
ldb_msg_element_to_set = _ldb.ldb_msg_element_to_set
class ldb_msg_element(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ldb_msg_element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ldb_msg_element, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def __iter__(*args, **kwargs): return _ldb.ldb_msg_element___iter__(*args, **kwargs)
    def __set__(*args, **kwargs): return _ldb.ldb_msg_element___set__(*args, **kwargs)
    __swig_destroy__ = _ldb.delete_ldb_msg_element
    __del__ = lambda self : None;
    def __cmp__(*args, **kwargs): return _ldb.ldb_msg_element___cmp__(*args, **kwargs)
ldb_msg_element_swigregister = _ldb.ldb_msg_element_swigregister
ldb_msg_element_swigregister(ldb_msg_element)

def MessageElement(*args, **kwargs):
    val = _ldb.new_MessageElement(*args, **kwargs)
    return val

ldb_msg_list_elements = _ldb.ldb_msg_list_elements
class Message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dn"] = _ldb.Message_dn_set
    __swig_getmethods__["dn"] = _ldb.Message_dn_get
    if _newclass:dn = _swig_property(_ldb.Message_dn_get, _ldb.Message_dn_set)
    def __init__(self, *args, **kwargs): 
        this = _ldb.new_Message(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ldb.delete_Message
    __del__ = lambda self : None;
    def __getitem__(*args, **kwargs): return _ldb.Message___getitem__(*args, **kwargs)
    def __setitem__(*args): return _ldb.Message___setitem__(*args)
    def __len__(*args, **kwargs): return _ldb.Message___len__(*args, **kwargs)
    def keys(*args, **kwargs): return _ldb.Message_keys(*args, **kwargs)
    def __iter__(*args, **kwargs): return _ldb.Message___iter__(*args, **kwargs)
    def __delitem__(*args, **kwargs): return _ldb.Message___delitem__(*args, **kwargs)
Message_swigregister = _ldb.Message_swigregister
Message_swigregister(Message)

ldb_ldif_to_pyobject = _ldb.ldb_ldif_to_pyobject
LdbError = _ldb.LdbError

LDB_ERR_OPERATIONS_ERROR = _ldb.LDB_ERR_OPERATIONS_ERROR
LDB_ERR_PROTOCOL_ERROR = _ldb.LDB_ERR_PROTOCOL_ERROR
LDB_ERR_TIME_LIMIT_EXCEEDED = _ldb.LDB_ERR_TIME_LIMIT_EXCEEDED
LDB_ERR_SIZE_LIMIT_EXCEEDED = _ldb.LDB_ERR_SIZE_LIMIT_EXCEEDED
LDB_ERR_COMPARE_FALSE = _ldb.LDB_ERR_COMPARE_FALSE
LDB_ERR_COMPARE_TRUE = _ldb.LDB_ERR_COMPARE_TRUE
LDB_ERR_AUTH_METHOD_NOT_SUPPORTED = _ldb.LDB_ERR_AUTH_METHOD_NOT_SUPPORTED
LDB_ERR_STRONG_AUTH_REQUIRED = _ldb.LDB_ERR_STRONG_AUTH_REQUIRED
LDB_ERR_REFERRAL = _ldb.LDB_ERR_REFERRAL
LDB_ERR_ADMIN_LIMIT_EXCEEDED = _ldb.LDB_ERR_ADMIN_LIMIT_EXCEEDED
LDB_ERR_UNSUPPORTED_CRITICAL_EXTENSION = _ldb.LDB_ERR_UNSUPPORTED_CRITICAL_EXTENSION
LDB_ERR_CONFIDENTIALITY_REQUIRED = _ldb.LDB_ERR_CONFIDENTIALITY_REQUIRED
LDB_ERR_SASL_BIND_IN_PROGRESS = _ldb.LDB_ERR_SASL_BIND_IN_PROGRESS
LDB_ERR_NO_SUCH_ATTRIBUTE = _ldb.LDB_ERR_NO_SUCH_ATTRIBUTE
LDB_ERR_UNDEFINED_ATTRIBUTE_TYPE = _ldb.LDB_ERR_UNDEFINED_ATTRIBUTE_TYPE
LDB_ERR_INAPPROPRIATE_MATCHING = _ldb.LDB_ERR_INAPPROPRIATE_MATCHING
LDB_ERR_CONSTRAINT_VIOLATION = _ldb.LDB_ERR_CONSTRAINT_VIOLATION
LDB_ERR_ATTRIBUTE_OR_VALUE_EXISTS = _ldb.LDB_ERR_ATTRIBUTE_OR_VALUE_EXISTS
LDB_ERR_INVALID_ATTRIBUTE_SYNTAX = _ldb.LDB_ERR_INVALID_ATTRIBUTE_SYNTAX
LDB_ERR_NO_SUCH_OBJECT = _ldb.LDB_ERR_NO_SUCH_OBJECT
LDB_ERR_ALIAS_PROBLEM = _ldb.LDB_ERR_ALIAS_PROBLEM
LDB_ERR_INVALID_DN_SYNTAX = _ldb.LDB_ERR_INVALID_DN_SYNTAX
LDB_ERR_ALIAS_DEREFERENCING_PROBLEM = _ldb.LDB_ERR_ALIAS_DEREFERENCING_PROBLEM
LDB_ERR_INAPPROPRIATE_AUTHENTICATION = _ldb.LDB_ERR_INAPPROPRIATE_AUTHENTICATION
LDB_ERR_INVALID_CREDENTIALS = _ldb.LDB_ERR_INVALID_CREDENTIALS
LDB_ERR_INSUFFICIENT_ACCESS_RIGHTS = _ldb.LDB_ERR_INSUFFICIENT_ACCESS_RIGHTS
LDB_ERR_BUSY = _ldb.LDB_ERR_BUSY
LDB_ERR_UNAVAILABLE = _ldb.LDB_ERR_UNAVAILABLE
LDB_ERR_UNWILLING_TO_PERFORM = _ldb.LDB_ERR_UNWILLING_TO_PERFORM
LDB_ERR_LOOP_DETECT = _ldb.LDB_ERR_LOOP_DETECT
LDB_ERR_NAMING_VIOLATION = _ldb.LDB_ERR_NAMING_VIOLATION
LDB_ERR_OBJECT_CLASS_VIOLATION = _ldb.LDB_ERR_OBJECT_CLASS_VIOLATION
LDB_ERR_NOT_ALLOWED_ON_NON_LEAF = _ldb.LDB_ERR_NOT_ALLOWED_ON_NON_LEAF
LDB_ERR_NOT_ALLOWED_ON_RDN = _ldb.LDB_ERR_NOT_ALLOWED_ON_RDN
LDB_ERR_ENTRY_ALREADY_EXISTS = _ldb.LDB_ERR_ENTRY_ALREADY_EXISTS
LDB_ERR_OBJECT_CLASS_MODS_PROHIBITED = _ldb.LDB_ERR_OBJECT_CLASS_MODS_PROHIBITED
LDB_ERR_AFFECTS_MULTIPLE_DSAS = _ldb.LDB_ERR_AFFECTS_MULTIPLE_DSAS
LDB_ERR_OTHER = _ldb.LDB_ERR_OTHER
class ldb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ldb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ldb, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def connect(*args, **kwargs): return _ldb.ldb_connect(*args, **kwargs)
    __swig_destroy__ = _ldb.delete_ldb
    __del__ = lambda self : None;
    def search(*args, **kwargs): return _ldb.ldb_search(*args, **kwargs)
    def delete(*args, **kwargs): return _ldb.ldb_delete(*args, **kwargs)
    def rename(*args, **kwargs): return _ldb.ldb_rename(*args, **kwargs)
    def add(*args, **kwargs): return _ldb.ldb_add(*args, **kwargs)
    def modify(*args, **kwargs): return _ldb.ldb_modify(*args, **kwargs)
    def get_config_basedn(*args, **kwargs): return _ldb.ldb_get_config_basedn(*args, **kwargs)
    def get_root_basedn(*args, **kwargs): return _ldb.ldb_get_root_basedn(*args, **kwargs)
    def get_schema_basedn(*args, **kwargs): return _ldb.ldb_get_schema_basedn(*args, **kwargs)
    def get_default_basedn(*args, **kwargs): return _ldb.ldb_get_default_basedn(*args, **kwargs)
    def errstring(*args, **kwargs): return _ldb.ldb_errstring(*args, **kwargs)
    def set_create_perms(*args, **kwargs): return _ldb.ldb_set_create_perms(*args, **kwargs)
    def set_modules_dir(*args, **kwargs): return _ldb.ldb_set_modules_dir(*args, **kwargs)
    def set_debug(*args, **kwargs): return _ldb.ldb_set_debug(*args, **kwargs)
    def set_opaque(*args, **kwargs): return _ldb.ldb_set_opaque(*args, **kwargs)
    def get_opaque(*args, **kwargs): return _ldb.ldb_get_opaque(*args, **kwargs)
    def transaction_start(*args, **kwargs): return _ldb.ldb_transaction_start(*args, **kwargs)
    def transaction_commit(*args, **kwargs): return _ldb.ldb_transaction_commit(*args, **kwargs)
    def transaction_cancel(*args, **kwargs): return _ldb.ldb_transaction_cancel(*args, **kwargs)
    def __contains__(*args, **kwargs): return _ldb.ldb___contains__(*args, **kwargs)
    def parse_ldif(*args, **kwargs): return _ldb.ldb_parse_ldif(*args, **kwargs)
ldb_swigregister = _ldb.ldb_swigregister
ldb_swigregister(ldb)

def Ldb(*args, **kwargs):
    val = _ldb.new_Ldb(*args, **kwargs)
    return val

valid_attr_name = _ldb.valid_attr_name
timestring = _ldb.timestring
string_to_time = _ldb.string_to_time


