###########################################################################
# Makefile.in for Samba - rewritten for autoconf support
# Copyright Andrew Tridgell 1992-1998
###########################################################################

prefix=@prefix@
exec_prefix=@exec_prefix@
mandir=@mandir@
DESTDIR=

LIBS=@LIBS@
CC=@CC@
CFLAGS=@CFLAGS@
CPPFLAGS=@CPPFLAGS@
LDFLAGS=@LDFLAGS@
AWK=@AWK@
LIBTOOL=@LIBTOOL@ --quiet
LIBTOOL_DEPS=@LIBTOOL_DEPS@
LINK=$(LIBTOOL) --mode=link $(CC) $(FLAGS) $(LDFLAGS)

INSTALL = @INSTALL@
INSTALLCMD=@INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

VPATH=@srcdir@
srcdir=@srcdir@
builddir=@builddir@
top_builddir=.
SHELL=/bin/sh

BASEDIR= @prefix@
BINDIR = @bindir@
# we don't use sbindir because we want full compatibility with
# the previous releases of Samba
SBINDIR = @bindir@
LIBDIR = @libdir@
VARDIR = $(BASEDIR)/var
MANDIR = @mandir@
SYSCONFDIR = @sysconfdir@
PRIVATEDIR = $(BASEDIR)/private

# The permissions to give the executables
INSTALLPERMS = 0755

# set these to where to find various files
# These can be overridden by command line switches (see smbd(8))
# or in smb.conf (see smb.conf(5))
LOGFILEBASE = $(VARDIR)
SMBLOGFILE = $(LOGFILEBASE)/log.smb
NMBLOGFILE = $(LOGFILEBASE)/log.nmb
CONFIGFILE = $(LIBDIR)/smb.conf
LMHOSTSFILE = $(LIBDIR)/lmhosts
DRIVERFILE = $(LIBDIR)/printers.def
FORMSFILE = $(LIBDIR)/ntforms.def
NTDRIVERSDIR = $(LIBDIR)
PASSWD_PROGRAM = /bin/passwd
SMB_PASSWD_FILE = $(BASEDIR)/private/smbpasswd
SAM_DIR = $(BASEDIR)/sam
SMB_PASSGRP_FILE = $(BASEDIR)/private/smbpassgrp
SMB_GROUP_FILE = $(BASEDIR)/private/smbgroup
SMB_ALIAS_FILE = $(BASEDIR)/private/smbalias
SMB_PASSWD_PROGRAM = $(BINDIR)/smbpasswd

# This is where SWAT images and help files go
SWATDIR = $(BASEDIR)/swat

# the directory where lock files go
LOCKDIR = $(VARDIR)/locks

# The directory where code page definition files go
CODEPAGEDIR = $(LIBDIR)/codepages

# The current codepage definition list.
CODEPAGELIST= 437 737 850 852 861 932 866 949 950 936

# where you are going to have the smbrun binary. This defaults to the 
# install directory. This binary is needed for correct printing
# and magic script execution. This should be an absolute path!
# Also not that this should include the name "smbrun" on the end (the
# name of the executable)
SMBRUN = $(BINDIR)/smbrun


PASSWD_FLAGS = \
		-DPASSWD_PROGRAM=\"$(PASSWD_PROGRAM)\"           \
		-DSMB_PASSWD_PROGRAM=\"$(SMB_PASSWD_PROGRAM)\"   \
		-DSMB_PASSWD_FILE=\"$(SMB_PASSWD_FILE)\"         \
		-DSAM_DIR=\"$(SAM_DIR)\"                         \
		-DSMB_PASSGRP_FILE=\"$(SMB_PASSGRP_FILE)\"       \
		-DSMB_GROUP_FILE=\"$(SMB_GROUP_FILE)\"           \
		-DSMB_ALIAS_FILE=\"$(SMB_ALIAS_FILE)\" 

FLAGS1 = $(CFLAGS)	\
		-Iinclude -I$(srcdir)/include                    \
		-I$(srcdir)/ubiqx                                \
		-I$(srcdir)/smbwrapper                           \
		$(CPPFLAGS)                                      \
		-DLOGFILEBASE=\"$(LOGFILEBASE)\"                 \
		-DSMBLOGFILE=\"$(SMBLOGFILE)\"                   \
		-DNMBLOGFILE=\"$(NMBLOGFILE)\"

FLAGS2 = -DCONFIGFILE=\"$(CONFIGFILE)\" -DLMHOSTSFILE=\"$(LMHOSTSFILE)\"  
FLAGS3 = -DSWATDIR=\"$(SWATDIR)\" -DSBINDIR=\"$(SBINDIR)\" -DLOCKDIR=\"$(LOCKDIR)\" -DSMBRUN=\"$(SMBRUN)\" -DCODEPAGEDIR=\"$(CODEPAGEDIR)\"
FLAGS4 = -DDRIVERFILE=\"$(DRIVERFILE)\" -DBINDIR=\"$(BINDIR)\" -DFORMSFILE=\"$(FORMSFILE)\" -DNTDRIVERSDIR=\"$(NTDRIVERSDIR)\"
FLAGS5 = $(FLAGS1) $(FLAGS2) $(FLAGS3) $(FLAGS4) -DHAVE_INCLUDES_H
FLAGS  = $(FLAGS5) $(PASSWD_FLAGS)

SPROGS = bin/smbd bin/lsarpcd bin/svcctld bin/spoolssd bin/samrd \
         bin/srvsvcd bin/wkssvcd bin/browserd bin/netlogond bin/winregd \
         bin/nmbd bin/swat
PROGS1 = bin/smbclient bin/testparm bin/testprns bin/smbrun bin/smbstatus 
PROGS2 = bin/rpcclient bin/smbpasswd bin/make_smbcodepage bin/debug2html 
PROGS3 = @WRAP@ @WRAP32@ @LIBNMB@ @LIBNMB32@ @LIBSAMBA@ @LIBSAMBA32@ \
	@LIBMSRPC@ @LIBMSRPC32@ @LIBSMB@ @LIBSMB32@ \
	@LIBSMBPW@ @LIBSMBPW32@ \
	@LIBUBIQX@ @LIBUBIQX32@
MPROGS = @MPROGS@
PROGS = $(PROGS1) $(PROGS2) $(PROGS3) $(MPROGS) bin/nmblookup bin/make_printerdef 

SCRIPTS = script/smbtar script/addtosmbpass script/convert_smbpasswd

QUOTAOBJS=@QUOTAOBJS@

######################################################################
# object file lists
######################################################################

SAMBALIB = bin/libsamba.la
UBIQXLIB = bin/libubiqx.la
SMBLIB = bin/libsmb.la
NMBLIB = bin/libnmb.la
MSRPCLIB = bin/libmsrpc.la
SMBPWLIB = bin/libsmbpw.la

SAMBA_LIBS = $(MSRPCLIB) $(SMBLIB) $(NMBLIB) $(SAMBALIB)

SHARED_LIBS = $(SAMBA_LIBS) $(SMBPWLIB) $(UBIQXLIB)

LIBSTATUS_OBJ = lib/util_status.o 

LIB_OBJ =	lib/charcnv.o lib/charset.o lib/debug.o lib/fault.o \
		lib/getsmbpass.o lib/interface.o lib/kanji.o \
		lib/md4.o \
		lib/netmask.o lib/pidfile.o lib/replace.o \
		lib/signal.o lib/slprintf.o lib/system.o lib/doscalls.o \
		lib/time.o lib/ufc.o lib/util.o lib/genrand.o \
		lib/username.o lib/vuser.o \
		lib/access.o lib/smbrun.o \
		lib/bitmap.o lib/util_sid.o lib/snprintf.o \
		lib/util_str.o lib/util_unistr.o \
		lib/util_file.o \
		lib/util_sock.o lib/util_sec.o lib/util_array.o \
		lib/vagent.o lib/util_hnd.o \
		tdb/tdb.o

STUB_UID_OBJ = lib/stub_uid.o

UBIQX_OBJ = ubiqx/ubi_BinTree.o ubiqx/ubi_Cache.o ubiqx/ubi_SplayTree.o \
            ubiqx/ubi_dLinkList.o ubiqx/ubi_sLinkList.o

PARAM_OBJ = param/loadparm.o param/params.o 

LIBSAMBA_OBJ = $(PARAM_OBJ) $(LIB_OBJ)

LIBNMB_OBJ = libsmb/namequery.o libsmb/nmblib.o

LIBSMB_OBJ = libsmb/clientgen.o \
             libsmb/nterr.o libsmb/smbdes.o libsmb/smbencrypt.o \
             libsmb/smberr.o libsmb/credentials.o \
		libsmb/pwd_cache.o \
	     lib/crc32.o lib/md5.o lib/hmacmd5.o \
                 rpc_parse/parse_creds.o \
                rpc_parse/parse_net.o \
		 rpc_parse/parse_ntlmssp.o rpc_parse/parse_prs.o \
		 rpc_parse/parse_misc.o

RPC_SRVUTIL_OBJ = rpc_server/srv_pipe_srv.o \
		rpc_server/srv_pipe_noauth.o

RPC_SERVER_OBJ = \
		rpc_server/srv_pipe_hnd.o \
		rpc_server/srv_pipe.o 

RPC_PARSE_OBJ1 = rpc_parse/parse_lsa.o \
                rpc_parse/parse_reg.o \
                rpc_parse/parse_samr.o \
		rpc_parse/parse_srv.o \
                rpc_parse/parse_wks.o \
                rpc_parse/parse_svc.o \
		rpc_parse/parse_at.o \
		rpc_parse/parse_spoolss.o \
		rpc_parse/parse_eventlog.o \
		rpc_parse/parse_brs.o

RPC_PARSE_OBJ2 = rpc_parse/parse_rpc.o \
                rpc_parse/parse_netsec.o \
		rpc_parse/parse_sec.o \
		lib/msrpc-agent.o \
		lib/msrpc-client.o \
		lib/msrpc_use.o

RPC_PARSE_OBJ = $(RPC_PARSE_OBJ1) $(RPC_PARSE_OBJ2)

RPC_CLIENT_OBJ = \
		rpc_client/cli_login.o    \
		rpc_client/cli_netlogon.o \
		rpc_client/cli_reg.o \
		rpc_client/cli_pipe.o     \
		rpc_client/cli_pipe_ntlmssp.o     \
		rpc_client/cli_pipe_netsec.o     \
		rpc_client/cli_pipe_noauth.o     \
		rpc_client/cli_connect.o     \
		rpc_client/cli_use.o     \
		rpc_client/cli_spoolss.o   \
		rpc_client/cli_lsarpc.o   \
		rpc_client/cli_wkssvc.o   \
		rpc_client/cli_brs.o   \
		rpc_client/cli_srvsvc.o   \
		rpc_client/cli_svcctl.o \
		rpc_client/cli_samr.o   \
		rpc_client/msrpc_samr.o   \
		rpc_client/msrpc_netlogon.o   \
		rpc_client/msrpc_lsarpc.o   \
		rpc_client/cli_atsvc.o \
		rpc_client/cli_eventlog.o

LOCKING_OBJ = locking/locking.o 

GROUPDB_OBJ = groupdb/groupdb.o groupdb/aliasdb.o groupdb/builtindb.o \
		groupdb/groupfile.o groupdb/aliasfile.o \
		groupdb/groupunix.o groupdb/aliasunix.o groupdb/builtinunix.o \
		groupdb/groupldap.o groupdb/aliasldap.o groupdb/builtinldap.o \
		passdb/passgrp.o passdb/smbpassgroup.o \
		passdb/smbpassgroupunix.o passdb/passgrpldap.o

SAMPASSDB_OBJ = passdb/sampassdb.o passdb/sampass.o passdb/sampassldap.o passdb/mysqlsampass.o

PASSDB_OBJ = passdb/passdb.o passdb/smbpassfile.o passdb/smbpass.o \
             passdb/pass_check.o passdb/ldap.o passdb/nispass.o \
             passdb/smbpasschange.o passdb/mysqlpass.o \
             lib/util_pwdb.o lib/domain_namemap.o

SIDDB_OBJ = lib/sids.o

PROFILE_OBJ = profile/profile.o

SMBD_OBJ1 = smbd/server.o smbd/files.o smbd/connection.o \
            smbd/dfree.o smbd/dir.o smbd/password.o smbd/conn.o smbd/fileio.o \
            smbd/ipc.o smbd/lanman.o smbd/mangle.o smbd/negprot.o \
            smbd/message.o smbd/nttrans.o smbd/pipes.o smbd/predict.o \
            smbd/$(QUOTAOBJS) smbd/reply.o smbd/ssl.o smbd/trans2.o \
            smbd/uid.o lib/set_uid.o \
	    smbd/dosmode.o smbd/filename.o smbd/open.o smbd/close.o smbd/blocking.o \
	    smbd/process.o smbd/oplock.o smbd/service.o smbd/error.o smbd/vfs.o \
	    smbd/vfs-wrap.o smbd/dfs.o \
		smbd/challenge.o \
		passdb/smbpassfile.o \
		passdb/pass_check.o \
		lib/util_pwdb.o

PRINTING_OBJ = printing/pcap.o printing/print_svid.o printing/printing.o

MSRPCD_OBJ = msrpc/msrpcd.o \
		msrpc/msrpcd_process.o \
		lib/set_vuid.o \
		lib/set_uid.o

BROWSERD_OBJ1 = browserd/browserd.o \
		passdb/smbpassfile.o \
		rpc_server/srv_brs.o

WKSSVCD_OBJ1 = wkssvcd/wkssvcd.o \
		passdb/smbpassfile.o \
		rpc_server/srv_wkssvc.o \
		wkssvcd/srv_wkssvc_nt.o

SRVSVCD_OBJ1 = srvsvcd/srvsvcd.o \
		srvsvcd/srv_srvsvc_nt.o \
		passdb/smbpassfile.o \
		rpc_server/srv_srvsvc.o

WINREGD_OBJ1 = winregd/winregd.o \
		passdb/smbpassfile.o \
		rpc_server/srv_reg.o

NETLOGOND_OBJ1 = netlogond/netlogond.o \
		netlogond/creds_db.o \
		netlogond/srv_netlogon_nt.o \
		rpc_server/srv_netlog.o \
		rpc_server/srv_pipe_netsec.o \
		rpc_server/srv_lookup.o \
		samrd/srv_samr_passdb.o \
		lib/passcheck.o \
		smbd/chgpasswd.o

NETLOGONTDBD_OBJ1 = netlogond/netlogond.o \
		netlogond/creds_db.o \
		netlogond/srv_netlogon_nt.o \
		rpc_server/srv_netlog.o \
		rpc_server/srv_pipe_netsec.o \
		rpc_server/srv_lookup.o \
		lib/passcheck.o \
		smbd/chgpasswd.o \
		samrd/srv_samr_tdb_init.o \
		samrd/srv_samr_dom_tdb.o \
		samrd/srv_samr_sam_tdb.o \
		samrd/srv_samr_usr_tdb.o \
		samrd/srv_samr_grp_tdb.o \
		samrd/srv_samr_als_tdb.o \
		samrd/srv_samr_tdb.o


SAMRTDBD_OBJ1 = samrd/samrtdbd.o \
		rpc_server/srv_pipe_ntlmssp.o \
		rpc_server/srv_samr.o \
		passdb/smbpassfile.o \
		lib/sursalgdomonly.o \
		lib/util_pwdb.o lib/domain_namemap.o \
		samrd/srv_samr_tdb_init.o \
		samrd/srv_samr_dom_tdb.o \
		samrd/srv_samr_sam_tdb.o \
		samrd/srv_samr_usr_tdb.o \
		samrd/srv_samr_grp_tdb.o \
		samrd/srv_samr_als_tdb.o \
		samrd/srv_samr_tdb.o

SAMRD_OBJ1 = samrd/samrd.o \
		rpc_server/srv_lookup.o \
		rpc_server/srv_pipe_ntlmssp.o \
		rpc_server/srv_samr.o \
		samrd/srv_samr_passdb.o \
		smbd/chgpasswd.o

SVCCTLD_OBJ1 = svcctld/svcctld.o \
		passdb/smbpassfile.o \
		rpc_server/srv_svcctl.o

LSARPCD_OBJ1 = lsarpcd/lsarpcd.o \
		lsarpcd/srv_lsa.o \
		lsarpcd/srv_lsa_samdb.o \
		rpc_server/srv_lookup.o \
		passdb/smbpassfile.o

SPOOLSSD_OBJ1 = spoolssd/spoolssd.o \
		rpc_server/srv_spoolss.o \
		spoolssd/srv_spoolss_nt.o \
		passdb/smbpassfile.o \
		printing/nt_printing.o 

SMBD_OBJ = $(SMBD_OBJ1) \
           $(RPC_SERVER_OBJ) \
           libsmb/clienttrust.o \
           lib/domain_namemap.o \
           $(LOCKING_OBJ) \
           $(SIDDB_OBJ) \
		$(LIBSTATUS_OBJ) $(PRINTING_OBJ) $(PROFILE_OBJ) 
SMBD_LIBS = $(SAMBA_LIBS) $(UBIQXLIB)

SRVSVCD_OBJ = $(MSRPCD_OBJ) $(SRVSVCD_OBJ1) \
           $(RPC_SRVUTIL_OBJ) \
           $(LOCKING_OBJ) $(PROFILE_OBJ)  \
		$(LIBSTATUS_OBJ)

WKSSVCD_OBJ = $(MSRPCD_OBJ) $(WKSSVCD_OBJ1) \
           $(RPC_SRVUTIL_OBJ) \
           $(LOCKING_OBJ) $(PROFILE_OBJ) 

BROWSERD_OBJ = $(MSRPCD_OBJ) $(BROWSERD_OBJ1) \
           $(RPC_SRVUTIL_OBJ) \
           $(LOCKING_OBJ) $(PROFILE_OBJ) 

WINREGD_OBJ = $(MSRPCD_OBJ) $(WINREGD_OBJ1) \
           $(RPC_SRVUTIL_OBJ) \
           $(LOCKING_OBJ) $(PROFILE_OBJ) 

SVCCTLD_OBJ = $(MSRPCD_OBJ) $(SVCCTLD_OBJ1) \
           $(RPC_SRVUTIL_OBJ) \
           $(LOCKING_OBJ) $(PROFILE_OBJ) 

LSARPCD_OBJ = $(MSRPCD_OBJ) $(LSARPCD_OBJ1) \
           $(RPC_SRVUTIL_OBJ) \
           $(SIDDB_OBJ) $(LOCKING_OBJ) \
		$(PROFILE_OBJ) 
LSARPCD_LIBS = $(SAMBA_LIBS) $(SMBPWLIB) $(UBIQXLIB)

SPOOLSSD_OBJ = $(MSRPCD_OBJ) $(SPOOLSSD_OBJ1) \
		$(PRINTING_OBJ) \
           $(RPC_SRVUTIL_OBJ) \
           $(LOCKING_OBJ) $(PROFILE_OBJ) 

NETLOGOND_OBJ = $(MSRPCD_OBJ) $(NETLOGOND_OBJ1) \
           $(RPC_SRVUTIL_OBJ) \
           $(LOCKING_OBJ) \
           $(SIDDB_OBJ) \
		$(LIBSTATUS_OBJ) $(PROFILE_OBJ) 
NETLOGOND_LIBS = $(SAMBA_LIBS) $(SMBPWLIB) $(UBIQXLIB)

SAMRTDBD_OBJ = $(MSRPCD_OBJ) $(SAMRTDBD_OBJ1) \
           $(RPC_SRVUTIL_OBJ) \
           $(LOCKING_OBJ) \
           $(SIDDB_OBJ) \
		$(PROFILE_OBJ) 

SAMRD_OBJ = $(MSRPCD_OBJ) $(SAMRD_OBJ1) \
           $(RPC_SRVUTIL_OBJ) \
           $(LOCKING_OBJ) \
           $(SIDDB_OBJ) \
		$(PROFILE_OBJ) 
SAMRD_LIBS = $(SAMBA_LIBS) $(SMBPWLIB) $(UBIQXLIB)

NMBD_OBJ1 = nmbd/asyncdns.o nmbd/nmbd.o nmbd/nmbd_become_dmb.o \
            nmbd/nmbd_become_lmb.o nmbd/nmbd_browserdb.o \
            nmbd/nmbd_browsesync.o nmbd/nmbd_elections.o \
            nmbd/nmbd_incomingdgrams.o nmbd/nmbd_incomingrequests.o \
            nmbd/nmbd_lmhosts.o nmbd/nmbd_logonnames.o nmbd/nmbd_mynames.o \
            nmbd/nmbd_namelistdb.o nmbd/nmbd_namequery.o \
            nmbd/nmbd_nameregister.o nmbd/nmbd_namerelease.o \
            nmbd/nmbd_nodestatus.o nmbd/nmbd_packets.o \
            nmbd/nmbd_processlogon.o nmbd/nmbd_responserecordsdb.o \
            nmbd/nmbd_sendannounce.o nmbd/nmbd_serverlistdb.o \
            nmbd/nmbd_subnetdb.o nmbd/nmbd_winsproxy.o nmbd/nmbd_winsserver.o \
            nmbd/nmbd_workgroupdb.o nmbd/nmbd_synclists.o

NMBD_OBJ = $(NMBD_OBJ1)
NMBD_LIBS = $(SMBLIB) $(NMBLIB) $(SAMBALIB) $(UBIQXLIB)

SWAT_OBJ = web/cgi.o web/diagnose.o web/startstop.o web/statuspage.o \
           web/swat.o libsmb/passchange.o $(LOCKING_OBJ) \
           rpc_server/srv_lookup.o \
           $(SIDDB_OBJ) \
           $(STUB_UID_OBJ)
SWAT_LIBS = $(SAMBA_LIBS) $(SMBPWLIB) $(UBIQXLIB)

SMBRUN_OBJ = utils/smbrun.o

SMBSH_OBJ = smbwrapper/smbsh.o smbwrapper/shared.o

MAKE_SMBCODEPAGE_OBJ = utils/make_smbcodepage.o

MAKE_PRINTERDEF_OBJ = utils/make_printerdef.o

STATUS_OBJ = utils/status.o $(LIBSTATUS_OBJ) $(LOCKING_OBJ) \
             $(PROFILE_OBJ)  $(STUB_UID_OBJ)

TESTPARM_OBJ = utils/testparm.o

TESTPRNS_OBJ = utils/testprns.o $(PRINTING_OBJ) 

SMBPASSWD_OBJ = utils/smbpasswd.o libsmb/passchange.o \
		libsmb/clienttrust.o \
           rpc_server/srv_lookup.o \
		rpc_client/cli_netlogon_sync.o \
           $(SIDDB_OBJ) $(STUB_UID_OBJ)
SMBPASSWD_LIBS = $(SAMBA_LIBS) $(SMBPWLIB) $(UBIQXLIB)

RPCCLIENT_OBJ = rpcclient/rpcclient.o \
		rpcclient/display_at.o \
		rpcclient/display_event.o \
		rpcclient/display_reg.o \
		rpcclient/display_sam.o \
		rpcclient/display_sec.o \
		rpcclient/display_spool.o \
		rpcclient/display_srv.o \
		rpcclient/display_svc.o \
		rpcclient/display_sync.o \
		rpcclient/cmd_lsarpc.o \
		rpcclient/cmd_wkssvc.o \
		rpcclient/cmd_brs.o \
		rpcclient/cmd_samr.o \
		rpcclient/cmd_reg.o \
		rpcclient/cmd_srvsvc.o \
		rpcclient/cmd_svcctl.o \
		rpcclient/cmd_netlogon.o \
		rpcclient/cmd_atsvc.o \
		rpcclient/cmd_spoolss.o \
		rpcclient/cmd_eventlog.o \
           $(SIDDB_OBJ) \
		$(STUB_UID_OBJ)
RPCCLIENT_LIBS = $(SAMBA_LIBS) $(SMBPWLIB) $(UBIQXLIB)

SMBWRAPPER_OBJ = smbwrapper/smbw.o smbwrapper/wrapped.o \
		smbwrapper/smbw_dir.o smbwrapper/smbw_stat.o \
		smbwrapper/realcalls.o smbwrapper/shared.o

CLIENT_OBJ = client/client.o client/clitar.o 
CLIENT_LIBS = $(SMBLIB) $(NMBLIB) $(SAMBALIB)

MOUNT_OBJ = client/smbmount.o client/clientutil.o \
              $(RPC_PARSE_OBJ2)

MNT_OBJ = client/smbmnt.o \
              $(RPC_PARSE_OBJ2)

UMOUNT_OBJ = client/smbumount.o \
              $(RPC_PARSE_OBJ2)

NMB_AGENT_OBJ = utils/nmb-agent.o \
                 $(RPC_PARSE_OBJ2)

NMBLOOKUP_OBJ = utils/nmblookup.o

#$(RPC_PARSE_OBJ2)

DEBUG2HTML_OBJ = utils/debug2html.o 

SMB_AGENT_OBJ = utils/smb-agent.o  \
			$(RPC_PARSE_OBJ2) rpc_client/cli_use.o

SMB_CLIENT_OBJ = smb-client.o 

SMBTORTURE_OBJ = utils/torture.o \

SMBFILTER_OBJ = utils/smbfilter.o \
                 rpc_parse/parse_creds.o \
		 rpc_parse/parse_ntlmssp.o rpc_parse/parse_prs.o \
		 rpc_parse/parse_misc.o

RPCTORTURE_OBJ = utils/rpctorture.o \
             rpcclient/display.o \
             rpcclient/cmd_lsarpc.o \
             rpcclient/cmd_wkssvc.o \
             rpcclient/cmd_samr.o \
             rpcclient/cmd_srvsvc.o \
             rpcclient/cmd_netlogon.o \
           $(SIDDB_OBJ)

PROTO_OBJ =  $(LIB_OBJ) $(LIBNMB_OBJ) $(PARAM_OBJ) \
		$(MSRPCD_OBJ) $(SVCCTLD_OBJ1) $(WINREGD_OBJ1) \
		$(SAMRD_OBJ1) \
		$(SAMRTDBD_OBJ1) \
		$(SRVSVCD_OBJ1) $(WKSSVCD_OBJ1) $(BROWSERD_OBJ1) \
		$(SPOOLSSD_OBJ1) $(NETLOGOND_OBJ1) \
		$(LSARPCD_OBJ1) $(SMBD_OBJ) $(NMBD_OBJ) \
		$(SWAT_OBJ) $(CLIENT_OBJ) \
		$(RPCCLIENT_OBJ) $(LIBSMB_OBJ) $(SMBWRAPPER_OBJ) \
		$(GROUPDB_OBJ) $(PASSDB_OBJ) $(SAMPASSDB_OBJ) \
		$(SMBPASSWD_OBJ) $(SIDDB_OBJ) \
		$(RPC_SRVUTIL_OBJ) \
		$(RPC_CLIENT_OBJ) $(RPC_PARSE_OBJ2) \
		$(PASSDB_OBJ) $(SAMPASSDB_OBJ) $(GROUPDB_OBJ)

SMBWRAPPERPICOBJS = $(SMBWRAPPER_OBJ:.o=.po)
SMBWRAPPERPICOBJS32 = $(SMBWRAPPER_OBJ:.o=.po32)

LIBSMBPW_LTOBJS = $(GROUPDB_OBJ:.o=.lo) $(SAMPASSDB_OBJ:.o=.lo) \
		$(PASSDB_OBJ:.o=.lo)

LIBUBIQX_LTOBJS = $(UBIQX_OBJ:.o=.lo)

LIBSAMBA_LTOBJS = $(LIBSAMBA_OBJ:.o=.lo)

LIBNMB_LTOBJS = $(LIBNMB_OBJ:.o=.lo)

LIBSMB_LTOBJS = $(LIBSMB_OBJ:.o=.lo)

LIBMSRPC_LTOBJS = $(RPC_CLIENT_OBJ:.o=.lo) $(RPC_PARSE_OBJ:.o=.lo)

######################################################################
# now the rules...
######################################################################

all : CHECK $(SPROGS) $(PROGS) 

libnmb : CHECK $(NMBLIB)

libsmb : CHECK $(SMBLIB)

libsmbpw : CHECK $(SMBPWLIB)

libmsrpc : CHECK $(MSRPCLIB)

libsamba : CHECK $(SAMBALIB)

libubiqx : CHECK $(UBIQXLIB)

smbwrapper : CHECK bin/smbsh bin/smbwrapper.so @WRAP32@

smbtorture : CHECK bin/smbtorture

rpctorture : CHECK bin/rpctorture

smbfilter : CHECK bin/smbfilter

.SUFFIXES:
.SUFFIXES: .c .o .lo .po .po32

CHECK:
	@echo "Using FLAGS = $(FLAGS)"
	@echo "Using LIBS = $(LIBS)"

MAKEDIR = || exec false; \
	  if test -d "$$dir"; then :; else \
	  echo mkdir "$$dir"; \
	  mkdir -p "$$dir" >/dev/null 2>&1 || \
	  test -d "$$dir" || \
	  mkdir "$$dir" || \
	  exec false; fi || exec false

# the lines below containing `@MAINT@' are for atomatic dependency tracking
# they will only work with GNU make, gcc and --enable-maintainer-mode
# without --enable-maintainer-mode, they do nothing
.c.o: @MAINT@ .deps/.dummy
	@if (: >> $@ || : > $@) >/dev/null 2>&1; then rm -f $@; else \
	 dir=`echo $@ | sed 's,/[^/]*$$,,;s,^$$,.,'` $(MAKEDIR); fi
@MAINT@	@if (: >> .deps/$@ || : > .deps/$@) >/dev/null 2>&1; then :; \
@MAINT@	 else dir=.deps/`echo $@ | sed 's,/[^/]*$$,,;s,^$$,.,'` \
@MAINT@	      $(MAKEDIR); fi; rm -f .deps/$@ .deps/$@d
	@echo Compiling $*.c
	@$(CC) -I. -I$(srcdir) $(FLAGS) -c $< \
	  -o $@ @MAINT@ -Wp,-MD,.deps/$@
@MAINT@	@sed 's|^'`echo $@ | sed 's,.*/,,'`':|$@:|' \
@MAINT@	  <.deps/$@ >.deps/$@d && \
@MAINT@	rm -f .deps/$@ && : >.deps/.stamp

# This is for libtool
.c.lo: @MAINT@ .deps/.dummy
	@if (: >> $@ || : > $@) >/dev/null 2>&1; then rm -f $@; else \
	  dir=`echo $@ | sed 's,/[^/]*$$,,;s,^$$,.,'` $(MAKEDIR); fi
@MAINT@	@if (: >> .deps/$@ || : > .deps/$@) >/dev/null 2>&1; then :; \
@MAINT@	 else dir=.deps/`echo $@ | sed 's,/[^/]*$$,,;s,^$$,.,'` \
@MAINT@	      $(MAKEDIR); fi; rm -f .deps/$@ .deps/$@d
	@echo Compiling $< with libtool
	@$(LIBTOOL) --mode=compile \
	  $(CC) -I. -I$(srcdir) $(FLAGS) -c $< \
	  -o $@ @MAINT@ -Wp,-MD,.deps/$@
@MAINT@	@sed 's|^.*'`echo $* | sed 's,.*/,,'`'.*:|$@:|' \
@MAINT@	  <.deps/$@ >.deps/$@d && \
@MAINT@	rm -f .deps/$@ && : >.deps/.stamp

.c.po: @MAINT@ .deps/.dummy
	@if (: >> $@ || : > $@) >/dev/null 2>&1; then rm -f $@; else \
	  dir=`echo $@ | sed 's,/[^/]*$$,,;s,^$$,.,'` $(MAKEDIR); fi
@MAINT@	@if (: >> .deps/$@ || : > .deps/$@) >/dev/null 2>&1; then :; \
@MAINT@	 else dir=.deps/`echo $@ | sed 's,/[^/]*$$,,;s,^$$,.,'` \
@MAINT@	      $(MAKEDIR); fi; rm -f .deps/$@ .deps/$@d
	@echo Compiling $*.c with @PICFLAG@
	@$(CC) -I. -I$(srcdir) $(FLAGS) @PICFLAG@ -c $< \
	  -o $*.po.o @MAINT@ -Wp,-MD,.deps/$@
@MAINT@	@sed 's|^'`echo $*\.po\.o | sed 's,.*/,,'`':|$@:|' \
@MAINT@	  <.deps/$@ >.deps/$@d && \
@MAINT@	rm -f .deps/$@ && : >.deps/.stamp
	@mv $*.po.o $@

# this is for IRIX
.c.po32: @MAINT@ .deps/.dummy
	@if (: >> $@ || : > $@) >/dev/null 2>&1; then rm -f $@; else \
	  dir=`echo $@ | sed 's,/[^/]*$$,,;s,^$$,.,'` $(MAKEDIR); fi
@MAINT@	@if (: >> .deps/$@ || : > .deps/$@) >/dev/null 2>&1; then :; \
@MAINT@	 else dir=.deps/`echo $@ | sed 's,/[^/]*$$,,;s,^$$,.,'` \
@MAINT@	      $(MAKEDIR); fi; rm -f .deps/$@ .deps/$@d
	@echo Compiling $*.c with @PICFLAG@ and -32
	@$(CC) -32 -I. -I$(srcdir) $(FLAGS) @PICFLAG@ -c $< \
	  -o $*.po32.o @MAINT@ -Wp,-MD,.deps/$@
@MAINT@	@sed 's|^'`echo $*.po32.o | sed 's,.*/,,'`':|$@:|' \
@MAINT@	  <.deps/$@ >.deps/$@d && \
@MAINT@	rm -f .deps/$@ && : >.deps/.stamp
	@mv $*.po32.o $@

bin/.dummy:
	@if (: >> $@ || : > $@) >/dev/null 2>&1; then :; else \
	  dir=bin $(MAKEDIR); fi
	@: >> $@ || : > $@ # what a fancy emoticon!

bin/libmsrpc.la: $(LIBMSRPC_LTOBJS) bin/.dummy
	@echo Linking shared library $@
	@$(LINK) -o $@ -rpath $(LIBDIR) -version-info 0:1:0 \
	  $(LIBMSRPC_LTOBJS)

bin/libnmb.la: $(LIBNMB_LTOBJS) bin/.dummy
	@echo Linking shared library $@
	@$(LINK) -o $@ -rpath $(LIBDIR) -version-info 0:1:0 \
	  $(LIBNMB_LTOBJS)

bin/libsmbpw.la: $(LIBSMBPW_LTOBJS) bin/.dummy
	@echo Linking shared library $@
	@$(LINK) -o $@ -rpath $(LIBDIR) -version-info 0:1:0 \
	  $(LIBSMBPW_LTOBJS)

bin/libsmb.la: $(LIBSMB_LTOBJS) bin/.dummy
	@echo Linking shared library $@
	@$(LINK) -o $@ -rpath $(LIBDIR) -version-info 0:1:0 \
	  $(LIBSMB_LTOBJS)

bin/libubiqx.la: $(LIBUBIQX_LTOBJS) bin/.dummy
	@echo Linking shared library $@
	@$(LINK) -o $@ -rpath $(LIBDIR) -version-info 0:1:0 \
	  $(LIBUBIQX_LTOBJS)

bin/libsamba.la: $(LIBSAMBA_LTOBJS) bin/.dummy
	@echo Linking shared library $@
	@$(LINK) -o $@ -rpath $(LIBDIR) -version-info 0:1:0 \
	  $(LIBSAMBA_LTOBJS)

bin/smbd: $(SMBD_LIBS) $(SMBD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SMBD_OBJ) $(SMBD_LIBS) $(LIBS)

bin/svcctld: $(SAMBA_LIBS) $(SVCCTLD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SVCCTLD_OBJ) $(SAMBA_LIBS) $(LIBS)

bin/lsarpcd: $(LSARPCD_LIBS) $(LSARPCD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(LSARPCD_OBJ) $(LSARPCD_LIBS) $(LIBS)

bin/spoolssd: $(SAMBA_LIBS) $(SPOOLSSD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SPOOLSSD_OBJ) $(SAMBA_LIBS) $(LIBS)

bin/srvsvcd: $(SAMBA_LIBS) $(SRVSVCD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SRVSVCD_OBJ) $(SAMBA_LIBS) $(LIBS)

bin/wkssvcd: $(SAMBA_LIBS) $(WKSSVCD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(WKSSVCD_OBJ) $(SAMBA_LIBS) $(LIBS)

bin/browserd: $(SAMBA_LIBS) $(BROWSERD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(BROWSERD_OBJ) $(SAMBA_LIBS) $(LIBS)

bin/winregd: $(SAMBA_LIBS) $(WINREGD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(WINREGD_OBJ) $(SAMBA_LIBS) $(LIBS)

bin/netlogond: $(NETLOGOND_LIBS) $(NETLOGOND_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(NETLOGOND_OBJ) $(NETLOGOND_LIBS) $(LIBS)

bin/samrd: $(SAMRD_LIBS) $(SAMRD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SAMRD_OBJ) $(SAMRD_LIBS) $(LIBS)

bin/samrtdbd: $(SAMBA_LIBS) $(UBIQXLIB) $(SAMRTDBD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SAMRTDBD_OBJ) $(SAMBA_LIBS) $(UBIQXLIB) $(LIBS)

bin/nmbd: $(NMBD_LIBS) $(NMBD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(NMBD_OBJ) $(NMBD_LIBS) $(LIBS)

bin/swat: $(SWAT_LIBS) $(SWAT_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SWAT_OBJ) $(SWAT_LIBS) $(LIBS)

bin/smbrun: $(SMBRUN_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SMBRUN_OBJ) $(LIBS)

bin/rpcclient: $(RPCCLIENT_LIBS) $(RPCCLIENT_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(RPCCLIENT_OBJ) $(RPCCLIENT_LIBS) $(LIBS)

bin/smbclient: $(CLIENT_LIBS) $(CLIENT_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(CLIENT_OBJ) $(CLIENT_LIBS) $(LIBS)

#bin/smbmount: $(SMBLIB) $(SAMBALIB) $(NMBLIB) $(MOUNT_OBJ) bin/.dummy
#	@echo Linking $@
#	@$(LINK) -o $@ $(MOUNT_OBJ) $(SAMBALIB) $(SMBLIB) $(NMBLIB) $(LIBS)

#bin/smbmnt: $(SMBLIB) $(SAMBALIB) $(NMBLIB) $(MNT_OBJ) bin/.dummy
#	@echo Linking $@
#	@$(LINK) -o $@ $(MNT_OBJ) $(SMBLIB) $(SAMBALIB) $(NMBLIB) $(LIBS)

#bin/smbumount: $(SMBLIB) $(SAMBALIB) $(NMBLIB) $(UMOUNT_OBJ) bin/.dummy
#	@echo Linking $@
#	@$(LINK) -o $@ $(UMOUNT_OBJ) $(SMBLIB) $(SAMBALIB) $(NMBLIB) $(LIBS)

bin/testparm: $(SAMBALIB) $(TESTPARM_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(TESTPARM_OBJ) $(SAMBALIB) $(LIBS)

bin/testprns: $(SAMBALIB) $(TESTPRNS_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(TESTPRNS_OBJ) $(SAMBALIB) $(LIBS)

bin/smbstatus: $(SAMBALIB) $(STATUS_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(STATUS_OBJ) $(SAMBALIB) $(LIBS)

bin/smbpasswd: $(SMBPASSWD_LIBS) $(SMBPASSWD_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SMBPASSWD_OBJ) $(SMBPASSWD_LIBS) $(LIBS)

bin/make_smbcodepage: $(SAMBALIB) $(MAKE_SMBCODEPAGE_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(MAKE_SMBCODEPAGE_OBJ) $(SAMBALIB) $(LIBS)

bin/nmblookup: $(SAMBALIB) $(NMBLIB) $(NMBLOOKUP_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(NMBLOOKUP_OBJ) $(NMBLIB) $(SAMBALIB) $(LIBS)

bin/make_printerdef: $(SAMBALIB) $(MAKE_PRINTERDEF_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(MAKE_PRINTERDEF_OBJ) $(SAMBALIB) $(LIBS)

bin/smbtorture: $(SAMBA_LIBS) $(SMBTORTURE_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SMBTORTURE_OBJ) $(SAMBA_LIBS) $(LIBS)

bin/rpctorture: $(SAMBA_LIBS) $(RPCTORTURE_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(RPCTORTURE_OBJ) $(SAMBA_LIBS) $(LIBS)

bin/smb-client: $(SMB_CLIENT_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SMB_CLIENT_OBJ) $(LIBS)

bin/nmb-agent: $(SAMBALIB) $(SMBLIB) $(NMBLIB) $(NMB_AGENT_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(NMB_AGENT_OBJ) $(SAMBALIB) $(SMBLIB) $(NMBLIB) $(LIBS)

bin/smb-agent: $(SMBLIB) $(SAMBALIB) $(NMBLIB) $(SMB_AGENT_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SMB_AGENT_OBJ) $(SMBLIB) $(SAMBALIB) $(NMBLIB) $(LIBS)

bin/smbfilter: $(SAMBA_LIBS) $(SMBFILTER_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SMBFILTER_OBJ) $(SAMBA_LIBS) $(LIBS)

bin/debug2html: $(SAMBALIB) $(DEBUG2HTML_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(DEBUG2HTML_OBJ) $(SAMBALIB) $(LIBS)

bin/smbwrapper.so: $(SMBWRAPPERPICOBJS)
	@echo Linking smbwrapper shared library $@
	@$(LD) @LDSHFLAGS@ -o $@ $(SMBWRAPPERPICOBJS) $(LIBS)

bin/smbwrapper.32.so: $(SMBWRAPPERPICOBJS32)
	@echo Linking smbwrapper shared library $@
	@$(LD) -32 @LDSHFLAGS@ -o $@ $(SMBWRAPPERPICOBJS32) $(LIBS)

bin/smbsh: $(SAMBALIB) $(SMBSH_OBJ) bin/.dummy
	@echo Linking $@
	@$(LINK) -o $@ $(SMBSH_OBJ) $(SAMBALIB) $(LIBS)

install: installdirs \
	install-libs installbin install-sbin \
	installman installscripts installcp installswat

installdirs:
	@for p in $(BASEDIR) $(SBINDIR) $(BINDIR) $(LIBDIR) $(VARDIR) \
		$(CODEPAGEDIR); do \
	    $(SHELL) $(srcdir)/install-sh -d -m $(INSTALLPERMS) $(DESTDIR)$$p; \
	done

install-libs: $(SHARED_LIBS) installdirs
	@list='$(SHARED_LIBS)'; for p in $$list; do \
	  echo Installing $$p in $(LIBDIR) using libtool; \
	  $(LIBTOOL) --mode=install $(INSTALL) $$p $(DESTDIR)$(LIBDIR); \
	done

installbin: all installdirs
	@list='$(PROGS)'; for p in $$list; do \
	  echo Installing $$p in $(BINDIR) using libtool; \
	  $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(BINDIR); \
	done

install-sbin: all installdirs
	@list='$(SPROGS)'; for p in $$list; do \
	  echo Installing $$p in $(SBINDIR) using libtool; \
	  $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(SBINDIR); \
	done

installscripts: installdirs
	@$(SHELL) $(srcdir)/script/installscripts.sh $(INSTALLPERMS) $(BINDIR) $(patsubst %,$(srcdir)/%,$(SCRIPTS))

installcp: installdirs
	@$(SHELL) $(srcdir)/script/installcp.sh $(srcdir) $(LIBDIR) $(CODEPAGEDIR) $(BINDIR) $(CODEPAGELIST)

installswat: installdirs
	@$(SHELL) $(srcdir)/script/installswat.sh $(SWATDIR) $(srcdir)

# revert to the previously installed version
revert:
	@$(SHELL) $(srcdir)/script/revert.sh $(SBINDIR) $(SPROGS) 
	@$(SHELL) $(srcdir)/script/revert.sh $(BINDIR) $(PROGS) $(SCRIPTS)

installman:
	@$(SHELL) $(srcdir)/script/installman.sh $(MANDIR) $(srcdir) "@ROFF@"

uninstall: uninstallman uninstallbin uninstallscripts uninstallcp

uninstallman:
	@$(SHELL) $(srcdir)/script/uninstallman.sh $(MANDIR) $(srcdir)

uninstallbin:
	@$(SHELL) $(srcdir)/script/uninstallbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(LIBDIR) $(VARDIR) $(SPROGS)
	@$(SHELL) $(srcdir)/script/uninstallbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(LIBDIR) $(VARDIR) $(PROGS)

uninstallscripts:
	@$(SHELL) $(srcdir)/script/uninstallscripts.sh $(INSTALLPERMS) $(BINDIR) $(SCRIPTS)

uninstallcp:
	@$(SHELL) $(srcdir)/script/uninstallcp.sh $(CODEPAGEDIR) $(CODEPAGELIST)

clean: 
	-rm -f core */*~ *~ */*.o */*.po */*.po32 */*.lo */*.so

proto: libsmb_proto rpc_client_proto rpc_parse_proto \
		all_other_proto_for_now

all_other_proto_for_now: 
	@echo rebuilding include/proto.h
	@cd $(srcdir) && $(AWK) -f script/mkproto.awk `echo $(PROTO_OBJ) | tr ' ' '\n' | sed -e 's/\.o/\.c/g' | sort -u | egrep -v 'ubiqx/|wrapped'` > include/proto.h

libsmb_proto:
	@echo rebuilding include/libsmb_proto.h
	@cd $(srcdir) && $(AWK) -v headername=_LIB_SMB_PROTO_H_ \
	  -f script/mkproto.awk `echo $(LIBSMB_OBJ) | tr ' ' '\n' | sed -e 's/\.o/\.c/g' | sort -u | egrep -v 'ubiqx/|wrapped'` > include/lib_smb_proto.h

rpc_parse_proto:
	@echo rebuilding include/rpc_parse_proto.h
	@cd $(srcdir) && $(AWK) -v headername=_RPC_PARSE_PROTO_H_ \
	  -f script/mkproto.awk `echo $(RPC_PARSE_OBJ) | tr ' ' '\n' | sed -e 's/\.o/\.c/g' | sort -u | egrep -v 'ubiqx/|wrapped'` > include/rpc_parse_proto.h

rpc_client_proto:
	@echo rebuilding include/rpc_client_proto.h
	@cd $(srcdir) && $(AWK) -v headername=_RPC_CLIENT_PROTO_H_ \
	  -f script/mkproto.awk `echo $(RPC_CLIENT_OBJ) | tr ' ' '\n' | sed -e 's/\.o/\.c/g' | sort -u | egrep -v 'ubiqx/|wrapped'` > include/rpc_client_proto.h

etags:
	etags `find . -name "*.[ch]"`

ctags:
	ctags `find . -name "*.[ch]"`

realclean: clean
	-rm -f config.log $(PROGS) $(SPROGS) bin/.dummy
	-rm -rf bin

distclean: realclean
	-rm -f include/config.h include/stamp-h Makefile
	-rm -f config.status config.cache so_locations
	-rm -f libtool
	-rm -rf .deps

#
# This target is for documentation updaters. It regenerates
# the man pages and HTML docs from the YODL source files.
# In order for this target to work YODL must be installed
# and working on your system. JRA.
yodldocs:
	@$(SHELL) $(srcdir)/script/makeyodldocs.sh $(srcdir)

# this target is really just for my use. It only works on a limited
# range of machines and is used to produce a list of potentially
# dead (ie. unused) functions in the code. (tridge)
finddead:
	nm */*.o |grep 'U ' | awk '{print $$2}' | sort -u > nmused.txt
	nm */*.o |grep 'T ' | awk '{print $$3}' | sort -u > nmfns.txt
	comm -13 nmused.txt nmfns.txt 

finddeadsmbd:
	nm $(SMBD_OBJ) |grep 'U ' | awk '{print $$2}' | sort -u > nmusedsmbd.txt
	nm $(SMBD_OBJ) |grep 'T ' | awk '{print $$3}' | sort -u > nmfnssmbd.txt
	comm -13 nmusedsmbd.txt nmfnssmbd.txt 

# Rules for maintainers (--enable-maintainer-mode)
AUTOCONF=@AUTOCONF@
AUTOHEADER=@AUTOHEADER@

# when configure.in is updated, reconfigure
$(srcdir)/configure: @MAINT@ $(srcdir)/configure.in $(srcdir)/aclocal.m4
	cd $(srcdir) && $(AUTOCONF)

config.status: $(srcdir)/configure
	$(SHELL) ./config.status --recheck

Makefile: $(srcdir)/Makefile.in config.status \
	  include/stamp-h # just to ensure that config.h is up-to-date
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

libtool: $(LIBTOOL_DEPS)
	$(SHELL) ./config.status --recheck
# So something depends on libtool, so it gets rebuild, if needed
$(SHARED_LIBS): libtool

# note that nothing depends on config.h, so will probably be rebuilt
# only when explicitly requested, unless dependency tracking is enabled
include/config.h: include/stamp-h
	@:

include/stamp-h: $(srcdir)/include/config.h.in config.status
	CONFIG_FILES= CONFIG_HEADERS=include/config.h $(SHELL) ./config.status
	@echo > include/stamp-h

$(srcdir)/include/config.h.in: $(srcdir)/include/stamp-h.in
	@:

$(srcdir)/include/stamp-h.in: @MAINT@ $(srcdir)/acconfig.h $(srcdir)/configure.in
	cd $(srcdir) && $(AUTOHEADER)
	@date -u > $@

# automatic dependency tracking rules
.deps/.dummy:
	@if (: >> $@ || : > $@) >/dev/null 2>&1; then :; else \
	  dir=.deps $(MAKEDIR); fi
	@: >> $@ || : > $@ # what a fancy emoticon!

.deps/.stamp: .deps/.dummy
	@: >> $@ || : > $@

.deps/depend: .deps/.stamp
	@echo Updating dependencies
	@: | cat `find .deps -type f -name \*d` >$@ 2>/dev/null || true

@MAINT@-include .deps/depend
