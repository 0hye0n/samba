# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _security
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


SEC_PRIV_SECURITY = _security.SEC_PRIV_SECURITY
SEC_PRIV_BACKUP = _security.SEC_PRIV_BACKUP
SEC_PRIV_RESTORE = _security.SEC_PRIV_RESTORE
SEC_PRIV_SYSTEMTIME = _security.SEC_PRIV_SYSTEMTIME
SEC_PRIV_SHUTDOWN = _security.SEC_PRIV_SHUTDOWN
SEC_PRIV_REMOTE_SHUTDOWN = _security.SEC_PRIV_REMOTE_SHUTDOWN
SEC_PRIV_TAKE_OWNERSHIP = _security.SEC_PRIV_TAKE_OWNERSHIP
SEC_PRIV_DEBUG = _security.SEC_PRIV_DEBUG
SEC_PRIV_SYSTEM_ENVIRONMENT = _security.SEC_PRIV_SYSTEM_ENVIRONMENT
SEC_PRIV_SYSTEM_PROFILE = _security.SEC_PRIV_SYSTEM_PROFILE
SEC_PRIV_PROFILE_SINGLE_PROCESS = _security.SEC_PRIV_PROFILE_SINGLE_PROCESS
SEC_PRIV_INCREASE_BASE_PRIORITY = _security.SEC_PRIV_INCREASE_BASE_PRIORITY
SEC_PRIV_LOAD_DRIVER = _security.SEC_PRIV_LOAD_DRIVER
SEC_PRIV_CREATE_PAGEFILE = _security.SEC_PRIV_CREATE_PAGEFILE
SEC_PRIV_INCREASE_QUOTA = _security.SEC_PRIV_INCREASE_QUOTA
SEC_PRIV_CHANGE_NOTIFY = _security.SEC_PRIV_CHANGE_NOTIFY
SEC_PRIV_UNDOCK = _security.SEC_PRIV_UNDOCK
SEC_PRIV_MANAGE_VOLUME = _security.SEC_PRIV_MANAGE_VOLUME
SEC_PRIV_IMPERSONATE = _security.SEC_PRIV_IMPERSONATE
SEC_PRIV_CREATE_GLOBAL = _security.SEC_PRIV_CREATE_GLOBAL
SEC_PRIV_ENABLE_DELEGATION = _security.SEC_PRIV_ENABLE_DELEGATION
SEC_PRIV_INTERACTIVE_LOGON = _security.SEC_PRIV_INTERACTIVE_LOGON
SEC_PRIV_NETWORK_LOGON = _security.SEC_PRIV_NETWORK_LOGON
SEC_PRIV_REMOTE_INTERACTIVE_LOGON = _security.SEC_PRIV_REMOTE_INTERACTIVE_LOGON
class SecurityToken(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityToken, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityToken, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _security.new_SecurityToken(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _security.delete_SecurityToken
    __del__ = lambda self : None;
    def is_sid(*args, **kwargs): return _security.SecurityToken_is_sid(*args, **kwargs)
    def is_system(*args, **kwargs): return _security.SecurityToken_is_system(*args, **kwargs)
    def is_anonymous(*args, **kwargs): return _security.SecurityToken_is_anonymous(*args, **kwargs)
    def has_sid(*args, **kwargs): return _security.SecurityToken_has_sid(*args, **kwargs)
    def has_builtin_administrators(*args, **kwargs): return _security.SecurityToken_has_builtin_administrators(*args, **kwargs)
    def has_nt_authenticated_users(*args, **kwargs): return _security.SecurityToken_has_nt_authenticated_users(*args, **kwargs)
    def has_privilege(*args, **kwargs): return _security.SecurityToken_has_privilege(*args, **kwargs)
    def set_privilege(*args, **kwargs): return _security.SecurityToken_set_privilege(*args, **kwargs)
SecurityToken_swigregister = _security.SecurityToken_swigregister
SecurityToken_swigregister(SecurityToken)

class security_descriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, security_descriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, security_descriptor, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _security.new_security_descriptor(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _security.delete_security_descriptor
    __del__ = lambda self : None;
    def sacl_add(*args, **kwargs): return _security.security_descriptor_sacl_add(*args, **kwargs)
    def dacl_add(*args, **kwargs): return _security.security_descriptor_dacl_add(*args, **kwargs)
    def dacl_del(*args, **kwargs): return _security.security_descriptor_dacl_del(*args, **kwargs)
    def sacl_del(*args, **kwargs): return _security.security_descriptor_sacl_del(*args, **kwargs)
    def __eq__(*args, **kwargs): return _security.security_descriptor___eq__(*args, **kwargs)
security_descriptor_swigregister = _security.security_descriptor_swigregister
security_descriptor_swigregister(security_descriptor)

class Sid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sid, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _security.new_Sid(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _security.delete_Sid
    __del__ = lambda self : None;
    def __str__(*args, **kwargs): return _security.Sid___str__(*args, **kwargs)
    def __eq__(*args, **kwargs): return _security.Sid___eq__(*args, **kwargs)
Sid_swigregister = _security.Sid_swigregister
Sid_swigregister(Sid)

random_sid = _security.random_sid
privilege_name = _security.privilege_name
privilege_id = _security.privilege_id


