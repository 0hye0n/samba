###################################################
# server boilerplate generator
# Copyright tridge@samba.org 2003
# Copyright metze@samba.org 2004
# released under the GNU GPL

package IdlServer;

use strict;

my($res);

sub pidl($)
{
	$res .= shift;
}

#####################################################################
# produce boilerplate code for a interface
sub Boilerplate_Iface($)
{
	my($interface) = shift;
	my($data) = $interface->{DATA};
	my $count = 0;
	my $name = $interface->{NAME};
	my $uname = uc $name;

	foreach my $d (@{$data}) {
		if ($d->{TYPE} eq "FUNCTION") { $count++; }
	}

	if ($count == 0) {
		return;
	}

	pidl "static const dcesrv_dispatch_fn_t $name\_dispatch_table[] = {\n";
	foreach my $d (@{$data}) {
		if ($d->{TYPE} eq "FUNCTION") {
			pidl "\t(dcesrv_dispatch_fn_t)$d->{NAME},\n";
		}
	}
	pidl "\tNULL};\n\n";

	pidl "
static NTSTATUS $name\_op_bind(struct dcesrv_call_state *dce_call, const struct dcesrv_interface *iface)
{
	return NT_STATUS_OK;	
}

static void $name\_op_unbind(struct dcesrv_connection *dce_conn, const struct dcesrv_interface *iface)
{
	return;	
}

static NTSTATUS $name\_op_dispatch(struct dcesrv_call_state *dce_call, TALLOC_CTX *mem_ctx, void *r)
{
	uint16 opnum = dce_call->pkt.u.request.opnum;

	return $name\_dispatch_table[opnum](dce_call, mem_ctx, r);	
}

static const struct dcesrv_interface $name\_interface = {
	&dcerpc_table_$name,
	$name\_op_bind,
	$name\_op_unbind,
	$name\_op_dispatch
};

";
}

#####################################################################
# produce boilerplate code for an endpoint server
sub Boilerplate_Ep_Server($)
{
	my($interface) = shift;
	my($data) = $interface->{DATA};
	my $count = 0;
	my $name = $interface->{NAME};
	my $uname = uc $name;

	foreach my $d (@{$data}) {
		if ($d->{TYPE} eq "FUNCTION") { $count++; }
	}

	if ($count == 0) {
		return;
	}

	pidl "
static NTSTATUS $name\_op_init_server(struct dcesrv_context *dce_ctx, const struct dcesrv_endpoint_server *ep_server)
{
	int i;

	for (i=0;i<$name\_interface.ndr->endpoints->count;i++) {
		NTSTATUS ret;
		const char *name = $name\_interface.ndr->endpoints->names[i];

		ret = dcesrv_interface_register(dce_ctx, name, &$name\_interface, NULL);
		if (!NT_STATUS_IS_OK(ret)) {
			DEBUG(1,(\"$name\_op_init_server: failed to register endpoint \'%s\'\\n\",name));
			return ret;
		}
	}

	return NT_STATUS_OK;
}

static BOOL $name\_op_interface_by_uuid(struct dcesrv_interface *iface, const char *uuid, uint32 if_version)
{
	if (strcmp($name\_interface.ndr->name, name)==0) {
		memcpy(iface,&$name\_interface, sizeof(*iface);
		return True;
	}

	return False;	
}

static BOOL $name\_op_interface_by_name(struct dcesrv_interface *iface, const char *name)
{
	if ($name\_interface.ndr->if_version == if_version &&
		strcmp($name\_interface.ndr->uuid, uuid)==0) {
		memcpy(iface,&$name\_interface, sizeof(*iface);
		return True;
	}

	return False;	
}
	
NTSTATUS dcerpc_$name\_init(void)
{
	NTSTATUS ret;
	struct dcesrv_endpoint_server ep_server;

	/* fill in our name */
	ep_server.name = \"$name\";

	/* fill in all the operations */
	ep_server.init_server = $name\_op_init_server;

	ep_server.interface_by_uuid = $name\_op_interface_by_uuid;
	ep_server.interface_by_name = $name\_op_interface_by_name;

	/* register ourselves with the NTVFS subsystem. */
	ret = register_backend(\"dcerpc\", &ep_server);

	if (!NT_STATUS_IS_OK(ret)) {
		DEBUG(0,(\"Failed to register \'$name\' endpoint server!\\n\"));
		return ret;
	}

	return ret;
}

";
}


#####################################################################
# parse a parsed IDL structure back into an IDL file
sub Parse($)
{
	my($idl) = shift;
	$res = "/* dcerpc server boilerplate generated by pidl */\n\n";
	foreach my $x (@{$idl}) {
		if ($x->{TYPE} eq "INTERFACE") { 
			Boilerplate_Iface($x);
			Boilerplate_Ep_Server($x);
		}
	}

	return $res;
}

1;

