#ifndef _PROTO_H_
#define _PROTO_H_
/* This file is automatically generated with "make proto". DO NOT EDIT */


/*The following definitions come from  browserd/browserd.c  */

msrpc_service_fns *get_service_fns(void);
uint32 _brs_query_info( const UNISTR2 *srv_name, uint16 switch_value,
			void *id);

/*The following definitions come from  client/client.c  */

void do_list(const char *mask,uint16 attribute,void (*fn)(file_info *),BOOL rec, BOOL dirs);
struct cli_state *do_connect(char *server, char *share, int smb_port);

/*The following definitions come from  client/clitar.c  */

void cmd_block(void);
void cmd_tarmode(void);
void cmd_setmode(void);
void cmd_tar(void);
int process_tar(void);
int tar_parseargs(int argc, char *argv[], char *Optarg, int Optind);

/*The following definitions come from  groupdb/aliasdb.c  */

BOOL initialise_alias_db(void);
LOCAL_GRP *iterate_getaliasgid(gid_t gid, LOCAL_GRP_MEMBER **mem, int *num_mem);
LOCAL_GRP *iterate_getaliasrid(uint32 rid, LOCAL_GRP_MEMBER **mem, int *num_mem);
LOCAL_GRP *iterate_getaliasntnam(const char *name, LOCAL_GRP_MEMBER **mem, int *num_mem);
BOOL add_domain_alias(LOCAL_GRP **alss, int *num_alss, LOCAL_GRP *als);
BOOL iterate_getuseraliasntnam(const char *user_name, LOCAL_GRP **alss, int *num_alss);
BOOL enumdomaliases(LOCAL_GRP **alss, int *num_alss);
void *startaliasent(BOOL update);
void endaliasent(void *vp);
LOCAL_GRP *getaliasent(void *vp, LOCAL_GRP_MEMBER **mem, int *num_mem);
BOOL add_alias_entry(LOCAL_GRP *newgrp);
BOOL mod_alias_entry(LOCAL_GRP* als);
BOOL del_alias_entry(uint32 rid);
BOOL add_alias_member(uint32 rid, const DOM_SID *member_sid);
BOOL del_alias_member(uint32 rid, const DOM_SID *member_sid);
LOCAL_GRP *getaliasntnam(const char *name, LOCAL_GRP_MEMBER **mem, int *num_mem);
LOCAL_GRP *getaliasrid(uint32 alias_rid, LOCAL_GRP_MEMBER **mem, int *num_mem);
LOCAL_GRP *getaliasgid(gid_t gid, LOCAL_GRP_MEMBER **mem, int *num_mem);
BOOL getuseraliasntnam(const char *user_name, LOCAL_GRP **als, int *num_alss);
void aldb_init_als(LOCAL_GRP *als);
BOOL make_alias_line(char *p, int max_len,
				LOCAL_GRP *als,
				LOCAL_GRP_MEMBER **mem, int *num_mem);

/*The following definitions come from  groupdb/aliasfile.c  */

struct aliasdb_ops *file_initialise_alias_db(void);

/*The following definitions come from  groupdb/aliasldap.c  */

struct aliasdb_ops *ldap_initialise_alias_db(void);

/*The following definitions come from  groupdb/aliasnt5ldap.c  */


/*The following definitions come from  groupdb/aliasunix.c  */

BOOL get_unixalias_members(struct group *grp,
				int *num_mem, LOCAL_GRP_MEMBER **members);
struct aliasdb_ops *unix_initialise_alias_db(void);

/*The following definitions come from  groupdb/builtindb.c  */

BOOL initialise_builtin_db(void);
LOCAL_GRP *iterate_getbuiltingid(gid_t gid, LOCAL_GRP_MEMBER **mem, int *num_mem);
LOCAL_GRP *iterate_getbuiltinrid(uint32 rid, LOCAL_GRP_MEMBER **mem, int *num_mem);
LOCAL_GRP *iterate_getbuiltinntnam(const char *name, LOCAL_GRP_MEMBER **mem, int *num_mem);
BOOL add_domain_builtin(LOCAL_GRP **blts, int *num_blts, LOCAL_GRP *blt);
BOOL iterate_getuserbuiltinntnam(const char *user_name, LOCAL_GRP **blts, int *num_blts);
BOOL enumdombuiltins(LOCAL_GRP **blts, int *num_blts);
void *startbuiltinent(BOOL update);
void endbuiltinent(void *vp);
LOCAL_GRP *getbuiltinent(void *vp, LOCAL_GRP_MEMBER **mem, int *num_mem);
BOOL add_builtin_entry(LOCAL_GRP *newblt);
BOOL mod_builtin_entry(LOCAL_GRP* blt);
BOOL add_builtin_member(uint32 rid, const DOM_SID *member_sid);
BOOL del_builtin_member(uint32 rid, const DOM_SID *member_sid);
LOCAL_GRP *getbuiltinntnam(const char *name, LOCAL_GRP_MEMBER **mem, int *num_mem);
LOCAL_GRP *getbuiltinrid(uint32 builtin_rid, LOCAL_GRP_MEMBER **mem, int *num_mem);
LOCAL_GRP *getbuiltingid(gid_t gid, LOCAL_GRP_MEMBER **mem, int *num_mem);
BOOL getuserbuiltinntnam(const char *user_name, LOCAL_GRP **blt, int *num_blts);
void bidb_init_blt(LOCAL_GRP *blt);
BOOL make_builtin_line(char *p, int max_len,
				LOCAL_GRP *blt,
				LOCAL_GRP_MEMBER **mem, int *num_mem);

/*The following definitions come from  groupdb/builtinldap.c  */

struct aliasdb_ops *ldap_initialise_builtin_db(void);

/*The following definitions come from  groupdb/builtinnt5ldap.c  */


/*The following definitions come from  groupdb/builtinunix.c  */

BOOL get_unixbuiltin_members(struct group *grp,
				int *num_mem, LOCAL_GRP_MEMBER **members);
struct aliasdb_ops *unix_initialise_builtin_db(void);

/*The following definitions come from  groupdb/groupdb.c  */

BOOL initialise_group_db(void);
DOMAIN_GRP *iterate_getgroupgid(gid_t gid, DOMAIN_GRP_MEMBER **mem, int *num_mem);
DOMAIN_GRP *iterate_getgrouprid(uint32 rid, DOMAIN_GRP_MEMBER **mem, int *num_mem);
DOMAIN_GRP *iterate_getgroupntnam(const char *name, DOMAIN_GRP_MEMBER **mem, int *num_mem);
BOOL add_domain_group(DOMAIN_GRP **grps, int *num_grps, DOMAIN_GRP *grp);
BOOL iterate_getusergroupsnam(const char *user_name, DOMAIN_GRP **grps, int *num_grps);
BOOL enumdomgroups(DOMAIN_GRP **grps, int *num_grps);
void *startgroupent(BOOL update);
void endgroupent(void *vp);
DOMAIN_GRP *getgroupent(void *vp, DOMAIN_GRP_MEMBER **mem, int *num_mem);
BOOL add_group_entry(DOMAIN_GRP *newgrp);
BOOL del_group_entry(uint32 rid);
BOOL mod_group_entry(DOMAIN_GRP* grp);
BOOL add_group_member(uint32 rid, uint32 member_rid);
BOOL del_group_member(uint32 rid, uint32 member_rid);
DOMAIN_GRP *getgroupntnam(const char *name, DOMAIN_GRP_MEMBER **mem, int *num_mem);
DOMAIN_GRP *getgrouprid(uint32 group_rid, DOMAIN_GRP_MEMBER **mem, int *num_mem);
DOMAIN_GRP *getgroupgid(gid_t gid, DOMAIN_GRP_MEMBER **mem, int *num_mem);
BOOL getusergroupsntnam(const char *user_name, DOMAIN_GRP **grp, int *num_grps);
void gpdb_init_grp(DOMAIN_GRP *grp);
BOOL make_group_line(char *p, int max_len,
				DOMAIN_GRP *grp,
				DOMAIN_GRP_MEMBER **mem, int *num_mem);

/*The following definitions come from  groupdb/groupfile.c  */

struct groupdb_ops *file_initialise_group_db(void);

/*The following definitions come from  groupdb/groupldap.c  */

struct groupdb_ops *ldap_initialise_group_db(void);

/*The following definitions come from  groupdb/groupnt5ldap.c  */


/*The following definitions come from  groupdb/groupunix.c  */

BOOL get_unixgroup_members(struct group *grp,
				int *num_mem, DOMAIN_GRP_MEMBER **members);
struct groupdb_ops *unix_initialise_group_db(void);

/*The following definitions come from  lib/access.c  */

BOOL allow_access(char *deny_list,char *allow_list,
		  char *cname,char *caddr);
BOOL check_access(int sock, char *allow_list, char *deny_list);

/*The following definitions come from  lib/bitmap.c  */

struct bitmap *bitmap_allocate(int n);
BOOL bitmap_set(struct bitmap *bm, unsigned i);
BOOL bitmap_clear(struct bitmap *bm, unsigned i);
BOOL bitmap_query(struct bitmap *bm, unsigned i);
int bitmap_find(struct bitmap *bm, unsigned ofs);

/*The following definitions come from  lib/charcnv.c  */

char *unix2dos_format(char *str,BOOL overwrite);
char *dos2unix_format(char *str, BOOL overwrite);
void interpret_character_set(char *str, int codepage);

/*The following definitions come from  lib/charset.c  */

void charset_initialise(void);
void codepage_initialise(int client_codepage);
void add_char_string(char *s);

/*The following definitions come from  lib/cmd_interp.c  */

void free_cmd_set_array(uint32 num_entries, struct command_set **entries);
struct command_set *add_cmd_set_to_array(uint32 *len,
					 struct command_set ***array,
					 const struct command_set *cmd);
void add_command_set(const struct command_set *cmds);
void cmd_set_no_autoconnect(void);
int command_main(int argc, char *argv[]);

/*The following definitions come from  lib/debug.c  */

BOOL dbg_interactive(void);
void sig_usr2( int sig );
void sig_usr1( int sig );
void setup_logging( char *pname, BOOL interactive );
void reopen_logs( void );
void force_check_log_size( void );
BOOL need_to_check_log_size( void );
void check_log_size( void );
void dbgflush( void );
BOOL dbghdr( int level, char *file, char *func, int line );
dbg_Token dbg_char2token( dbg_Token *state, int c );

/*The following definitions come from  lib/domain_namemap.c  */

BOOL map_unix_group_name(char *group_name, DOM_NAME_MAP * grp_info);
BOOL map_unix_alias_name(char *alias_name, DOM_NAME_MAP * grp_info);
BOOL map_nt_alias_name(char *ntalias_name, char *nt_domain,
		       DOM_NAME_MAP * grp_info);
BOOL map_nt_group_name(char *ntgroup_name, char *nt_domain,
		       DOM_NAME_MAP * grp_info);
BOOL lookupsmbpwnam(const char *unix_usr_name, DOM_NAME_MAP * grp);
BOOL lookupsmbpwuid(uid_t uid, DOM_NAME_MAP * gmep);
BOOL lookupsmbpwntnam(const char *fullntname, DOM_NAME_MAP * gmep);
BOOL lookupsmbpwsid(DOM_SID *sid, DOM_NAME_MAP * gmep);
BOOL lookupsmbgrpnam(const char *unix_grp_name, DOM_NAME_MAP * grp);
BOOL lookupsmbgrpsid(DOM_SID *sid, DOM_NAME_MAP * gmep);
BOOL lookupsmbgrpgid(gid_t gid, DOM_NAME_MAP * gmep);
const struct passwd *map_nt_and_unix_username(const char *domain,
					      const char *ntuser,
					      char *unix_user, char *nt_user);

/*The following definitions come from  lib/doscalls.c  */

int dos_unlink(char *fname);
int dos_open(char *fname,int flags,mode_t mode);
DIR *dos_opendir(char *dname);
char *dos_readdirname(DIR *p);
int dos_chown(char *fname, uid_t uid, gid_t gid);
int dos_stat(char *fname,SMB_STRUCT_STAT *sbuf);
int dos_lstat(char *fname,SMB_STRUCT_STAT *sbuf);
int dos_mkdir(char *dname,mode_t mode);
int dos_rmdir(char *dname);
int dos_chdir(char *dname);
int dos_utime(char *fname,struct utimbuf *times);
int copy_reg(char *source, const char *dest);
int dos_rename(char *from, char *to);
int dos_chmod(char *fname,mode_t mode);
char *dos_getwd(char *unix_path);
BOOL dos_file_exist(char *fname,SMB_STRUCT_STAT *sbuf);
BOOL dos_directory_exist(char *dname,SMB_STRUCT_STAT *st);
time_t dos_file_modtime(char *fname);
SMB_OFF_T dos_file_size(char *file_name);
int dos_ChDir(char *path);
char *dos_GetWd(char *path);

/*The following definitions come from  lib/fault.c  */

void fault_setup(void (*fn)(void *));

/*The following definitions come from  lib/fsusage.c  */

int sys_fsusage(const char *path, SMB_BIG_UINT *dfree, SMB_BIG_UINT *dsize);

/*The following definitions come from  lib/genrand.c  */

void generate_random_buffer( unsigned char *out, int len, BOOL re_seed);

/*The following definitions come from  lib/getopt.c  */

int getopt(int argc, char *const *argv, const char *optstring);
int getopt_long(int argc, char *const *argv, const char *options,
		const struct option *long_options, int *opt_index);
void getopt_dummy(void);

/*The following definitions come from  lib/getsmbpass.c  */

char *getsmbpass(char *prompt)    ;

/*The following definitions come from  lib/hash.c  */

BOOL hash_table_init(hash_table *table, int num_buckets, compare_function compare_func);
int string_hash(int hash_size, const char *key);
hash_element *hash_lookup(hash_table *table, char *key);
hash_element *hash_insert(hash_table *table, char *value, char *key);
void hash_remove(hash_table *table, hash_element *hash_elem);
BOOL hash_clear(hash_table *table);

/*The following definitions come from  lib/interface.c  */

void load_interfaces(void);
BOOL interfaces_changed(void);
BOOL ismyip(struct in_addr ip);
BOOL is_local_net(struct in_addr from);
int iface_count(void);
BOOL we_are_multihomed(void);
struct interface *get_interface(int n);
struct in_addr *iface_n_ip(int n);
struct in_addr *iface_n_bcast(int n);
unsigned iface_hash(void);
struct in_addr *iface_bcast(struct in_addr ip);
struct in_addr *iface_ip(struct in_addr ip);

/*The following definitions come from  lib/interfaces.c  */

int get_interfaces(struct iface_struct *ifaces, int max_interfaces);

/*The following definitions come from  lib/kanji.c  */

void interpret_coding_system(char *str);
void initialize_multibyte_vectors( int client_codepage);

/*The following definitions come from  lib/md4.c  */

void mdfour(unsigned char *out, const unsigned char *in, int n);

/*The following definitions come from  lib/ms_fnmatch.c  */

int ms_fnmatch(char *pattern, char *string);

/*The following definitions come from  lib/passcheck.c  */

BOOL smb_password_ok(uint16 acct_ctrl,
				uchar smb_passwd[16],
				uchar smb_nt_passwd[16],
				const uchar challenge[8],
				const char *user, const char *domain,
				const uchar *lm_pass, size_t lm_pwd_len,
				const uchar *nt_pass, size_t nt_pwd_len,
				uchar user_sess_key[16]);

/*The following definitions come from  lib/pidfile.c  */

pid_t pidfile_pid(char *name);
void pidfile_create(char *name);

/*The following definitions come from  lib/replace.c  */

char *rep_inet_ntoa(struct in_addr ip);

/*The following definitions come from  lib/select.c  */

int sys_select(int maxfd, fd_set *fds,struct timeval *tval);
int sys_select(int maxfd, fd_set *fds,struct timeval *tval);

/*The following definitions come from  lib/set_uid.c  */

const vuser_key *get_sec_ctx(void);
void init_uid(void);
BOOL become_uid(uid_t uid);
BOOL become_gid(gid_t gid);
BOOL unbecome_to_initial_uid(void);
BOOL become_id(uid_t uid, gid_t gid);
BOOL become_unix_sec_ctx(const vuser_key * k, connection_struct * conn,
			 uid_t new_uid, gid_t new_gid,
			 int n_groups, gid_t * groups);
BOOL become_guest(void);
void become_root(BOOL save_dir);
void unbecome_root(BOOL restore_dir);

/*The following definitions come from  lib/set_vuid.c  */

void init_vuid(void);
BOOL become_vuser(const vuser_key *k);
BOOL unbecome_vuser(void);

/*The following definitions come from  lib/sids.c  */

struct sid_map* add_sidmap_to_array(uint32 *len, struct sid_map ***array,
				const struct sid_map *name);
void generate_wellknown_sids(void);
BOOL create_sidmap_table(void);
BOOL pwdb_initialise(BOOL is_server);
const DOM_SID *map_wk_name_to_sid(const char *name, DOM_SID *sid, uint32 *type);
const char *map_wk_sid_to_name(const DOM_SID *sid, char *nt_domain, uint32 *type);
BOOL map_domain_sid_to_name(DOM_SID *sid, char *nt_domain);
BOOL map_domain_sid_to_any_dc(DOM_SID *sid, char *dc_name);
BOOL split_domain_name(const char *fullname, char *domain, char *name);
BOOL enumtrustdoms(char ***doms, uint32 *num_entries);

/*The following definitions come from  lib/signal.c  */

void BlockSignals(BOOL block,int signum);
void CatchSignal(int signum,void (*handler)(int ));
void CatchChild(void);
void CatchChildLeaveStatus(void);

/*The following definitions come from  lib/slprintf.c  */

int vslprintf(char *str, int n, char *format, va_list ap);

/*The following definitions come from  lib/smbrun.c  */

int smbrun(char *cmd,char *outfile,BOOL shared);

/*The following definitions come from  lib/snprintf.c  */


/*The following definitions come from  lib/stub_uid.c  */

void become_root(BOOL save_dir);
void unbecome_root(BOOL restore_dir);
const vuser_key *get_sec_ctx(void);

/*The following definitions come from  lib/substitute.c  */

void standard_sub_basic(char *str);
void standard_sub_conn(connection_struct *conn, char *str);
void standard_sub_snum(int snum, char *str);
void standard_sub_vuser(char *str, user_struct *vuser);
void standard_sub_vsnum(char *str, user_struct *vuser, int snum);

/*The following definitions come from  lib/surs.c  */

BOOL surs_sam_sid_to_unixid(const SURS_SID_ID *sid, SURS_POSIX_ID *id, BOOL create);
BOOL surs_unixid_to_sam_sid(const SURS_POSIX_ID *id, SURS_SID_ID *sid, BOOL create);

/*The following definitions come from  lib/sursalgdomonly.c  */

BOOL surs_algdomonly_sam_sid_to_unixid(const DOM_SID *sid, SURS_POSIX_ID *id,
				BOOL create);
BOOL surs_algdomonly_unixid_to_sam_sid(const SURS_POSIX_ID *id, DOM_SID *sid,
				BOOL create);

/*The following definitions come from  lib/sursalgnt5ldap.c  */

BOOL surs_nt5ldap_sam_sid_to_unixid(LDAPDB *hds, DOM_SID * sid, uint32 type,
				    uint32 * id, BOOL create);
BOOL surs_nt5ldap_unixid_to_sam_sid(LDAPDB *hds, uint32 id, uint32 type,
				    DOM_SID * sid, BOOL create);

/*The following definitions come from  lib/surstdb.c  */

BOOL surs_tdb_sam_sid_to_unixid(DOM_SID * sid, uint32 type, uint32 * id,
				BOOL create);
BOOL surs_tdb_unixid_to_sam_sid(uint32 id, uint32 type, DOM_SID * sid,
				BOOL create);

/*The following definitions come from  lib/system.c  */

int sys_usleep(long usecs);
int sys_stat(const char *fname,SMB_STRUCT_STAT *sbuf);
int sys_fstat(int fd,SMB_STRUCT_STAT *sbuf);
int sys_lstat(const char *fname,SMB_STRUCT_STAT *sbuf);
int sys_ftruncate(int fd, SMB_OFF_T offset);
SMB_OFF_T sys_lseek(int fd, SMB_OFF_T offset, int whence);
int sys_fseek(FILE *fp, SMB_OFF_T offset, int whence);
SMB_OFF_T sys_ftell(FILE *fp);
int sys_creat(const char *path, mode_t mode);
int sys_open(const char *path, int oflag, mode_t mode);
FILE *sys_fopen(const char *path, const char *type);
SMB_STRUCT_DIRENT *sys_readdir(DIR *dirp);
int sys_waitpid(pid_t pid,int *status,int options);
char *sys_getwd(char *s);
int sys_chown(const char *fname,uid_t uid,gid_t gid);
int sys_chroot(const char *dname);
struct hostent *sys_gethostbyname(const char *name);
void oplock_set_capability(BOOL this_process, BOOL inherit);
long sys_random(void);
void sys_srandom(unsigned int seed);
int groups_max(void);
int sys_getgroups(int setlen, gid_t *gidset);
int sys_setgroups(int setlen, gid_t *gidset);
struct passwd *sys_getpwnam(const char *name);
struct passwd *sys_getpwuid(uid_t uid);
int wsys_stat(const smb_ucs2_t *wfname,SMB_STRUCT_STAT *sbuf);
int wsys_lstat(const smb_ucs2_t *wfname,SMB_STRUCT_STAT *sbuf);
int wsys_creat(const smb_ucs2_t *wfname, mode_t mode);
int wsys_open(const smb_ucs2_t *wfname, int oflag, mode_t mode);
FILE *wsys_fopen(const smb_ucs2_t *wfname, const char *type);
DIR *wsys_opendir(const smb_ucs2_t *wfname);
smb_ucs2_t *wsys_getwd(smb_ucs2_t *s);
int wsys_chown(const smb_ucs2_t *wfname, uid_t uid, gid_t gid);
int wsys_chroot(const smb_ucs2_t *wfname);
pid_t sys_fork(void);
pid_t sys_getpid(void);
int sys_popen(const char *command);
int sys_pclose(int fd);

/*The following definitions come from  lib/talloc.c  */

TALLOC_CTX *talloc_init(void);
void *talloc(TALLOC_CTX *t, size_t size);
void talloc_destroy_pool(TALLOC_CTX *t);
void talloc_destroy(TALLOC_CTX *t);

/*The following definitions come from  lib/time.c  */

void GetTimeOfDay(struct timeval *tval);
void TimeInit(void);
int TimeDiff(time_t t);
struct tm *LocalTime(time_t *t);
time_t nt_time_to_unix(const NTTIME *nt);
time_t interpret_long_date(char *p);
void unix_to_nt_time(NTTIME *nt, time_t t);
void init_nt_time(NTTIME *nt);
void put_long_date(char *p,time_t t);
BOOL null_mtime(time_t mtime);
void put_dos_date(char *buf,int offset,time_t unixdate);
void put_dos_date2(char *buf,int offset,time_t unixdate);
void put_dos_date3(char *buf,int offset,time_t unixdate);
time_t make_unix_date(void *date_ptr);
time_t make_unix_date2(void *date_ptr);
time_t make_unix_date3(void *date_ptr);
char *http_timestring(time_t t);
char *timestring(BOOL hires);
time_t get_create_time(SMB_STRUCT_STAT *st,BOOL fake_dirs);

/*The following definitions come from  lib/ufc.c  */

char *ufc_crypt(char *key,char *salt);

/*The following definitions come from  lib/username.c  */

char *uidtoname(uid_t uid);
int get_unixgroups(const char *user, uid_t uid, gid_t gid, int *p_ngroups,
		   gid_t ** p_groups);
BOOL get_unix_grps(int *p_ngroups, struct group **p_groups);
void free_unix_grps(int ngroups, struct group *p_groups);
char *gidtoname(gid_t gid);
BOOL nametouid(const char *name, uid_t * uid);
BOOL nametogid(const char *name, gid_t * gid);
char *get_user_home_dir(char *user);
BOOL map_username(char *user);
const struct passwd *Get_Pwnam(char *user,BOOL allow_change);
BOOL user_ok(char *user,int snum);
BOOL user_in_list(char *user,char *list);
struct passwd *smb_getpwnam(char *user, char *domain, BOOL allow_change);
int smb_initgroups(char *user, char *domain, gid_t group);

/*The following definitions come from  lib/util.c  */

BOOL init_myworkgroup(void);
char *tmpdir(void);
BOOL in_group(gid_t group, gid_t current_gid, int ngroups, gid_t * groups);
uint32 get_number(const char *tmp);
char *Atoic(char *p, int *n, char *c);
uint32 *add_num_to_list(uint32 **num, int *count, int val);
char *get_numlist(char *p, uint32 **num, int *count);
BOOL file_exist(char *fname, SMB_STRUCT_STAT * sbuf);
int file_rename(char *from, char *to);
time_t file_modtime(char *fname);
BOOL directory_exist(char *dname, SMB_STRUCT_STAT * st);
char *attrib_string(uint16 mode);
void show_msg(char *buf);
void smb_setlen(char *buf, int len);
int set_message(char *buf, int num_words, int num_bytes, BOOL zero);
void dos_clean_name(char *s);
void unix_clean_name(char *s);
BOOL reduce_name(char *s, char *dir, BOOL widelinks);
void make_dir_struct(char *buf, char *mask, char *fname, SMB_OFF_T size,
		     int mode, time_t date);
void close_low_fds(void);
int set_blocking(int fd, BOOL set);
SMB_OFF_T transfer_file(int infd, int outfd, SMB_OFF_T n, char *header,
			int headlen, int align);
void msleep(int t);
void become_daemon(void);
BOOL yesno(char *p);
int set_filelen(int fd, SMB_OFF_T len);
void *Realloc(void *p, size_t size);
BOOL memcpy_zero(void *to, const void *from, size_t size);
void safe_free(void *p);
BOOL get_myname(char *my_name);
int interpret_protocol(char *str, int def);
uint32 interpret_addr(char *str);
struct in_addr *interpret_addr2(char *str);
BOOL zero_ip(struct in_addr ip);
BOOL same_net(struct in_addr ip1, struct in_addr ip2, struct in_addr mask);
BOOL process_exists(pid_t pid);
void smb_panic(char *why);
char *readdirname(DIR * p);
BOOL is_in_path(char *name, name_compare_entry * namelist);
void set_namearray(name_compare_entry ** ppname_array, char *namelist);
void free_namearray(name_compare_entry * name_array);
BOOL fcntl_lock(int fd, int op, SMB_OFF_T offset, SMB_OFF_T count, int type);
BOOL is_myname(char *s);
void set_remote_arch(enum remote_arch_types type);
enum remote_arch_types get_remote_arch(void);
void out_ascii(FILE * f, const uchar * buf, int len);
void out_struct(FILE * f, const char *buf1, int len, int per_line);
void out_data(FILE * f, const char *buf1, int len,
	      int per_line, const char *indstr);
void print_asc(int level, uchar const *buf, int len);
void dump_data(int level, const char *buf1, int len);
void dump_data_pw(const char *msg, const uchar * data, size_t len);
char *tab_depth(int depth);
int str_checksum(const char *s);
void zero_free(void *p, size_t size);
int set_maxfiles(int requested_max);
void reg_get_subkey(char *full_keyname, char *key_name, char *subkey_name);
BOOL reg_split_key(const char *full_keyname, uint32 *reg_type, char *key_name);
uint16 pwdb_acct_ctrl_from_ad(NTDS_USER_FLAG_ENUM adac);
char *pwdb_encode_acct_ctrl(uint16 acct_ctrl, size_t length);
uint16 pwdb_decode_acct_ctrl(const char *p);
time_t pwdb_get_time_last_changed(const char *p);
time_t pwdb_get_last_set_time(const char *p);
void pwdb_set_logon_time(char *p, int max_len, time_t t);
void pwdb_set_logoff_time(char *p, int max_len, time_t t);
void pwdb_set_kickoff_time(char *p, int max_len, time_t t);
void pwdb_set_can_change_time(char *p, int max_len, time_t t);
void pwdb_set_time_last_changed(char *p, int max_len, time_t t);
void pwdb_set_must_change_time(char *p, int max_len, time_t t);
void pwdb_set_last_set_time(char *p, int max_len, time_t t);
void pwdb_sethexpwd(char *p, const uchar * pwd, uint16 acct_ctrl);
BOOL pwdb_gethexpwd(const char *p, char *pwd, uint32 *acct_ctrl);
char *smbd_mktemp(char *template);
void *memdup(const void *p, size_t size);
char *myhostname(void);
char *passdb_path(char *name);
char *lock_path(char *name);
char *parent_dirname(const char *path);
const char *get_sid_name_use_str(uint32 sid_name_use);
BOOL ms_has_wild(char *s);
BOOL mask_match(char *string, char *pattern, BOOL is_case_sensitive);
int _Insure_trap_error(int a1, int a2, int a3, int a4, int a5, int a6);
BOOL is_ipaddress(const char *str);

/*The following definitions come from  lib/util_array.c  */

void free_void_array(uint32 num_entries, void **entries,
		void(free_item)(void*));
void* add_copy_to_array(uint32 *len, void ***array, const void *item,
	void*(item_dup)(const void*), BOOL alloc_anyway);
void* add_item_to_array(uint32 *len, void ***array, void *item);
void free_use_info_array(uint32 num_entries, struct use_info **entries);
struct use_info* add_use_info_to_array(uint32 *len, struct use_info ***array,
				const struct use_info *name);
void free_char_array(uint32 num_entries, char **entries);
char* add_chars_to_array(uint32 *len, char ***array, const char *name);
void free_uint32_array(uint32 num_entries, uint32 **entries);
uint32* add_uint32s_to_array(uint32 *len, uint32 **array, const uint32 *name);
void free_unistr_array(uint32 num_entries, UNISTR2 **entries);
UNISTR2* add_unistr_to_array(uint32 *len, UNISTR2 ***array, UNISTR2 *name);
void free_sid_array(uint32 num_entries, DOM_SID **entries);
DOM_SID* add_sid_to_array(uint32 *len, DOM_SID ***array, const DOM_SID *sid);

/*The following definitions come from  lib/util_file.c  */

BOOL do_file_lock(int fd, int waitsecs, int type);
BOOL file_lock(int fd, int type, int secs, int *plock_depth);
BOOL file_unlock(int fd, int *plock_depth);
BOOL file_modified_date(const char *filename, time_t *lastmodified);
BOOL file_modified(const char *filename, time_t *lastmodified);
void *open_file_if_modified(const char *filename, char *mode, time_t *lastmodified);
SMB_OFF_T get_file_size(char *file_name);
void *startfilepw_race_condition_avoid(const char *pfile, enum pwf_access_type type, int *lock_depth);
void endfilepw_race_condition_avoid(void *vp, int *lock_depth);
void *startfileent(char *pfile, char *s_readbuf, int bufsize,
				int *file_lock_depth, BOOL update);
void endfileent(void *vp, int *file_lock_depth);
SMB_BIG_UINT getfilepwpos(void *vp);
BOOL setfilepwpos(void *vp, SMB_BIG_UINT tok);
int getfileline(void *vp, char *linebuf, int linebuf_size);
char *fgets_slash(char *s2,int maxlen,FILE *f);
char *file_pload(char *syscmd, size_t *size);
char *file_load(char *fname, size_t *size);
char **file_lines_load(char *fname, int *numlines);
char **file_lines_pload(char *syscmd, int *numlines);
void file_lines_free(char **lines);
void file_lines_slashcont(char **lines);

/*The following definitions come from  lib/util_list.c  */

GENERIC_LIST *generic_list_new(void);
void generic_list_destroy(GENERIC_LIST *l);
BOOL generic_list_append(GENERIC_LIST *l, void *item, uint8 type);
BOOL generic_list_prepend(GENERIC_LIST *l, void *item, uint8 type);
void *generic_list_first(GENERIC_LIST *l, uint8 *type);
void *generic_list_locate (GENERIC_LIST *l, void *search,
				  BOOL(*cmp)(const void*,const void*));
void *generic_list_remove(GENERIC_LIST *l, void *search,
			  BOOL(*cmp)(const void*,const void*));

/*The following definitions come from  lib/util_pwdb.c  */

uint32 lookup_wk_group_name(const char *group_name, const char *domain,
				DOM_SID *sid, uint32 *type);
uint32 lookup_wk_user_name(const char *user_name, const char *domain,
				DOM_SID *sid, uint32 *type);
uint32 lookup_builtin_alias_name(const char *alias_name, const char *domain,
				DOM_SID *sid, uint32 *type);
char *lookup_wk_alias_rid(uint32 rid);
char *lookup_wk_user_rid(uint32 rid);
char *lookup_wk_group_rid(uint32 rid);

/*The following definitions come from  lib/util_seaccess.c  */

BOOL se_access_check(const SEC_DESC * sd, const NET_USER_INFO_3 * user,
		     uint32 acc_req, uint32 prev_grant_acc,
		     uint32 * acc_grant,
		     uint32 * status);

/*The following definitions come from  lib/util_sec.c  */

void gain_root_privilege(void);
void gain_root_group_privilege(void);
void set_effective_uid(uid_t uid);
void set_effective_gid(gid_t gid);
void save_re_uid(void);
void restore_re_uid(void);
int set_re_uid(void);
void become_user_permanently(uid_t uid, gid_t gid);

/*The following definitions come from  lib/util_sid.c  */

char *sid_to_string(fstring sidstr_out, const DOM_SID *sid);
BOOL string_to_sid(DOM_SID *sidout, const char *sidstr);
BOOL sid_append_rid(DOM_SID *sid, uint32 rid);
BOOL sid_split_rid(DOM_SID *sid, uint32 *rid);
void sid_copy(DOM_SID *dst, const DOM_SID *src);
DOM_SID *sid_dup(const DOM_SID *src);
BOOL sid_front_equal(const DOM_SID *sid1, const DOM_SID *sid2);
BOOL sid_equal(const DOM_SID *sid1, const DOM_SID *sid2);
BOOL read_sid(char *domain_name, DOM_SID *sid);
BOOL write_sid(char *domain_name, DOM_SID *sid);
BOOL create_new_sid(DOM_SID *sid);
int sid_size(const DOM_SID *sid);

/*The following definitions come from  lib/util_sock.c  */

BOOL is_a_socket(int fd);
void set_socket_options(int fd, char *options);
int read_data_outstanding(int fd, unsigned int time_out);
ssize_t read_udp_socket(int fd, char *buf, size_t len);
ssize_t read_socket_with_timeout(int fd, char *buf, size_t mincnt,
				 size_t maxcnt, unsigned int time_out);
ssize_t read_with_timeout(int fd, char *buf, size_t mincnt, size_t maxcnt,
			  unsigned int time_out);
BOOL send_keepalive(int client);
ssize_t read_data(int fd, char *buffer, size_t N);
ssize_t write_data(int fd, char *buffer, size_t N);
ssize_t write_socket_data(int fd, char *buffer, size_t N);
ssize_t write_socket(int fd, char *buf, size_t len);
ssize_t read_smb_length(int fd, char *inbuf, unsigned int timeout);
BOOL receive_smb(int fd, char *buffer, unsigned int timeout);
BOOL client_receive_smb(int fd, char *buffer, unsigned int timeout);
BOOL send_null_session_msg(int fd);
BOOL send_smb(int fd, char *buffer);
BOOL send_one_packet(char *buf, int len, struct in_addr ip, int port,
		     int type);
int open_socket_in(int type, int port, int dlevel,uint32 socket_addr, BOOL rebind);
int open_socket_out(int type, struct in_addr *addr, int port, int timeout);
void reset_globals_after_fork(void);
void client_setfd(int fd);
char *client_name(void);
char *client_addr(void);
char *get_socket_name(int fd);
char *get_socket_addr(int fd);
int open_pipe_sock(char *path);
int create_pipe_socket(char *dir, int dir_perms, char *path, int path_perms);

/*The following definitions come from  lib/util_status.c  */

BOOL get_connection_status(struct connect_record **crec,
				uint32 *connection_count);
BOOL get_session_count(struct connect_record **srec,uint32 *session_count);
void status_traverse_share_mode(share_mode_entry *e, char *fname);
BOOL get_locks_count(int pid, uint32 *locks_count);

/*The following definitions come from  lib/util_str.c  */

void set_first_token(char *ptr);
BOOL next_token(char **ptr,char *buff,char *sep, size_t bufsize);
char **toktocliplist(int *ctok, char *sep);
int StrCaseCmp(const char *s, const char *t);
int StrnCaseCmp(const char *s, const char *t, size_t n);
BOOL strequal(const char *s1, const char *s2);
BOOL strnequal(const char *s1,const char *s2,size_t n);
BOOL strcsequal(const char *s1,const char *s2);
void strlower(char *s);
void strupper(char *s);
void strnorm(char *s);
BOOL strisnormal(char *s);
void string_replace(char *s,char oldc,char newc);
char *skip_string(char *buf,size_t n);
size_t str_charnum(const char *s);
BOOL trim_string(char *s,const char *front,const char *back);
BOOL strhasupper(const char *s);
BOOL strhaslower(const char *s);
size_t count_chars(const char *s,char c);
BOOL str_is_all(const char *s,char c);
char *safe_strcpy(char *dest,const char *src, size_t maxlength);
char *safe_strcat(char *dest, const char *src, size_t maxlength);
char *alpha_strcpy(char *dest, const char *src, size_t maxlength);
char *StrnCpy(char *dest,const char *src,size_t n);
char *strncpyn(char *dest, const char *src,size_t n, char c);
size_t strhex_to_str(char *p, size_t len, const char *strhex);
BOOL in_list(char *s,char *list,BOOL casesensitive);
void string_free(char **s);
BOOL string_set(char **dest,const char *src);
void string_sub(char *s,const char *pattern,const char *insert, size_t len);
void fstring_sub(char *s,const char *pattern,const char *insert);
void pstring_sub(char *s,const char *pattern,const char *insert);
void all_string_sub(char *s,const char *pattern,const char *insert, size_t len);
void split_at_first_component(char *path, char *front, char sep, char *back);
void split_at_last_component(char *path, char *front, char sep, char *back);
char *bit_field_to_str(uint32 type, struct field_info *bs);
char *enum_field_to_str(uint32 type, struct field_info *bs, BOOL first_default);
uint32 str_to_enum_field(char *in, struct field_info *bs, uint32 def);
char *octal_string(int i);
char *string_truncate(char *s, int length);

/*The following definitions come from  lib/util_unistr.c  */

char *ascii_to_unibuf(char *dest, const char *src, int maxlen);
const char* unibuf_to_ascii(char *dest, const char *src, int maxlen);
void ascii_to_unistr(uint16 *dest, const char *src, int maxlen);
void unistr_to_ascii(char *dest, const uint16 *src, int len);
char *unistr2_to_ascii(char *dest, const UNISTR2 *str, size_t maxlen);
char *skip_unicode_string(char *buf,int n);
char *skip_unibuf(char *srcbuf, int len);
int unistrcpy(char *dst, char *src);
char *uni_strncpy(char *destbuf, const char *srcbuf, int len);
uint32 buffer2_to_uint32(const BUFFER2 *str);
void buffer2_to_multistr(char *dest, const BUFFER2 *str, size_t maxlen);
void buffer4_to_str(char *dest, const BUFFER4 *str, size_t maxlen);
UNISTR2 *unistr2_new(const char *init);
UNISTR2 *unistr2_assign(UNISTR2 *str, const uint16 *src, size_t len);
UNISTR2 *unistr2_assign_ascii(UNISTR2 *str, const char *buf, int len);
UNISTR2 *unistr2_assign_ascii_str(UNISTR2 *str, const char *buf);
void init_unistr2_from_unistr(UNISTR2 *to, const UNISTR *from);
UNISTR2 *unistr2_grow(UNISTR2 *str, size_t new_size);
BOOL unistr2upper(UNISTR2 *str, const UNISTR2 *from);
BOOL copy_unistr2(UNISTR2 *str, const UNISTR2 *from);
UNISTR2 *unistr2_dup(const UNISTR2 *name);
void unistr2_free(UNISTR2 *name);
int StrCaseCmpW(const UNISTR2 *ws, const UNISTR2 *wt);
BOOL unistr2equal(const UNISTR2 *s1, const UNISTR2 *s2);

/*The following definitions come from  lib/util_unixsd.c  */

size_t convertperms_unix_to_sd(const SMB_STRUCT_STAT * sbuf,
			       BOOL is_directory, mode_t mode,
			       SEC_DESC ** ppdesc);
BOOL convertperms_sd_to_unix(SMB_STRUCT_STAT * psbuf, uid_t * puser,
			     gid_t * pgrp, mode_t * pmode,
			     uint32 security_info_sent, SEC_DESC * psd,
			     BOOL is_directory);

/*The following definitions come from  lib/util_wunistr.c  */

int dos_PutUniCode(char *dst,const char *src, ssize_t len, BOOL null_terminate);
char *dos_unistrn2(uint16 *src, int len);
char *dos_unistr2(uint16 *src);
char *dos_unistr2_to_str(UNISTR2 *str);
char *dos_buffer2_to_str(BUFFER2 *str);
char *dos_buffer2_to_multistr(BUFFER2 *str);
size_t dos_struni2(char *dst, const char *src, size_t max_len);
char *dos_unistr(char *buf);
void default_unicode_map(smb_ucs2_t **pp_cp_to_ucs2, uint16 **pp_ucs2_to_cp);
BOOL load_unicode_map(const char *codepage, smb_ucs2_t **pp_cp_to_ucs2, uint16 **pp_ucs2_to_cp);
BOOL load_dos_unicode_map(int codepage);
BOOL load_unix_unicode_map(const char *unix_char_set);
smb_ucs2_t *multibyte_to_unicode(smb_ucs2_t *dst, const char *src,
                                 size_t dst_len, smb_ucs2_t *cp_to_ucs2);
char *unicode_to_unix(char *dst, const smb_ucs2_t *src, size_t dst_len);
smb_ucs2_t *unix_to_unicode(smb_ucs2_t *dst, const char *src, size_t dst_len);
char *unicode_to_dos(char *dst, const smb_ucs2_t *src, size_t dst_len);
smb_ucs2_t *dos_to_unicode(smb_ucs2_t *dst, const char *src, size_t dst_len);
size_t strlen_w(const smb_ucs2_t *src);
smb_ucs2_t *safe_strcpy_w(smb_ucs2_t *dest,const smb_ucs2_t *src, size_t maxlength);
smb_ucs2_t *safe_strcat_w(smb_ucs2_t *dest, const smb_ucs2_t *src, size_t maxlength);
int strcmp_w(const smb_ucs2_t *s1, const smb_ucs2_t *s2);
int strncmp_w(const smb_ucs2_t *s1, const smb_ucs2_t *s2, size_t len);
smb_ucs2_t *strstr_w(const smb_ucs2_t *s1, const smb_ucs2_t *s2);
smb_ucs2_t *strchr_w(const smb_ucs2_t *s, smb_ucs2_t c);
smb_ucs2_t *strrchr_w(const smb_ucs2_t *s, smb_ucs2_t c);
smb_ucs2_t *strtok_w(smb_ucs2_t *s1, const smb_ucs2_t *s2);
smb_ucs2_t *strdup_w(const smb_ucs2_t *s);
int isupper_w( smb_ucs2_t val);
int islower_w( smb_ucs2_t val);
int isdigit_w( smb_ucs2_t val);
int isxdigit_w( smb_ucs2_t val);
int isspace_w( smb_ucs2_t val);
smb_ucs2_t toupper_w( smb_ucs2_t val );
smb_ucs2_t tolower_w( smb_ucs2_t val );
void set_first_token_w(smb_ucs2_t *ptr);
BOOL next_token_w(smb_ucs2_t **ptr, smb_ucs2_t *buff, smb_ucs2_t *sep, size_t bufsize);
smb_ucs2_t **toktocliplist_w(int *ctok, smb_ucs2_t *sep);
int StrCaseCmp_w(const smb_ucs2_t *s, const smb_ucs2_t *t);
int StrnCaseCmp_w(const smb_ucs2_t *s, const smb_ucs2_t *t, size_t n);
BOOL strequal_w(const smb_ucs2_t *s1, const smb_ucs2_t *s2);
BOOL strnequal_w(const smb_ucs2_t *s1,const smb_ucs2_t *s2,size_t n);
BOOL strcsequal_w(const smb_ucs2_t *s1,const smb_ucs2_t *s2);
void strlower_w(smb_ucs2_t *s);
void strupper_w(smb_ucs2_t *s);
void strnorm_w(smb_ucs2_t *s);
BOOL strisnormal_w(smb_ucs2_t *s);
void string_replace_w(smb_ucs2_t *s, smb_ucs2_t oldc, smb_ucs2_t newc);
smb_ucs2_t *skip_string_w(smb_ucs2_t *buf,size_t n);
size_t str_charnum_w(const smb_ucs2_t *s);
BOOL trim_string_w(smb_ucs2_t *s,const smb_ucs2_t *front,const smb_ucs2_t *back);
BOOL strhasupper_w(const smb_ucs2_t *s);
BOOL strhaslower_w(const smb_ucs2_t *s);
size_t count_chars_w(const smb_ucs2_t *s,smb_ucs2_t c);
BOOL str_is_all_w(const smb_ucs2_t *s,smb_ucs2_t c);
smb_ucs2_t *alpha_strcpy_w(smb_ucs2_t *dest, const smb_ucs2_t *src, size_t maxlength);
smb_ucs2_t *StrnCpy_w(smb_ucs2_t *dest,const smb_ucs2_t *src,size_t n);
smb_ucs2_t *strncpyn_w(smb_ucs2_t *dest, const smb_ucs2_t *src,size_t n, smb_ucs2_t c);
size_t strhex_to_str_w(char *p, size_t len, const smb_ucs2_t *strhex);
BOOL in_list_w(smb_ucs2_t *s,smb_ucs2_t *list,BOOL casesensitive);
BOOL string_init_w(smb_ucs2_t **dest,const smb_ucs2_t *src);
void string_free_w(smb_ucs2_t **s);
BOOL string_set_w(smb_ucs2_t **dest,const smb_ucs2_t *src);
void string_sub_w(smb_ucs2_t *s,const smb_ucs2_t *pattern,const smb_ucs2_t *insert, size_t len);
void fstring_sub_w(smb_ucs2_t *s,const smb_ucs2_t *pattern,const smb_ucs2_t *insert);
void pstring_sub_w(smb_ucs2_t *s,const smb_ucs2_t *pattern,smb_ucs2_t *insert);
void all_string_sub_w(smb_ucs2_t *s,const smb_ucs2_t *pattern,const smb_ucs2_t *insert, size_t len);
void split_at_last_component_w(smb_ucs2_t *path, smb_ucs2_t *front, smb_ucs2_t sep, smb_ucs2_t *back);
smb_ucs2_t *octal_string_w(int i);
smb_ucs2_t *string_truncate_w(smb_ucs2_t *s, size_t length);
size_t unicode_to_dos_char(char *dst, const smb_ucs2_t src);
void unistr_to_dos(char *dest, char *src, size_t len);

/*The following definitions come from  libsmb/namequery.c  */

BOOL name_status(int fd,char *name,int name_type,BOOL recurse,
		 struct in_addr to_ip,char *master,char *rname);
struct node_status *name_status_query(int fd,struct nmb_name *name,
				      struct in_addr to_ip, int *num_names);
BOOL name_status_find(const char *q_name, int q_type, int type, 
		      struct in_addr to_ip, char *name);
struct in_addr *name_query(int fd,const char *name,int name_type, 
			   BOOL bcast,BOOL recurse,
			   struct in_addr to_ip, int *count);
FILE *startlmhosts(char *fname);
BOOL getlmhostsent( FILE *fp, pstring name, int *name_type, struct in_addr *ipaddr);
void endlmhosts(FILE *fp);
BOOL is_ip_address(const char *name);
BOOL resolve_name(const char *name, struct in_addr *return_ip, int name_type);
BOOL resolve_srv_name(const char* srv_name, fstring dest_host,
		      char *workgroup, struct in_addr *ip);
BOOL find_master_ip(char *group, struct in_addr *master_ip);
BOOL lookup_pdc_name(const char *srcname, const char *domain, struct in_addr *pdc_ip, char *ret_name);
BOOL get_dc_list(BOOL pdc_only, char *group, struct in_addr **ip_list, int *count);

/*The following definitions come from  libsmb/nmblib.c  */

void debug_nmb_packet(struct packet_struct *p);
char *nmb_namestr(struct nmb_name *n);
void nmb_safe_namestr(struct nmb_name *n, char *str, size_t len);
struct packet_struct *copy_packet(struct packet_struct *packet);
void free_packet(struct packet_struct *packet);
struct packet_struct *parse_packet(char *buf,int length,
				   enum packet_type packet_type);
struct packet_struct *read_packet(int fd,enum packet_type packet_type);
void make_nmb_name( struct nmb_name *n, const char *name, int type);
BOOL nmb_name_equal(struct nmb_name *n1, struct nmb_name *n2);
int build_packet(char *buf, struct packet_struct *p);
BOOL send_packet(struct packet_struct *p);
struct packet_struct *receive_packet(int fd,enum packet_type type,int t);
struct packet_struct *receive_nmb_packet(int fd, int t, int trn_id);
struct packet_struct *receive_dgram_packet(int fd, int t, char *mailslot_name);
BOOL match_mailslot_name(struct packet_struct *p, char *mailslot_name);
void sort_query_replies(char *data, int n, struct in_addr ip);
char *dns_to_netbios_name(char *dns_name);
int name_mangle( char *In, char *Out, char name_type );
int name_extract(char *buf,int ofs,char *name);
int name_len(char *s1);

/*The following definitions come from  libsmb/passchange.c  */

BOOL remote_password_change(const char *remote_machine, const char *user_name, 
			    const char *old_passwd, const char *new_passwd,
			    char *err_str, size_t err_str_len);

/*The following definitions come from  libsmb/unexpected.c  */

void unexpected_packet(struct packet_struct *p);
void clear_unexpected(time_t t);
struct packet_struct *receive_unexpected(enum packet_type packet_type, int id, 
					 char *mailslot_name);

/*The following definitions come from  locking/brlock.c  */

void brl_init(int read_only);
BOOL brl_lock(SMB_DEV_T dev, SMB_INO_T ino, int fnum,
	      uint16 smbpid, pid_t pid, uint16 tid,
	      br_off start, br_off size, 
	      enum brl_type lock_type);
BOOL brl_unlock(SMB_DEV_T dev, SMB_INO_T ino, int fnum,
		uint16 smbpid, pid_t pid, uint16 tid,
		br_off start, br_off size);
BOOL brl_locktest(SMB_DEV_T dev, SMB_INO_T ino, int fnum,
		  uint16 smbpid, pid_t pid, uint16 tid,
		  br_off start, br_off size, 
		  enum brl_type lock_type);
void brl_close(SMB_DEV_T dev, SMB_INO_T ino, pid_t pid, int tid, int fnum);
int brl_forall(BRLOCK_FN(fn));

/*The following definitions come from  locking/locking.c  */

BOOL is_locked(files_struct *fsp,connection_struct *conn,
	       SMB_BIG_UINT count,SMB_BIG_UINT offset, 
	       enum brl_type lock_type);
BOOL do_lock(files_struct *fsp,connection_struct *conn,
             SMB_BIG_UINT count,SMB_BIG_UINT offset,enum brl_type lock_type,
             int *eclass,uint32 *ecode);
BOOL do_unlock(files_struct *fsp,connection_struct *conn,
               SMB_BIG_UINT count,SMB_BIG_UINT offset, 
	       int *eclass,uint32 *ecode);
void locking_close_file(files_struct *fsp);
BOOL locking_init(int read_only);
BOOL locking_end(void);
BOOL lock_share_entry(connection_struct *conn,
		      SMB_DEV_T dev, SMB_INO_T inode);
BOOL unlock_share_entry(connection_struct *conn,
			SMB_DEV_T dev, SMB_INO_T inode);
BOOL lock_share_entry_fsp(files_struct *fsp);
BOOL unlock_share_entry_fsp(files_struct *fsp);
int get_share_modes(connection_struct *conn, 
		    SMB_DEV_T dev, SMB_INO_T inode, 
		    share_mode_entry **shares);
void del_share_mode(files_struct *fsp);
BOOL set_share_mode(files_struct *fsp, uint16 port, uint16 op_type);
BOOL remove_share_oplock(files_struct *fsp);
BOOL downgrade_share_oplock(files_struct *fsp);
BOOL modify_share_mode(files_struct *fsp, int new_mode, uint16 new_oplock);
int share_mode_forall(SHAREMODE_FN(fn));

/*The following definitions come from  locking/posix.c  */

int fd_close_posix(struct connection_struct *conn, files_struct *fsp);
BOOL is_posix_locked(files_struct *fsp, SMB_BIG_UINT u_offset, SMB_BIG_UINT u_count, enum brl_type lock_type);
BOOL set_posix_lock(files_struct *fsp, SMB_BIG_UINT u_offset, SMB_BIG_UINT u_count, enum brl_type lock_type);
BOOL release_posix_lock(files_struct *fsp, SMB_BIG_UINT u_offset, SMB_BIG_UINT u_count);
void posix_locking_close_file(files_struct *fsp);
BOOL posix_locking_init(int read_only);
BOOL posix_locking_end(void);

/*The following definitions come from  lsarpcd/lsarpcd.c  */

msrpc_service_fns *get_service_fns(void);

/*The following definitions come from  lsarpcd/secret_db.c  */

BOOL tdb_delete_secret(TDB_CONTEXT * tdb, const UNISTR2 * uk);
BOOL tdb_lookup_secret(TDB_CONTEXT * tdb, const UNISTR2 * uk,
		       LSA_SECRET ** usr);
BOOL tdb_store_secret(TDB_CONTEXT * tdb, const UNISTR2 * uk, LSA_SECRET * usr);
TDB_CONTEXT *open_secret_db(int perms);
BOOL secret_init_db(void);

/*The following definitions come from  lsarpcd/srv_lsa.c  */

BOOL api_ntlsa_rpc(rpcsrv_struct * p);

/*The following definitions come from  lsarpcd/srv_lsa_samdb.c  */

uint32 _lsa_open_policy2(const UNISTR2 * server_name, POLICY_HND * hnd,
			 const LSA_OBJ_ATTR * attr, uint32 des_access);
uint32 _lsa_open_policy(const UNISTR2 * server_name, POLICY_HND * hnd,
			const LSA_OBJ_ATTR * attr, uint32 des_access);
uint32 _lsa_enum_trust_dom(POLICY_HND * hnd, uint32 *enum_ctx,
			   uint32 *ret_num_doms, UNISTR2 **uni_names,
			   DOM_SID ***sids);
uint32 _lsa_lookup_names(const POLICY_HND * pol,
			 uint32 num_entries, const UNISTR2 * name,
			 DOM_R_REF * ref, DOM_RID2 ** ret_rid2,
			 uint32 * mapped_count);
uint32 _lsa_lookup_sids(const POLICY_HND * hnd,
			uint32 num_entries, DOM_SID2 * sid,
			const LOOKUP_LEVEL * level,
			DOM_R_REF * ref,
			LSA_TRANS_NAME_ENUM * trn, uint32 * mapped_count);
uint32 _lsa_query_info_pol(POLICY_HND * hnd, uint16 info_class,
			   LSA_INFO_UNION *info);
uint32 _lsa_close(POLICY_HND * hnd);
uint32 _lsa_set_secret(const POLICY_HND * hnd_secret,
		       const STRING2 * val, uint32 unknown);
uint32 _lsa_query_secret(const POLICY_HND * hnd_secret,
			 STRING2 * curval, NTTIME * curtime,
			 STRING2 * oldval, NTTIME * oldtime);
uint32 _lsa_create_secret(const POLICY_HND * hnd,
			  const UNISTR2 * secret_name, uint32 des_access,
			  POLICY_HND * hnd_secret);
uint32 _lsa_open_secret(const POLICY_HND * hnd,
			const UNISTR2 * secret_name, uint32 des_access,
			POLICY_HND * hnd_secret);
uint32 _lsa_enum_privs(POLICY_HND *hnd, uint32 unk0, uint32 unk1,
		       uint32 *count, LSA_PRIV_ENTRY **entries);
uint32 _lsa_unk_2d(const UNISTR2 uni_servername, LSA_R_UNK_2D* r_u);
uint32 _lsa_priv_get_dispname(const POLICY_HND *hnd,
			      const UNISTR2 *name,
			      uint16 lang_id, uint16 lang_id_sys,
			      UNISTR2 **desc, uint16 *ret_lang_id);
uint32 _lsa_open_trusted_dom(const POLICY_HND *hnd, const DOM_SID *sid,
			     uint32 des_access, POLICY_HND *hnd_dom);
uint32 _lsa_delete_object(POLICY_HND *hnd);

/*The following definitions come from  msdfs/msdfs.c  */

BOOL is_msdfs_volume(connection_struct* conn, char* path);
BOOL dfs_redirect(char* pathname, connection_struct* conn);
BOOL dfs_findfirst_redirect(char* pathname, connection_struct* conn);
int setup_dfs_referral(char* pathname, int max_referral_level, 
			char** ppdata);
int dfs_path_error(char* inbuf, char* outbuf);
int setup_dfs_referral(char* pathname, int max_referral_level, 
		       char** ppdata);
BOOL is_msdfs_volume(connection_struct* conn, char* path);

/*The following definitions come from  msrpc/msrpcd.c  */

void exit_server(char *reason);

/*The following definitions come from  msrpc/msrpcd_process.c  */

BOOL get_user_creds(int c, vuser_key * uk);
void close_srv_auth_array(rpcsrv_struct * l);
void add_srv_auth_fn(rpcsrv_struct * l, srv_auth_fns * fn);
BOOL msrpcd_init(int c, rpcsrv_struct ** l);
void msrpcd_process(msrpc_service_fns * fn, rpcsrv_struct * l,
		    const char *name);

/*The following definitions come from  netlogond/creds_db.c  */

BOOL cred_get(const char *domain, const char* wks, struct dcinfo *dc);
BOOL cred_store(const char *domain, const char* wks, struct dcinfo *dc);
BOOL cred_init_db(void);

/*The following definitions come from  netlogond/netlogond.c  */

msrpc_service_fns *get_service_fns(void);

/*The following definitions come from  netlogond/srv_netlogon_nt.c  */

uint32 _net_req_chal(const UNISTR2 *uni_logon_server,
		     const UNISTR2 *uni_logon_client,
		     const DOM_CHAL * clnt_chal, DOM_CHAL * srv_chal);
uint32 _net_logon_ctrl2(const UNISTR2 *uni_server_name,
			uint32 function_code,
			uint32 query_level,
			uint32 switch_value,
			uint32 *reply_switch_value,
			NETLOGON_INFO * logon_info);
uint32 _net_trust_dom_list(const UNISTR2 *uni_server_name,
			   BUFFER2 * uni_trust_dom_name);
uint32 _net_auth(const UNISTR2 *uni_logon_srv,
		 const UNISTR2 *uni_acct_name,
		 uint16 sec_chan,
		 const UNISTR2 *uni_comp_name,
		 const DOM_CHAL * clnt_chal, DOM_CHAL * srv_chal);
uint32 _net_auth_2(const UNISTR2 *uni_logon_srv,
		   const UNISTR2 *uni_acct_name,
		   uint16 sec_chan,
		   const UNISTR2 *uni_comp_name,
		   const DOM_CHAL * clnt_chal,
		   const NEG_FLAGS * clnt_flgs,
		   DOM_CHAL * srv_chal, NEG_FLAGS * srv_flgs);
uint32 _net_srv_pwset(const UNISTR2 *uni_logon_srv,
		      const UNISTR2 *uni_acct_name,
		      uint16 sec_chan,
		      const UNISTR2 *uni_comp_name,
		      const DOM_CRED * clnt_cred,
		      const uint8 pwd[16], DOM_CRED * srv_cred);
uint32 _net_sam_logon(const UNISTR2 *uni_logon_srv,
		      const UNISTR2 *uni_comp_name,
		      const DOM_CRED * clnt_cred,
		      uint16 logon_level,
		      const NET_ID_INFO_CTR * id_ctr,
		      uint16 validation_level,
		      DOM_CRED * srv_creds,
		      NET_USER_INFO_CTR * uctr, uint32 *auth_resp);
uint32 _net_sam_logoff(const DOM_SAM_INFO * sam_id, DOM_CRED * srv_creds);
uint32 _net_sam_sync(const UNISTR2 *uni_srv_name,
		     const UNISTR2 *uni_cli_name,
		     DOM_CRED * cli_creds,
		     DOM_CRED * srv_creds,
		     uint32 database_id,
		     uint32 restart_state,
		     uint32 *sync_context,
		     uint32 max_size,
		     uint32 *num_deltas,
		     uint32 *num_deltas2,
		     SAM_DELTA_HDR * hdr_deltas, SAM_DELTA_CTR * deltas);

/*The following definitions come from  nmbd/asyncdns.c  */

int asyncdns_fd(void);
void kill_async_dns_child(void);
void start_async_dns(void);
void run_dns_queue(void);
BOOL queue_dns_query(struct packet_struct *p,struct nmb_name *question,
		     struct name_record **n);
BOOL queue_dns_query(struct packet_struct *p,struct nmb_name *question,
		     struct name_record **n);
void kill_async_dns_child(void);

/*The following definitions come from  nmbd/nmbd.c  */


/*The following definitions come from  nmbd/nmbd_become_dmb.c  */

void add_domain_names(time_t t);

/*The following definitions come from  nmbd/nmbd_become_lmb.c  */

void insert_permanent_name_into_unicast( struct subnet_record *subrec, 
                                                struct nmb_name *nmbname, uint16 nb_type );
void unbecome_local_master_browser(struct subnet_record *subrec, struct work_record *work,
                                   BOOL force_new_election);
void become_local_master_browser(struct subnet_record *subrec, struct work_record *work);
void set_workgroup_local_master_browser_name( struct work_record *work, char *newname);

/*The following definitions come from  nmbd/nmbd_browserdb.c  */

void update_browser_death_time( struct browse_cache_record *browc );
struct browse_cache_record *create_browser_in_lmb_cache( char *work_name, 
                                                         char *browser_name, 
                                                         struct in_addr ip );
struct browse_cache_record *find_browser_in_lmb_cache( char *browser_name );
void expire_lmb_browsers( time_t t );

/*The following definitions come from  nmbd/nmbd_browsesync.c  */

void dmb_expire_and_sync_browser_lists(time_t t);
void announce_and_sync_with_domain_master_browser( struct subnet_record *subrec,
                                                   struct work_record *work);
void collect_all_workgroup_names_from_wins_server(time_t t);
void sync_all_dmbs(time_t t);

/*The following definitions come from  nmbd/nmbd_elections.c  */

void check_master_browser_exists(time_t t);
void run_elections(time_t t);
void process_election(struct subnet_record *subrec, struct packet_struct *p, char *buf);
BOOL check_elections(void);

/*The following definitions come from  nmbd/nmbd_incomingdgrams.c  */

void tell_become_backup(void);
void process_host_announce(struct subnet_record *subrec, struct packet_struct *p, char *buf);
void process_workgroup_announce(struct subnet_record *subrec, struct packet_struct *p, char *buf);
void process_local_master_announce(struct subnet_record *subrec, struct packet_struct *p, char *buf);
void process_master_browser_announce(struct subnet_record *subrec, 
                                     struct packet_struct *p,char *buf);
void process_lm_host_announce(struct subnet_record *subrec, struct packet_struct *p, char *buf);
void process_get_backup_list_request(struct subnet_record *subrec,
                                     struct packet_struct *p,char *buf);
void process_reset_browser(struct subnet_record *subrec,
                                  struct packet_struct *p,char *buf);
void process_announce_request(struct subnet_record *subrec, struct packet_struct *p, char *buf);
void process_lm_announce_request(struct subnet_record *subrec, struct packet_struct *p, char *buf);

/*The following definitions come from  nmbd/nmbd_incomingrequests.c  */

void process_name_release_request(struct subnet_record *subrec, 
                                  struct packet_struct *p);
void process_name_refresh_request(struct subnet_record *subrec,
                                  struct packet_struct *p);
void process_name_registration_request(struct subnet_record *subrec, 
                                       struct packet_struct *p);
void process_node_status_request(struct subnet_record *subrec, struct packet_struct *p);
void process_name_query_request(struct subnet_record *subrec, struct packet_struct *p);

/*The following definitions come from  nmbd/nmbd_lmhosts.c  */

void load_lmhosts_file(char *fname);
BOOL find_name_in_lmhosts(struct nmb_name *nmbname, struct name_record **namerecp);

/*The following definitions come from  nmbd/nmbd_logonnames.c  */

void add_logon_names(void);

/*The following definitions come from  nmbd/nmbd_mynames.c  */

void register_my_workgroup_one_subnet(struct subnet_record *subrec);
BOOL register_my_workgroup_and_names(void);
void release_my_names(void);
void refresh_my_names(time_t t);

/*The following definitions come from  nmbd/nmbd_namelistdb.c  */

void set_samba_nb_type(void);
void remove_name_from_namelist( struct subnet_record *subrec, 
                                struct name_record   *namerec );
struct name_record *find_name_on_subnet( struct subnet_record *subrec,
                                         struct nmb_name      *nmbname,
                                         BOOL                  self_only );
struct name_record *find_name_for_remote_broadcast_subnet(
                                                   struct nmb_name *nmbname,
                                                   BOOL             self_only );
void update_name_ttl( struct name_record *namerec, int ttl );
struct name_record *add_name_to_subnet( struct subnet_record *subrec,
                                        char                 *name,
                                        int                   type,
                                        uint16                nb_flags,
                                        int                   ttl,
                                        enum name_source      source,
                                        int                   num_ips,
                                        struct in_addr       *iplist);
void standard_success_register(struct subnet_record *subrec, 
                             struct userdata_struct *userdata,
                             struct nmb_name *nmbname, uint16 nb_flags, int ttl,
                             struct in_addr registered_ip);
void standard_fail_register( struct subnet_record   *subrec,
                             struct response_record *rrec,
                             struct nmb_name        *nmbname );
BOOL find_ip_in_name_record( struct name_record *namerec, struct in_addr ip );
void add_ip_to_name_record( struct name_record *namerec, struct in_addr new_ip );
void remove_ip_from_name_record( struct name_record *namerec,
                                 struct in_addr      remove_ip );
void standard_success_release( struct subnet_record   *subrec,
                               struct userdata_struct *userdata,
                               struct nmb_name        *nmbname,
                               struct in_addr          released_ip );
void expire_names_on_subnet(struct subnet_record *subrec, time_t t);
void expire_names(time_t t);
void add_samba_names_to_subnet( struct subnet_record *subrec );
void dump_all_namelists(void);

/*The following definitions come from  nmbd/nmbd_namequery.c  */

BOOL query_name(struct subnet_record *subrec, char *name, int type,
                   query_name_success_function success_fn,
                   query_name_fail_function fail_fn, 
                   struct userdata_struct *userdata);
BOOL query_name_from_wins_server(struct in_addr ip_to, 
                   char *name, int type,
                   query_name_success_function success_fn,
                   query_name_fail_function fail_fn, 
                   struct userdata_struct *userdata);

/*The following definitions come from  nmbd/nmbd_nameregister.c  */

BOOL register_name(struct subnet_record *subrec,
                   char *name, int type, uint16 nb_flags,
                   register_name_success_function success_fn,
                   register_name_fail_function fail_fn,
                   struct userdata_struct *userdata);
BOOL refresh_name(struct subnet_record *subrec, struct name_record *namerec,
                  refresh_name_success_function success_fn,
                  refresh_name_fail_function fail_fn,
                  struct userdata_struct *userdata);

/*The following definitions come from  nmbd/nmbd_namerelease.c  */

BOOL release_name(struct subnet_record *subrec, struct name_record *namerec,
                   release_name_success_function success_fn,
                   release_name_fail_function fail_fn,
                   struct userdata_struct *userdata);

/*The following definitions come from  nmbd/nmbd_nodestatus.c  */

BOOL node_status(struct subnet_record *subrec, struct nmb_name *nmbname,
                 struct in_addr send_ip, node_status_success_function success_fn, 
                 node_status_fail_function fail_fn, struct userdata_struct *userdata);

/*The following definitions come from  nmbd/nmbd_packets.c  */

uint16 get_nb_flags(char *buf);
void set_nb_flags(char *buf, uint16 nb_flags);
struct response_record *queue_register_name( struct subnet_record *subrec,
                          response_function resp_fn,
                          timeout_response_function timeout_fn,
                          register_name_success_function success_fn,
                          register_name_fail_function fail_fn,
                          struct userdata_struct *userdata,
                          struct nmb_name *nmbname,
                          uint16 nb_flags);
struct response_record *queue_register_multihomed_name( struct subnet_record *subrec,
                          response_function resp_fn,
                          timeout_response_function timeout_fn,
                          register_name_success_function success_fn,
                          register_name_fail_function fail_fn,
                          struct userdata_struct *userdata,
                          struct nmb_name *nmbname,
                          uint16 nb_flags,
                          struct in_addr register_ip);
struct response_record *queue_release_name( struct subnet_record *subrec,
                          response_function resp_fn,
                          timeout_response_function timeout_fn,
                          release_name_success_function success_fn,
                          release_name_fail_function fail_fn,
                          struct userdata_struct *userdata,
                          struct nmb_name *nmbname,
                          uint16 nb_flags,
                          struct in_addr release_ip);
struct response_record *queue_refresh_name( struct subnet_record *subrec,
                          response_function resp_fn,
                          timeout_response_function timeout_fn,
                          refresh_name_success_function success_fn,
                          refresh_name_fail_function fail_fn,
                          struct userdata_struct *userdata,
                          struct name_record *namerec,
                          struct in_addr refresh_ip);
struct response_record *queue_query_name( struct subnet_record *subrec,
                          response_function resp_fn,
                          timeout_response_function timeout_fn,
                          query_name_success_function success_fn,
                          query_name_fail_function fail_fn,
                          struct userdata_struct *userdata,
                          struct nmb_name *nmbname);
struct response_record *queue_query_name_from_wins_server( struct in_addr to_ip,
                          response_function resp_fn,
                          timeout_response_function timeout_fn,
                          query_name_success_function success_fn,
                          query_name_fail_function fail_fn,
                          struct userdata_struct *userdata,
                          struct nmb_name *nmbname);
struct response_record *queue_node_status( struct subnet_record *subrec,
                          response_function resp_fn,
                          timeout_response_function timeout_fn,
                          node_status_success_function success_fn,
                          node_status_fail_function fail_fn,
                          struct userdata_struct *userdata,
                          struct nmb_name *nmbname,
                          struct in_addr send_ip);
void reply_netbios_packet(struct packet_struct *orig_packet,
                          int rcode, enum netbios_reply_type_code rcv_code, int opcode,
                          int ttl, char *data,int len);
void run_packet_queue(void);
void retransmit_or_expire_response_records(time_t t);
BOOL listen_for_packets(BOOL run_election);
BOOL send_mailslot(BOOL unique, char *mailslot,char *buf,int len,
                   char *srcname, int src_type,
                   char *dstname, int dest_type,
                   struct in_addr dest_ip,struct in_addr src_ip,
		   int dest_port);

/*The following definitions come from  nmbd/nmbd_processlogon.c  */

void process_logon_packet(struct packet_struct *p,char *buf,int len, 
                          char *mailslot);

/*The following definitions come from  nmbd/nmbd_responserecordsdb.c  */

void remove_response_record(struct subnet_record *subrec,
				struct response_record *rrec);
struct response_record *make_response_record( struct subnet_record *subrec,
                    struct packet_struct *p,
                    response_function resp_fn,
                    timeout_response_function timeout_fn,
                    success_function success_fn,
                    fail_function fail_fn,
                    struct userdata_struct *userdata);
struct response_record *find_response_record(struct subnet_record **ppsubrec,
				uint16 id);
BOOL is_refresh_already_queued(struct subnet_record *subrec, struct name_record *namerec);

/*The following definitions come from  nmbd/nmbd_sendannounce.c  */

void send_browser_reset(int reset_type, char *to_name, int to_type, struct in_addr to_ip);
void broadcast_announce_request(struct subnet_record *subrec, struct work_record *work);
void announce_my_server_names(time_t t);
void announce_my_lm_server_names(time_t t);
void reset_announce_timer(void);
void announce_myself_to_domain_master_browser(time_t t);
void announce_my_servers_removed(void);
void announce_remote(time_t t);
void browse_sync_remote(time_t t);

/*The following definitions come from  nmbd/nmbd_serverlistdb.c  */

void remove_all_servers(struct work_record *work);
struct server_record *find_server_in_workgroup(struct work_record *work, char *name);
void remove_server_from_workgroup(struct work_record *work, struct server_record *servrec);
struct server_record *create_server_on_workgroup(struct work_record *work,
                                                 char *name,int servertype, 
                                                 int ttl,char *comment);
void update_server_ttl(struct server_record *servrec, int ttl);
void expire_servers(struct work_record *work, time_t t);
void write_browse_list(time_t t, BOOL force_write);

/*The following definitions come from  nmbd/nmbd_subnetdb.c  */

void close_subnet(struct subnet_record *subrec);
struct subnet_record *make_normal_subnet(struct interface *iface);
BOOL create_subnets(void);
BOOL we_are_a_wins_client(void);
struct subnet_record *get_next_subnet_maybe_unicast(struct subnet_record *subrec);
struct subnet_record *get_next_subnet_maybe_unicast_or_wins_server(struct subnet_record *subrec);

/*The following definitions come from  nmbd/nmbd_synclists.c  */

void sync_browse_lists(struct work_record *work,
		       char *name, int nm_type, 
		       struct in_addr ip, BOOL local, BOOL servers);
void sync_check_completion(void);

/*The following definitions come from  nmbd/nmbd_winsproxy.c  */

void make_wins_proxy_name_query_request( struct subnet_record *subrec, 
                                         struct packet_struct *incoming_packet,
                                         struct nmb_name *question_name);

/*The following definitions come from  nmbd/nmbd_winsserver.c  */

BOOL packet_is_for_wins_server(struct packet_struct *packet);
BOOL initialise_wins(void);
void wins_process_name_refresh_request(struct subnet_record *subrec,
                                            struct packet_struct *p);
void wins_process_name_registration_request(struct subnet_record *subrec,
                                            struct packet_struct *p);
void wins_process_multihomed_name_registration_request( struct subnet_record *subrec,
                                                        struct packet_struct *p);
void send_wins_name_query_response(int rcode, struct packet_struct *p, 
                                          struct name_record *namerec);
void wins_process_name_query_request(struct subnet_record *subrec, 
                                     struct packet_struct *p);
void wins_process_name_release_request(struct subnet_record *subrec,
                                       struct packet_struct *p);
void initiate_wins_processing(time_t t);
void wins_write_database(BOOL background);

/*The following definitions come from  nmbd/nmbd_workgroupdb.c  */

struct work_record *find_workgroup_on_subnet(struct subnet_record *subrec, 
                                             const char *name);
struct work_record *create_workgroup_on_subnet(struct subnet_record *subrec,
                                               fstring name, int ttl);
void update_workgroup_ttl(struct work_record *work, int ttl);
void initiate_myworkgroup_startup(struct subnet_record *subrec, struct work_record *work);
void dump_workgroups(BOOL force_write);
void expire_workgroups_and_servers(time_t t);

/*The following definitions come from  param/loadparm.c  */

void lp_talloc_free(void);
char *lp_logfile(void);
char *lp_smbrun(void);
char *lp_configfile(void);
char *lp_smb_passwd_file(void);
char *lp_sam_directory(void);
char *lp_smb_passgrp_file(void);
char *lp_smb_group_file(void);
char *lp_smb_alias_file(void);
char *lp_serverstring(void);
char *lp_printcapname(void);
char *lp_lockdir(void);
char *lp_utmpdir(void);
char *lp_rootdir(void);
char *lp_source_environment(void);
char *lp_defaultservice(void);
char *lp_msg_command(void);
char *lp_dfree_command(void);
char *lp_hosts_equiv(void);
char *lp_auto_services(void);
char *lp_passwd_program(void);
char *lp_passwd_chat(void);
char *lp_passwordserver(void);
char *lp_name_resolve_order(void);
char *lp_workgroup(void);
char *lp_trusted_domains(void);
char *lp_trusting_domains(void);
char *lp_username_map(void);
char *lp_aliasname_map(void);
char *lp_groupname_map(void);
char *lp_builtinname_map(void);
char *lp_builtinrid_file(void);
char *lp_ntusrname_map(void);
char *lp_remote_announce(void);
char *lp_remote_browse_sync(void);
char *lp_wins_server(void);
char *lp_interfaces(void);
char *lp_socket_address(void);
char *lp_nis_home_map_name(void);
char *lp_netbios_aliases(void);
char *lp_driverfile(void);
char *lp_panic_action(void);
char *lp_adduser_script(void);
char *lp_deluser_script(void);
char *lp_wins_hook(void);
char *lp_nt_forms(void);
char *lp_nt_drivers_file(void);
char *lp_winbind_uid(void);
char *lp_winbind_gid(void);
char *lp_template_homedir(void);
char *lp_template_shell(void);
char *lp_winbind_separator(void);
BOOL lp_winbind_enum_users(void);
BOOL lp_winbind_enum_groups(void);
char *lp_codepagedir(void);
char *lp_ldap_server(void);
char *lp_ldap_suffix(void);
char *lp_ldap_bind_as(void);
char *lp_ldap_passwd_file(void);
char *lp_ldap_url(void);
char *lp_ldap_realm(void);
char *lp_ldap_computers_subcontext(void);
char *lp_ldap_users_subcontext(void);
char *lp_ldap_builtin_subcontext(void);
int lp_ssl_version(void);
char *lp_ssl_hosts(void);
char *lp_ssl_hosts_resign(void);
char *lp_ssl_cacertdir(void);
char *lp_ssl_cacertfile(void);
char *lp_ssl_cert(void);
char *lp_ssl_privkey(void);
char *lp_ssl_client_cert(void);
char *lp_ssl_client_privkey(void);
char *lp_ssl_ciphers(void);
BOOL lp_ssl_enabled(void);
BOOL lp_ssl_reqClientCert(void);
BOOL lp_ssl_reqServerCert(void);
BOOL lp_ssl_compatibility(void);
BOOL lp_dns_proxy(void);
BOOL lp_wins_support(void);
BOOL lp_we_are_a_wins_server(void);
BOOL lp_wins_proxy(void);
BOOL lp_local_master(void);
BOOL lp_domain_logons(void);
BOOL lp_load_printers(void);
BOOL lp_use_rhosts(void);
BOOL lp_readprediction(void);
BOOL lp_readbmpx(void);
BOOL lp_readraw(void);
BOOL lp_writeraw(void);
BOOL lp_null_passwords(void);
BOOL lp_strip_dot(void);
BOOL lp_encrypted_passwords(void);
BOOL lp_update_encrypted(void);
BOOL lp_client_ntlmv2(void);
BOOL lp_server_ntlmv2(void);
BOOL lp_client_schannel(void);
BOOL lp_server_schannel(void);
BOOL lp_syslog_only(void);
BOOL lp_timestamp_logs(void);
BOOL lp_debug_hires_timestamp(void);
BOOL lp_debug_pid(void);
BOOL lp_debug_uid(void);
BOOL lp_browse_list(void);
BOOL lp_unix_realname(void);
BOOL lp_nis_home_map(void);
BOOL lp_bind_interfaces_only(void);
BOOL lp_unix_password_sync(void);
BOOL lp_passwd_chat_debug(void);
BOOL lp_nt_smb_support(void);
BOOL lp_nt_pipe_support(void);
BOOL lp_nt_acl_support(void);
BOOL lp_stat_cache(void);
BOOL lp_restrict_anonymous(void);
BOOL lp_host_msdfs(void);
BOOL lp_kernel_oplocks(void);
int lp_os_level(void);
int lp_max_ttl(void);
int lp_max_wins_ttl(void);
int lp_min_wins_ttl(void);
int lp_max_log_size(void);
int lp_max_open_files(void);
int lp_maxxmit(void);
int lp_maxmux(void);
int lp_passwordlevel(void);
int lp_usernamelevel(void);
int lp_readsize(void);
int lp_deadtime(void);
int lp_maxprotocol(void);
int lp_security(void);
int lp_maxdisksize(void);
int lp_lpqcachetime(void);
int lp_syslog(void);
int lp_client_code_page(void);
int lp_lm_announce(void);
int lp_lm_interval(void);
int lp_machine_password_timeout(void);
int lp_change_notify_timeout(void);
int lp_stat_cache_size(void);
int lp_map_to_guest(void);
int lp_min_passwd_length(void);
int lp_oplock_break_wait_time(void);
int lp_ldap_port(void);
int lp_ldap_protocol_version(void);
char *lp_logon_script(const user_struct* );
char *lp_logon_path(const user_struct* );
char *lp_logon_drive(const user_struct* );
char *lp_logon_home(const user_struct* );
char *lp_preexec(int );
char *lp_postexec(int );
char *lp_rootpreexec(int );
char *lp_rootpostexec(int );
char *lp_servicename(int );
char *lp_pathname(int );
char *lp_dontdescend(int );
char *lp_username(int );
char *lp_guestaccount(int );
char *lp_invalid_users(int );
char *lp_valid_users(int );
char *lp_admin_users(int );
char *lp_printcommand(int );
char *lp_lpqcommand(int );
char *lp_lprmcommand(int );
char *lp_lppausecommand(int );
char *lp_lpresumecommand(int );
char *lp_queuepausecommand(int );
char *lp_queueresumecommand(int );
char *lp_printername(int );
char *lp_printerdriver(int );
char *lp_hostsallow(int );
char *lp_hostsdeny(int );
char *lp_magicscript(int );
char *lp_magicoutput(int );
char *lp_comment(int );
char *lp_force_user(int );
char *lp_force_group(int );
char *lp_readlist(int );
char *lp_writelist(int );
char *lp_printer_admin(int );
char *lp_fstype(int );
char *lp_vfsobj(int );
char *lp_mangled_map(int );
char *lp_veto_files(int );
char *lp_hide_files(int );
char *lp_veto_oplocks(int );
char *lp_driverlocation(int );
BOOL lp_msdfs_root(int );
BOOL lp_autoloaded(int );
BOOL lp_preexec_close(int );
BOOL lp_rootpreexec_close(int );
BOOL lp_casesensitive(int );
BOOL lp_preservecase(int );
BOOL lp_shortpreservecase(int );
BOOL lp_casemangle(int );
BOOL lp_status(int );
BOOL lp_hide_dot_files(int );
BOOL lp_browseable(int );
BOOL lp_readonly(int );
BOOL lp_no_set_dir(int );
BOOL lp_guest_ok(int );
BOOL lp_guest_only(int );
BOOL lp_print_ok(int );
BOOL lp_postscript(int );
BOOL lp_map_hidden(int );
BOOL lp_map_archive(int );
BOOL lp_locking(int );
BOOL lp_strict_locking(int );
BOOL lp_posix_locking(int );
BOOL lp_utmp(int );
BOOL lp_share_modes(int );
BOOL lp_oplocks(int );
BOOL lp_level2_oplocks(int );
BOOL lp_onlyuser(int );
BOOL lp_manglednames(int );
BOOL lp_widelinks(int );
BOOL lp_symlinks(int );
BOOL lp_syncalways(int );
BOOL lp_strict_sync(int );
BOOL lp_map_system(int );
BOOL lp_delete_readonly(int );
BOOL lp_fake_oplocks(int );
BOOL lp_recursive_veto_delete(int );
BOOL lp_dos_filetimes(int );
BOOL lp_dos_filetime_resolution(int );
BOOL lp_fake_dir_create_times(int );
BOOL lp_blocking_locks(int );
BOOL lp_inherit_perms(int );
int lp_create_mask(int );
int lp_force_create_mode(int );
int _lp_security_mask(int );
int _lp_force_security_mode(int );
int lp_dir_mask(int );
int lp_force_dir_mode(int );
int _lp_dir_security_mask(int );
int _lp_force_dir_security_mode(int );
int lp_max_connections(int );
int lp_defaultcase(int );
int lp_minprintspace(int );
int lp_printing(int );
int lp_oplock_contention_limit(int );
int lp_write_cache_size(int );
char lp_magicchar(int );
char *lp_mysql_host(void);
char *lp_mysql_user(void);
char *lp_mysql_passfile(void);
char *lp_mysql_db(void);
char *lp_mysql_table(void);
int lp_winbind_cache_time(void);
BOOL lp_add_home(char *pszHomename, int iDefaultService, char *pszHomedir);
int lp_add_service(char *pszService, int iDefaultService);
BOOL lp_add_printer(char *pszPrintername, int iDefaultService);
BOOL lp_file_list_changed(void);
void *lp_local_ptr(int snum, void *ptr);
BOOL lp_do_parameter(int snum, char *pszParmName, char *pszParmValue);
BOOL lp_is_default(int snum, struct parm_struct *parm);
struct parm_struct *lp_next_parameter(int snum, int *i, int allparameters);
BOOL lp_snum_ok(int iService);
void lp_add_one_printer(char *name, char *comment);
BOOL lp_loaded(void);
void lp_killunused(BOOL (*snumused) (int));
BOOL lp_load(char *pszFname, BOOL global_only, BOOL save_defaults,
	     BOOL add_ipc);
void lp_resetnumservices(void);
int lp_numservices(void);
void lp_dump(FILE * f, BOOL show_defaults, int maxtoprint);
void lp_dump_one(FILE * f, BOOL show_defaults, int snum);
int lp_servicenumber(char *pszServiceName);
char *volume_label(int snum);
int lp_server_role(void);
BOOL lp_domain_master(void);
BOOL lp_preferred_master(void);
void lp_remove_service(int snum);
void lp_copy_service(int snum, char *new_name);
int lp_default_server_announce(void);
int lp_major_announce_version(void);
int lp_minor_announce_version(void);
void lp_set_name_resolve_order(char *new_order);
BOOL lp_wildcard_dc(void);
int lp_security_mask(int snum);
int lp_force_security_mode(int snum);
int lp_dir_security_mask(int snum);
int lp_force_dir_security_mode(int snum);

/*The following definitions come from  param/params.c  */

BOOL pm_process( char *FileName,
                 BOOL (*sfunc)(char *),
                 BOOL (*pfunc)(char *, char *) );

/*The following definitions come from  passdb/ldap.c  */

BOOL ldap_connect(void);
void ldap_disconnect(void);
BOOL ldap_search_for(char *filter);
BOOL ldap_search_by_name(const char *user);
BOOL ldap_search_by_uid(int uid);
BOOL ldap_get_attribute(char *attribute, char *value);
struct smb_passwd *ldap_getpw(void);
BOOL ldap_allocaterid(uint32 *rid);
struct smb_passdb_ops *ldap_initialise_password_db(void);

/*The following definitions come from  passdb/ldapdb.c  */

BOOL ldapdb_init(void);
BOOL ldapdb_get_uint32(LDAPDB *hds, const char *attribute, uint32 *val);
BOOL ldapdb_get_unistr_value(LDAPDB *hds, const char *attribute, UNISTR2 *buf);
BOOL ldapdb_oc_check(LDAPDB *hds, const char *ocname);
BOOL ldapdb_queue_unistr_mod(LDAPMod ***modlist,int modop, const char *attribute, const UNISTR2 *value);
BOOL ldapdb_queue_uint32_mod(LDAPMod ***modlist, int modop, const char *attribute, uint32 value);
BOOL ldapdb_get_domain_info(PLDAPDB _hds, const char *realm, DOM_SID *sid, fstring nbname);
void unistr2_to_utf8(char *dest, const UNISTR2 *str, size_t maxlen);
void utf8_to_unistr2(UNISTR2 *unistr, const char *str);

/*The following definitions come from  passdb/mysqlpass.c  */

int mysql_db_lock_connect( MYSQL *handle );
void *mysql_startpwent( BOOL update );
void mysql_endpwent( void *ptr );
SMB_BIG_UINT mysql_getpwpos(void *vp);
BOOL mysql_setpwpos(void *vp, SMB_BIG_UINT pos);
void *mysql_fill_smb_passwd( MYSQL_ROW *row );
struct smb_passwd *mysql_getsmbpwent(void *vp);
void *mysql_fetch_passwd( void *(*filler)(MYSQL_ROW*), char *where );
void *mysql_getpwuid(void *(*filler)(MYSQL_ROW *), uid_t uid);
struct smb_passwd *mysql_getsmbpwuid(uid_t uid);
void *mysql_getpwnam(void *(*filler)(MYSQL_ROW *), char *field, const char *name);
struct smb_passwd *mysql_getsmbpwnam(const char *unix_name);
BOOL mysql_del_smb( MYSQL *handle, char *unix_name );
BOOL mysql_add_smb( MYSQL *handle, struct smb_passwd *smb );
BOOL mysql_mod_smb( MYSQL *handle, struct smb_passwd *smb, BOOL override );
BOOL mysql_add_smbpwd_entry(struct smb_passwd *smb);
BOOL mysql_mod_smbpwd_entry(struct smb_passwd *smb, BOOL override);
struct smb_passdb_ops *mysql_initialise_password_db(void);

/*The following definitions come from  passdb/mysqlsampass.c  */

void *mysql_fill_sam_passwd( MYSQL_ROW *row );
struct sam_passwd *mysql_getsampwent(void *vp);
struct sam_passwd *mysql_getsampwrid(uint32 rid);
struct sam_passwd *mysql_getsampwuid(uid_t uid);
struct sam_passwd *mysql_getsampwntnam(const char *nt_name);
struct sam_disp_info *mysql_getsamdispntnam(const char *nt_name);
struct sam_disp_info *mysql_getsamdisprid(uint32 rid);
struct sam_disp_info *mysql_getsamdispent(void *vp);
BOOL mysql_add_sampwd_entry(struct sam_passwd *sam);
BOOL mysql_mod_sampwd_entry(struct sam_passwd *sam, BOOL override);
struct sam_passdb_ops *mysql_initialise_sam_password_db(void);

/*The following definitions come from  passdb/nispass.c  */

struct passdb_ops *nisplus_initialise_password_db(void);

/*The following definitions come from  passdb/nt5ldap.c  */

BOOL nt5ldap_make_local_grp(LDAPDB * hds, LOCAL_GRP * group,
		     LOCAL_GRP_MEMBER ** members, int *num_membs, uint32 req_type);
BOOL nt5ldap_make_sam_user_info21(LDAPDB *hds, SAM_USER_INFO_21 *usr);
BOOL nt5ldap_sam_user_info21_mods(const SAM_USER_INFO_21 *usr, LDAPMod ***mods, int op, 
	char *rdn, size_t rdnmaxlen, BOOL *iscomputer_p);

/*The following definitions come from  passdb/pass_check.c  */

void dfs_unlogin(void);
BOOL pass_check(const char *_user, const char *_password,
		int pwlen, const struct passwd *pwd,
		BOOL (*fn) (const char *, const char *));

/*The following definitions come from  passdb/passdb.c  */

BOOL initialise_password_db(void);
struct smb_passwd *iterate_getsmbpwuid(uid_t unix_uid);
struct smb_passwd *iterate_getsmbpwnam(const char *name);
uint32 getsamseqnum(void);
void *startsmbpwent(BOOL update);
void endsmbpwent(void *vp);
SMB_BIG_UINT getsmbpwpos(void *vp);
BOOL setsmbpwpos(void *vp, SMB_BIG_UINT tok);
struct smb_passwd *getsmbpwent(void *vp);
BOOL add_smbpwd_entry(struct smb_passwd *newpwd);
BOOL mod_smbpwd_entry(struct smb_passwd* pwd, BOOL override);
BOOL del_smbpwd_entry(uint32 rid);
struct smb_passwd *getsmbpwnam(const char *name);
struct smb_passwd *getsmbpwuid(uid_t unix_uid);
void pwdb_init_smb(struct smb_passwd *user);
struct smb_passwd *pwdb_smb_map_names(struct smb_passwd *smb);

/*The following definitions come from  passdb/passgrp.c  */

BOOL initialise_passgrp_db(void);
struct smb_passwd *iterate_getsmbgrprid(uint32 user_rid,
		uint32 **grps, int *num_grps,
		uint32 **alss, int *num_alss);
struct smb_passwd *iterate_getsmbgrpuid(uid_t unix_uid,
		uint32 **grps, int *num_grps,
		uint32 **alss, int *num_alss);
struct smb_passwd *iterate_getsmbgrpntnam(const char *nt_name,
		uint32 **grps, int *num_grps,
		uint32 **alss, int *num_alss);
void *startsmbgrpent(BOOL update);
void endsmbgrpent(void *vp);
struct smb_passwd *getsmbgrpent(void *vp,
		uint32 **grps, int *num_grps,
		uint32 **alss, int *num_alss);
struct smb_passwd *getsmbgrpntnam(char *name,
		uint32 **grps, int *num_grps,
		uint32 **alss, int *num_alss);
struct smb_passwd *getsmbgrprid(uint32 user_rid,
		uint32 **grps, int *num_grps,
		uint32 **alss, int *num_alss);
struct smb_passwd *getsmbgrpuid(uid_t unix_uid,
		uint32 **grps, int *num_grps,
		uint32 **alss, int *num_alss);

/*The following definitions come from  passdb/passgrpldap.c  */

struct passgrp_ops *ldap_initialise_password_grp(void);

/*The following definitions come from  passdb/passgrpnt5ldap.c  */


/*The following definitions come from  passdb/sampass.c  */

struct sam_passdb_ops *file_initialise_sam_password_db(void);

/*The following definitions come from  passdb/sampassdb.c  */

BOOL initialise_sam_password_db(void);
void *startsam21pwent(BOOL update);
void endsam21pwent(void *vp);
struct sam_passwd *getsam21pwent(void *vp);
BOOL mod_sam21pwd_entry(struct sam_passwd* pwd, BOOL override);
struct sam_passwd *iterate_getsam21pwntnam(const char *ntname);
struct sam_passwd *iterate_getsam21pwrid(uint32 rid);
struct sam_passwd *iterate_getsam21pwuid(uid_t uid);
struct sam_disp_info *getsamdisprid(uint32 rid);
struct sam_passwd *getsam21pwntnam(const char *name);
struct sam_passwd *getsam21pwrid(uint32 rid);
void pwdb_init_sam(struct sam_passwd *user);
struct sam_disp_info *pwdb_sam_to_dispinfo(struct sam_passwd *user);
void copy_id23_to_sam_passwd(struct sam_passwd *to, const SAM_USER_INFO_23 *from);
void copy_id21_to_sam_passwd(struct sam_passwd *to, const SAM_USER_INFO_21 *from);
void copy_sam_passwd(struct sam_passwd *to, const struct sam_passwd *from);
struct smb_passwd *pwdb_sam_to_smb(struct sam_passwd *user);
struct sam_passwd *pwdb_smb_to_sam(struct smb_passwd *user);
struct sam_passwd *pwdb_sam_map_names(struct sam_passwd *sam);

/*The following definitions come from  passdb/sampassldap.c  */

BOOL ldap_search_by_rid(uint32 rid);
BOOL ldap_search_by_ntname(const char *ntname);
struct sam_passdb_ops *ldap_initialise_sam_password_db(void);

/*The following definitions come from  passdb/sampassnt5ldap.c  */


/*The following definitions come from  passdb/secrets.c  */

BOOL secrets_init(void);
void *secrets_fetch(char *key, size_t *size);
BOOL secrets_store(char *key, void *data, size_t size);
BOOL secrets_delete(char *key);
BOOL secrets_store_domain_sid(char *domain, DOM_SID *sid);
BOOL secrets_fetch_domain_sid(char *domain, DOM_SID *sid);

/*The following definitions come from  passdb/smbpass.c  */

struct smb_passwd *getsmbfilepwent(void *vp);
char *format_new_smbpasswd_entry(struct smb_passwd *newpwd);
struct smb_passdb_ops *file_initialise_password_db(void);

/*The following definitions come from  passdb/smbpasschange.c  */

BOOL local_password_change(char *user_name,
				BOOL add_user,
				uint16 acb_info, uint16 acb_mask,
				char *new_passwd, 
				char *err_str, size_t err_str_len,
				char *msg_str, size_t msg_str_len);

/*The following definitions come from  passdb/smbpassfile.c  */

BOOL trust_password_lock( const char *domain, const char *name, BOOL update);
BOOL trust_password_unlock(void);
BOOL trust_password_delete( char *domain, char *name );
BOOL get_trust_account_password( uchar *ret_pwd, time_t *pass_last_set_time);
BOOL set_trust_account_password( uchar *md4_new_pwd);
BOOL trust_get_passwd_time( uchar trust_passwd[16],
				const char *domain, const char *myname,
				NTTIME *modtime);
BOOL trust_get_passwd( uchar trust_passwd[16],
				const char *domain, const char *myname);
BOOL create_trust_account_file(char *domain, char *name, uchar pass[16]);

/*The following definitions come from  passdb/smbpassgroup.c  */

struct passgrp_ops *file_initialise_password_grp(void);

/*The following definitions come from  passdb/smbpassgroupunix.c  */

struct passgrp_ops *unix_initialise_password_grp(void);

/*The following definitions come from  passdb/smbpassnt5ldap.c  */


/*The following definitions come from  printing/load.c  */

void add_all_printers(void);
void load_printers(void);

/*The following definitions come from  printing/lpq_parse.c  */

BOOL parse_lpq_entry(int snum,char *line,
		     print_queue_struct *buf,
		     print_status_struct *status,BOOL first);

/*The following definitions come from  printing/nt_printing.c  */

BOOL nt_printing_init(void);
int get_ntforms(nt_forms_struct **list);
int write_ntforms(nt_forms_struct **list, int number);
BOOL add_a_form(nt_forms_struct **list, const FORM *form, int *count);
void update_a_form(nt_forms_struct **list, const FORM *form, int count);
int get_ntdrivers(fstring **list, char *architecture);
BOOL get_short_archi(char *short_archi, char *long_archi);
void clean_up_driver_struct(NT_PRINTER_DRIVER_INFO_LEVEL driver_abstract, uint32 level);
uint32 del_a_printer(char *portname);
BOOL add_a_specific_param(NT_PRINTER_INFO_LEVEL_2 *info_2, NT_PRINTER_PARAM *param);
BOOL unlink_specific_param_if_exist(NT_PRINTER_INFO_LEVEL_2 *info_2, NT_PRINTER_PARAM *param);
NT_DEVICEMODE *init_devicemode(NT_DEVICEMODE *nt_devmode);
NT_DEVICEMODE *dup_nt_devicemode(NT_DEVICEMODE *nt_devicemode);
void free_nt_devicemode(NT_DEVICEMODE **devmode_ptr);
void get_printer_subst_params(int snum, fstring *printername, fstring *sharename, fstring *portname);
uint32 add_a_printer(NT_PRINTER_INFO_LEVEL printer, uint32 level);
uint32 get_a_printer(NT_PRINTER_INFO_LEVEL *printer, uint32 level, fstring sharename);
uint32 free_a_printer(NT_PRINTER_INFO_LEVEL **pp_printer, uint32 level);
uint32 add_a_printer_driver(NT_PRINTER_DRIVER_INFO_LEVEL driver, uint32 level);
uint32 get_a_printer_driver(NT_PRINTER_DRIVER_INFO_LEVEL *driver, uint32 level, 
                            fstring printername, fstring architecture);
uint32 free_a_printer_driver(NT_PRINTER_DRIVER_INFO_LEVEL driver, uint32 level);
BOOL get_specific_param_by_index(NT_PRINTER_INFO_LEVEL printer, uint32 level, uint32 param_index,
                                 fstring value, uint8 **data, uint32 *type, uint32 *len);
BOOL get_specific_param(NT_PRINTER_INFO_LEVEL printer, uint32 level, 
                        fstring value, uint8 **data, uint32 *type, uint32 *len);
uint32 nt_printing_setsec(char *printername, SEC_DESC_BUF *secdesc_ctr);
uint32 nt_printing_getsec(char *printername, SEC_DESC_BUF *secdesc_ctr);
BOOL print_time_access_check(int snum);

/*The following definitions come from  printing/pcap.c  */

BOOL pcap_printername_ok(char *pszPrintername, char *pszPrintcapname);
void pcap_printer_fn(void (*fn)(char *, char *));

/*The following definitions come from  printing/print_cups.c  */

void cups_printer_fn(void (*fn)(char *, char *));
int cups_printername_ok(char *name);

/*The following definitions come from  printing/print_svid.c  */

void sysv_printer_fn(void (*fn)(char *, char *));
int sysv_printername_ok(char *name);

/*The following definitions come from  printing/printfsp.c  */

files_struct *print_fsp_open(connection_struct *conn,char *jobname);
void print_fsp_end(files_struct *fsp);

/*The following definitions come from  printing/printing.c  */

BOOL print_backend_init(void);
BOOL print_job_exists(int jobid);
int print_job_snum(int jobid);
int print_job_fd(int jobid);
char *print_job_fname(int jobid);
BOOL print_job_set_place(int jobid, int place);
BOOL print_job_set_name(int jobid, char *name);
BOOL print_job_delete(int jobid);
BOOL print_job_pause(int jobid);
BOOL print_job_resume(int jobid);
int print_job_write(int jobid, const char *buf, int size);
int print_job_start(int snum, char *jobname);
BOOL print_job_end(int jobid);
int print_queue_status(int snum, 
		       print_queue_struct **queue,
		       print_status_struct *status);
int print_queue_snum(char *qname);
BOOL print_queue_pause(int snum);
BOOL print_queue_resume(int snum);
BOOL print_queue_purge(int snum);

/*The following definitions come from  profile/profile.c  */

BOOL profile_setup(BOOL rdonly);

/*The following definitions come from  rpc_client/cli_netlogon_sync.c  */

BOOL synchronise_passdb(void);

/*The following definitions come from  rpc_client/msrpc_spoolss.c  */

BOOL msrpc_spoolss_enum_printers(char* srv_name, uint32 flags, uint32 level, PRINTER_INFO_CTR ctr);
uint32 msrpc_spoolss_getprinterdata( const char* printer_name,
				const char* station, 
				const char* user_name, 
				const char* value_name, 
				uint32 *type,
				NEW_BUFFER *buffer,
				void *fn) ;
BOOL msrpc_spoolss_enum_jobs( const char* printer_name,
				const char* station, const char* user_name, 
				uint32 level,
				void ***ctr, JOB_INFO_FN(fn));
BOOL msrpc_spoolss_enum_printerdata( const char* printer_name, 
		const char* station, const char* user_name );
BOOL msrpc_spoolss_getprinter( const char* printer_name, const uint32 level, 
		const char* station, const char* user_name, 
		PRINTER_INFO_CTR ctr);
BOOL msrpc_spoolss_getprinterdriver( const char* printer_name,
		const char *environment, const uint32 level, 
		const char* station, const char* user_name, 
		PRINTER_DRIVER_CTR ctr);
BOOL msrpc_spoolss_enumprinterdrivers( const char* srv_name,
		const char *environment, const uint32 level, 
		PRINTER_DRIVER_CTR ctr);
BOOL msrpc_spoolss_getprinterdriverdir(char* srv_name, char* env_name, uint32 level, DRIVER_DIRECTORY_CTR ctr);

/*The following definitions come from  rpc_server/srv_brs.c  */

BOOL api_brs_rpc(rpcsrv_struct * p);

/*The following definitions come from  rpc_server/srv_lookup.c  */

uint32 make_dom_gids(DOMAIN_GRP * mem, int num_members, DOM_GID ** ppgids);
uint32 lookup_sid(DOM_SID *sid, char *name, uint32 *type);
uint32 lookup_name(const char *name, DOM_SID *sid, uint32 *type);

/*The following definitions come from  rpc_server/srv_netlog.c  */

BOOL api_netlog_rpc(rpcsrv_struct * p);

/*The following definitions come from  rpc_server/srv_pipe.c  */

BOOL read_then_write_pipe(pipes_struct * p, char *data, int len,
		    char **rdata, int *rlen, BOOL *pipe_outstanding);
ssize_t write_to_pipe(pipes_struct * p, char *data, size_t n);
int read_from_pipe(pipes_struct * p, char *data, int max_len);

/*The following definitions come from  rpc_server/srv_pipe_hnd.c  */

void set_pipe_handle_offset(int max_open_files);
void reset_chain_p(void);
void init_rpc_pipe_hnd(void);
pipes_struct *open_rpc_pipe_p(char *pipe_name, const vuser_key * key,
			      rpcsrv_struct * l);
BOOL wait_rpc_pipe_hnd_state(pipes_struct * p, uint16 priority);
BOOL set_rpc_pipe_hnd_state(pipes_struct * p, uint16 device_state);
BOOL close_rpc_pipe_hnd(pipes_struct * p);
pipes_struct *get_rpc_pipe_p(char *buf, int where);
pipes_struct *get_rpc_pipe(int pnum);

/*The following definitions come from  rpc_server/srv_pipe_netsec.c  */


/*The following definitions come from  rpc_server/srv_pipe_noauth.c  */


/*The following definitions come from  rpc_server/srv_pipe_ntlmssp.c  */


/*The following definitions come from  rpc_server/srv_pipe_srv.c  */

void close_msrpc_command_processor(void);
void add_msrpc_command_processor(char *pipe_name,
				 char *process_name,
				 BOOL (*fn) (rpcsrv_struct *));
BOOL api_rpcTNP(rpcsrv_struct * l, const char *rpc_name,
		const struct api_struct *api_rpc_cmds);
BOOL rpc_local(rpcsrv_struct * l, char *data, int len, const char *name);

/*The following definitions come from  rpc_server/srv_reg.c  */

BOOL api_reg_rpc(rpcsrv_struct * p);

/*The following definitions come from  rpc_server/srv_samr.c  */

BOOL api_samr_rpc(rpcsrv_struct * p);

/*The following definitions come from  rpc_server/srv_spoolss.c  */

BOOL api_spoolss_rpc(rpcsrv_struct * p);

/*The following definitions come from  rpc_server/srv_srvsvc.c  */

BOOL api_srvsvc_rpc(rpcsrv_struct * p);

/*The following definitions come from  rpc_server/srv_svcctl.c  */

BOOL api_svcctl_rpc(rpcsrv_struct * p);

/*The following definitions come from  rpc_server/srv_wkssvc.c  */

BOOL api_wkssvc_rpc(rpcsrv_struct * p);

/*The following definitions come from  rpcclient/cmd_atsvc.c  */

void cmd_at(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_brs.c  */

void cmd_brs_query_info(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_dfs.c  */

void cmd_dfs_add(struct client_info *info, int argc, char *argv[]);
void cmd_dfs_remove(struct client_info *info, int argc, char *argv[]);
void cmd_dfs_enum(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_eventlog.c  */

uint32 cmd_eventlog(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_lsarpc.c  */

void cmd_lsa_enum_trust_dom(struct client_info *info, int argc, char *argv[]);
void cmd_lsa_query_info(struct client_info *info, int argc, char *argv[]);
void cmd_lsa_lookup_names(struct client_info *info, int argc, char *argv[]);
void cmd_lsa_lookup_sids(struct client_info *info, int argc, char *argv[]);
void cmd_lsa_set_secret(struct client_info *info, int argc, char *argv[]);
void cmd_lsa_create_secret(struct client_info *info, int argc, char *argv[]);
void cmd_lsa_query_secret_secobj(struct client_info *info, int argc,
				 char *argv[]);
uint32 cmd_lsa_query_secret(struct client_info *info, int argc, char *argv[]);
uint32 cmd_lsa_enum_privs(struct client_info *info, int argc, char *argv[]);
uint32 cmd_lsa_priv_info(struct client_info *info, int argc, char *argv[]);
uint32 cmd_lsa_enum_sids(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_netlogon.c  */

void cmd_netlogon_pwset(struct client_info *info, int argc, char *argv[]);
uint32 cmd_netlogon_dom_list(struct client_info *info, int argc, char *argv[]);
void cmd_netlogon_login_test(struct client_info *info, int argc, char *argv[]);
uint32 cmd_netlogon_domain_test(struct client_info *info,
				int argc, char *argv[]);
uint32 cmd_sam_sync(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_reg.c  */

void split_server_keyname(char *srv_name, char *key, const char* arg);
BOOL msrpc_reg_enum_key(const char* srv_name, const char* full_keyname,
				REG_FN(reg_fn),
				REG_KEY_FN(reg_key_fn),
				REG_VAL_FN(reg_val_fn));
void cmd_reg_enum(struct client_info *info, int argc, char *argv[]);
void cmd_reg_query_info(struct client_info *info, int argc, char *argv[]);
void cmd_reg_query_key(struct client_info *info, int argc, char *argv[]);
void cmd_reg_create_val(struct client_info *info, int argc, char *argv[]);
void cmd_reg_delete_val(struct client_info *info, int argc, char *argv[]);
void cmd_reg_delete_key(struct client_info *info, int argc, char *argv[]);
void cmd_reg_create_key(struct client_info *info, int argc, char *argv[]);
void cmd_reg_test_key_sec(struct client_info *info, int argc, char *argv[]);
void cmd_reg_get_key_sec(struct client_info *info, int argc, char *argv[]);
void cmd_reg_shutdown(struct client_info *info, int argc, char *argv[]);
void cmd_reg_abort_shutdown(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_samr.c  */

uint32 cmd_sam_ntchange_pwd(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_test(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_lookup_domain(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_lookup_names(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_lookup_rids(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_del_aliasmem(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_delete_dom_alias(struct client_info *info, int argc,
			      char *argv[]);
uint32 cmd_sam_add_aliasmem(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_create_dom_trusting(struct client_info *info, int argc,
				 char *argv[]);
uint32 cmd_sam_create_dom_user(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_create_dom_alias(struct client_info *info, int argc,
			      char *argv[]);
uint32 cmd_sam_del_groupmem(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_delete_dom_user(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_delete_dom_group(struct client_info *info, int argc,
			      char *argv[]);
uint32 cmd_sam_add_groupmem(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_create_dom_group(struct client_info *info, int argc,
			      char *argv[]);
uint32 cmd_sam_enum_users(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_query_groupmem(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_query_group(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_query_sec_obj(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_query_user(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_set_userinfo2(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_set_userinfo(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_query_dispinfo(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_query_dominfo(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_query_aliasmem(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_query_alias(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_enum_aliases(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_enum_groups(struct client_info *info, int argc, char *argv[]);
uint32 cmd_sam_enum_domains(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_spoolss.c  */

uint32 cmd_spoolss_enum_printers(struct client_info *info, int argc, char *argv[]);
uint32 cmd_spoolss_open_printer_ex(struct client_info *info, int argc, char *argv[]);
uint32 cmd_spoolss_getprinterdata(struct client_info *info, int argc, char *argv[]);
uint32 cmd_spoolss_enum_jobs(struct client_info *info, int argc, char *argv[]);
uint32 cmd_spoolss_enum_printerdata(struct client_info *info, int argc, char *argv[]);
uint32 cmd_spoolss_getprinter(struct client_info *info, int argc, char *argv[]);
uint32 cmd_spoolss_getprinterdriver(struct client_info *info, int argc, char *argv[]);
uint32 cmd_spoolss_enumprinterdrivers(struct client_info *info, int argc, char *argv[]);
uint32 cmd_spoolss_getprinterdriverdir(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_srvsvc.c  */

BOOL net_srv_get_info(struct client_info *info,
		      uint32 info_level, SRV_INFO_CTR * ctr);
void cmd_srv_query_info(struct client_info *info, int argc, char *argv[]);
BOOL msrpc_srv_enum_tprt(const char *dest_srv,
			 uint32 info_level,
			 SRV_TPRT_INFO_CTR * ctr, TPRT_INFO_FN(tprt_fn));
void cmd_srv_enum_tprt(struct client_info *info, int argc, char *argv[]);
void cmd_srv_enum_conn(struct client_info *info, int argc, char *argv[]);
void cmd_srv_enum_shares(struct client_info *info, int argc, char *argv[]);
void cmd_srv_share_get_info(struct client_info *info, int argc, char *argv[]);
void cmd_srv_share_del(struct client_info *info, int argc, char *argv[]);
void cmd_srv_enum_sess(struct client_info *info, int argc, char *argv[]);
void cmd_srv_enum_files(struct client_info *info, int argc, char *argv[]);
void cmd_time(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_svcctl.c  */

void svc_display_query_svc_cfg(const QUERY_SERVICE_CONFIG *cfg);
BOOL svc_query_service( POLICY_HND *pol_scm,
				const char *svc_name,
				SVC_QUERY_FN(svc_query_fn));
uint32 cmd_svc_info(struct client_info *info, int argc, char *argv[]);
BOOL msrpc_svc_enum(const char* srv_name,
				ENUM_SRVC_STATUS **svcs,
				uint32 *num_svcs,
				SVC_INFO_FN(info_fn),
				SVC_QUERY_FN(query_fn));
uint32 cmd_svc_enum(struct client_info *info, int argc, char *argv[]);
uint32 cmd_svc_stop(struct client_info *info, int argc, char *argv[]);
uint32 cmd_svc_start(struct client_info *info, int argc, char *argv[]);
uint32 cmd_svc_set(struct client_info *info, int argc, char *argv[]);
uint32 cmd_svc_unk3(struct client_info *info, int argc, char *argv[]);
uint32 cmd_svc_get_sec(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmd_wkssvc.c  */

void cmd_wks_query_info(struct client_info *info, int argc, char *argv[]);

/*The following definitions come from  rpcclient/cmdat.c  */


/*The following definitions come from  rpcclient/cmdat_cmds.c  */

void add_at_commands(void);

/*The following definitions come from  rpcclient/dfs_cmds.c  */

void add_dfs_commands(void);

/*The following definitions come from  rpcclient/display_at.c  */

void display_at_enum_info(FILE *out_hnd, enum action_type action, 
				uint32 num_jobs, const AT_ENUM_INFO *const jobs,
				char *const *const commands);
void display_at_job_info(FILE *out_hnd, enum action_type action, 
		     AT_JOB_INFO *const job, fstring command);

/*The following definitions come from  rpcclient/display_dfs.c  */

void display_dfs_enum(FILE *hnd, char *srv_name, DFS_INFO_CTR *ctr);

/*The following definitions come from  rpcclient/display_event.c  */

void display_eventlog_eventrecord(FILE *out_hnd, enum action_type action, EVENTLOGRECORD *const ev);

/*The following definitions come from  rpcclient/display_reg.c  */

char *get_reg_val_type_str(uint32 type);
void display_reg_value_info(FILE *out_hnd, enum action_type action, 
				const char *val_name, 
				uint32 val_type, const BUFFER2 *value);
void display_reg_key_info(FILE *out_hnd, enum action_type action, 
				const char *key_name, time_t key_mod_time);

/*The following definitions come from  rpcclient/display_sam.c  */

void display_alias_members(FILE *out_hnd, enum action_type action, 
				uint32 num_mem, char *const *const sid_mem, 
				uint32 *const type);
void display_alias_rid_info(FILE *out_hnd, enum action_type action, 
				DOM_SID *const sid, 
				uint32 num_rids, uint32 *const rid);
void display_group_members(FILE *out_hnd, enum action_type action, 
				uint32 num_mem, char *const *const name, uint32 *const type);
void display_group_info_ctr(FILE *out_hnd, enum action_type action, 
				GROUP_INFO_CTR *const ctr);
void display_group_rid_info(FILE *out_hnd, enum action_type action, 
				uint32 num_gids, DOM_GID *const gid);
void display_alias_name_info(FILE *out_hnd, enum action_type action, 
				uint32 num_aliases, fstring *const alias_name, const uint32 *const num_als_usrs);
void display_alias_info_ctr(FILE *out_hnd, enum action_type action, 
				ALIAS_INFO_CTR *const ctr);
void display_sam_user_info_21(FILE *out_hnd, enum action_type action, SAM_USER_INFO_21 *const usr);
void display_sam_unk_ctr(FILE *out_hnd, enum action_type action, 
				uint32 switch_value, SAM_UNK_CTR *const ctr);
void display_sam_disp_info_ctr(FILE *out_hnd, enum action_type action, 
				uint16 level, uint32 count,
				SAM_DISPINFO_CTR *const ctr);

/*The following definitions come from  rpcclient/display_sec.c  */

void display_sec_desc(FILE *out_hnd, enum action_type action, SEC_DESC *const sec);

/*The following definitions come from  rpcclient/display_spool.c  */

void display_printer_info_ctr(FILE *out_hnd, enum action_type action, uint32 level,
				uint32 count, PRINTER_INFO_CTR ctr);
void display_printer_enumdata(FILE *out_hnd, enum action_type action, uint32 idx, 
				uint32 valuelen, uint16 *value, uint32 rvaluelen,
				uint32 type, 
				uint32 datalen, uint8 *data, uint32 rdatalen);
void display_job_info_2(FILE *out_hnd, enum action_type action, 
		JOB_INFO_2 *const i2);
void display_job_info_1(FILE *out_hnd, enum action_type action, 
		JOB_INFO_1 *const i1);
void display_job_info_2_ctr(FILE *out_hnd, enum action_type action, 
				uint32 count, JOB_INFO_2 *const *const ctr);
void display_job_info_1_ctr(FILE *out_hnd, enum action_type action, 
				uint32 count, JOB_INFO_1 *const *const ctr);
void display_job_info_ctr(FILE *out_hnd, enum action_type action, 
				uint32 level, uint32 count,
				void *const *const ctr);
void display_printer_driver_ctr(FILE *out_hnd, enum action_type action, uint32 level,
				uint32 count, PRINTER_DRIVER_CTR ctr);
void display_printerdriverdir_info_ctr(FILE *out_hnd, enum action_type action, uint32 level,
				DRIVER_DIRECTORY_CTR ctr);

/*The following definitions come from  rpcclient/display_srv.c  */

char *get_file_oplock_str(uint32 op_type);
void display_srv_info_ctr(FILE * out_hnd, enum action_type action,
			  const SRV_INFO_CTR * ctr);
void display_srv_conn_info_ctr(FILE * out_hnd, enum action_type action,
			       SRV_CONN_INFO_CTR * const ctr);
void display_tprt_info_0(FILE * out_hnd, enum action_type action,
			 TPRT_INFO_0 * const info0,
			 TPRT_INFO_0_STR * const str0);
void display_srv_tprt_info_0_ctr(FILE * out_hnd, enum action_type action,
				 const SRV_TPRT_INFO_0 * const ctr);
void display_srv_tprt_info_ctr(FILE * out_hnd, enum action_type action,
			       const SRV_TPRT_INFO_CTR * const ctr);
void display_srv_share_info_ctr(FILE * out_hnd, enum action_type action,
				SRV_SHARE_INFO_CTR * const ctr);
void display_share_info_ctr(FILE * out_hnd, enum action_type action,
			    SHARE_INFO_CTR * const ctr);
void display_srv_file_info_ctr(FILE * out_hnd, enum action_type action,
			       SRV_FILE_INFO_CTR * const ctr);
void display_srv_sess_info_0_ctr(FILE * out_hnd, enum action_type action,
				 SRV_SESS_INFO_0 * const ctr);
void display_srv_sess_info_1_ctr(FILE * out_hnd, enum action_type action,
				 SRV_SESS_INFO_1 * const ctr);
void display_srv_sess_info_ctr(FILE * out_hnd, enum action_type action,
			       SRV_SESS_INFO_CTR * const ctr);
void display_server(FILE * out_hnd, enum action_type action,
		    char *const sname, uint32 type, char *const comment);
void display_share(FILE * out_hnd, enum action_type action,
		   char *const sname, uint32 type, char *const comment);
void display_share2(FILE * out_hnd, enum action_type action,
		    char *const sname, uint32 type, char *const comment,
		    uint32 perms, uint32 max_uses, uint32 num_uses,
		    char *const path, char *const password);
void display_name(FILE * out_hnd, enum action_type action, char *const sname);

/*The following definitions come from  rpcclient/display_svc.c  */

char *get_svc_start_type_str(uint32 type);
void display_query_svc_cfg(FILE *out_hnd, enum action_type action, 
				const QUERY_SERVICE_CONFIG *const cfg);
void display_svc_info(FILE *out_hnd, enum action_type action,
				const ENUM_SRVC_STATUS *const svc);

/*The following definitions come from  rpcclient/display_sync.c  */

void display_sam_sync_ctr(FILE *out_hnd, enum action_type action, 
				SAM_DELTA_HDR *const delta, 
				SAM_DELTA_CTR *const ctr);
void display_sam_sync(FILE *out_hnd, enum action_type action, 
				SAM_DELTA_HDR *const deltas, 
				SAM_DELTA_CTR *const ctr, 
				uint32 num);

/*The following definitions come from  rpcclient/display_wks.c  */

void display_wks_info_100(FILE * out_hnd, enum action_type action,
			  const WKS_INFO_100 * const svc);

/*The following definitions come from  rpcclient/eventlog.c  */

int main(int argc, char *argv[]);

/*The following definitions come from  rpcclient/eventlog_cmds.c  */

void add_evt_commands(void);

/*The following definitions come from  rpcclient/lsa.c  */


/*The following definitions come from  rpcclient/lsa_cmds.c  */

void add_lsa_commands(void);

/*The following definitions come from  rpcclient/net.c  */


/*The following definitions come from  rpcclient/net_cmds.c  */

void add_net_commands(void);

/*The following definitions come from  rpcclient/netlogon_cmds.c  */

void add_ntl_commands(void);

/*The following definitions come from  rpcclient/regedit.c  */


/*The following definitions come from  rpcclient/regedit_cmds.c  */

void add_reg_commands(void);

/*The following definitions come from  rpcclient/rpcclient.c  */


/*The following definitions come from  rpcclient/samedit.c  */


/*The following definitions come from  rpcclient/samedit_cmds.c  */

void add_sam_commands(void);

/*The following definitions come from  rpcclient/spoolss.c  */

int main(int argc, char *argv[]);

/*The following definitions come from  rpcclient/spoolss_cmds.c  */

void add_spl_commands(void);

/*The following definitions come from  rpcclient/svcctrl.c  */

int main(int argc, char *argv[]);

/*The following definitions come from  rpcclient/svcctrl_cmds.c  */

void add_svc_commands(void);

/*The following definitions come from  samrd/samr_util.c  */

uint32 samr_make_usr_obj_sd(SEC_DESC_BUF *buf, DOM_SID *usr_sid);

/*The following definitions come from  samrd/samrd.c  */

msrpc_service_fns *get_service_fns(void);

/*The following definitions come from  samrd/srv_samr_als_tdb.c  */

uint32 _samr_add_aliasmem(const POLICY_HND *alias_pol, const DOM_SID *sid);
uint32 _samr_del_aliasmem(const POLICY_HND *alias_pol, const DOM_SID *sid);
uint32 _samr_query_aliasinfo(const POLICY_HND *alias_pol,
				uint16 switch_level,
				ALIAS_INFO_CTR *ctr);
uint32 _samr_delete_dom_alias(POLICY_HND *alias_pol);
uint32 _samr_query_aliasmem(const POLICY_HND *alias_pol, 
				uint32 *num_mem, DOM_SID2 **sid);
uint32 _samr_create_dom_alias(const POLICY_HND *domain_pol,
				const UNISTR2 *uni_acct_name,
				uint32 access_mask,
				POLICY_HND *alias_pol, uint32 *rid);
uint32 _samr_open_alias(const POLICY_HND *domain_pol,
					uint32 access_mask, uint32 alias_rid,
					POLICY_HND *alias_pol);

/*The following definitions come from  samrd/srv_samr_dom_nt5ldap.c  */

uint32 _samr_open_domain(const POLICY_HND *connect_pol,
				uint32 ace_perms,
				const DOM_SID *sid,
				POLICY_HND *domain_pol);
uint32 _samr_enum_dom_users(  const POLICY_HND *pol, uint32 *start_idx, 
				uint16 acb_mask, uint16 unk_1, uint32 size,
				SAM_ENTRY **sam,
				UNISTR2 **uni_acct_name,
				uint32 *num_sam_users);
uint32 _samr_enum_dom_groups(const POLICY_HND *pol,
				uint32 *start_idx, uint32 size,
				SAM_ENTRY **sam,
				UNISTR2 **uni_acct_name,
				uint32 *num_sam_groups);
uint32 _samr_enum_dom_aliases(const POLICY_HND *pol,
					uint32 *start_idx, uint32 size,
					SAM_ENTRY **sam,
					UNISTR2 **uni_acct_name,
					uint32 *num_sam_aliases);
uint32 _samr_query_dispinfo(  const POLICY_HND *domain_pol, uint16 level,
					uint32 start_idx,
					uint32 max_entries,
					uint32 max_size,
					uint32 *data_size,
					uint32 *num_entries,
					SAM_DISPINFO_CTR *ctr);
uint32 _samr_lookup_names(const POLICY_HND *dom_pol,
				
			uint32 num_names,
			uint32 flags,
			uint32 ptr,
			const UNISTR2 *uni_name,

			uint32 *num_rids,
			uint32 rid[MAX_SAM_ENTRIES],
			uint32 *num_types,
			uint32 type[MAX_SAM_ENTRIES]);
uint32 _samr_lookup_rids(const POLICY_HND *dom_pol,
				uint32 num_rids, uint32 flags,
				const uint32 *rids,
				uint32 *num_names,
				UNIHDR **hdr_name, UNISTR2** uni_name,
				uint32 **types);
uint32 _samr_query_dom_info(const POLICY_HND *domain_pol,
				uint16 switch_value,
				SAM_UNK_CTR *ctr);
uint32 _samr_set_groupinfo(const POLICY_HND *pol,
				uint16 switch_level,
				const GROUP_INFO_CTR* ctr);
uint32 _samr_unknown_2d(const POLICY_HND *domain_pol, const DOM_SID *sid);

/*The following definitions come from  samrd/srv_samr_dom_tdb.c  */

uint32 _samr_open_domain(const POLICY_HND *connect_pol,
			 uint32 ace_perms,
			 const DOM_SID * sid, POLICY_HND *domain_pol);
uint32 _samr_enum_dom_users(const POLICY_HND *pol, uint32 * start_idx,
			    uint16 acb_mask, uint16 unk_1, uint32 size,
			    SAM_ENTRY ** sam,
			    UNISTR2 ** uni_acct_name, uint32 * num_sam_users);
uint32 _samr_enum_dom_groups(const POLICY_HND *pol,
			     uint32 * start_idx, uint32 size,
			     SAM_ENTRY ** sam,
			     UNISTR2 ** uni_acct_name,
			     uint32 * num_sam_groups);
uint32 _samr_enum_dom_aliases(const POLICY_HND *pol,
			      uint32 * start_idx, uint32 size,
			      SAM_ENTRY ** sam,
			      UNISTR2 ** uni_acct_name,
			      uint32 * num_sam_aliases);
uint32 _samr_query_dispinfo(const POLICY_HND *domain_pol, uint16 level,
			    uint32 start_idx,
			    uint32 max_entries,
			    uint32 max_size,
			    uint32 * data_size,
			    uint32 * num_entries, SAM_DISPINFO_CTR * ctr);
BOOL dom_user_traverse(const DOM_SID * dom_sid,
		       int (*fn) (TDB_CONTEXT *, void *), void *state);
uint32 _samr_lookup_names(const POLICY_HND *dom_pol,
			  uint32 num_names,
			  uint32 flags,
			  uint32 ptr,
			  const UNISTR2 * uni_name,
			  uint32 * num_rids,
			  uint32 rid[MAX_SAM_ENTRIES],
			  uint32 * num_types, uint32 type[MAX_SAM_ENTRIES]);
uint32 _samr_lookup_rids(const POLICY_HND *dom_pol,
			 uint32 num_rids, uint32 flags,
			 const uint32 * rids,
			 uint32 * num_names,
			 UNIHDR ** hdr_name, UNISTR2 ** uni_name,
			 uint32 ** types);
uint32 _samr_query_dom_info(const POLICY_HND *domain_pol,
			    uint16 switch_value, SAM_UNK_CTR * ctr);
uint32 _samr_unknown_2d(const POLICY_HND *domain_pol, const DOM_SID * sid);

/*The following definitions come from  samrd/srv_samr_grp_tdb.c  */

uint32 _samr_add_groupmem(const POLICY_HND *pol, uint32 rid, uint32 unknown);
uint32 _samr_del_groupmem(const POLICY_HND *pol, uint32 rid);
uint32 _samr_delete_dom_group(POLICY_HND *group_pol);
uint32 _samr_query_groupmem(const POLICY_HND *group_pol,
			    uint32 * num_mem, uint32 ** rid, uint32 ** attr);
uint32 _samr_set_groupinfo(const POLICY_HND *pol,
			   uint16 switch_level, const GROUP_INFO_CTR * ctr);
uint32 _samr_query_groupinfo(const POLICY_HND *pol,
			     uint16 switch_level, GROUP_INFO_CTR * ctr);
uint32 _samr_create_dom_group(const POLICY_HND *domain_pol,
			      const UNISTR2 * uni_acct_name,
			      uint32 access_mask,
			      POLICY_HND *group_pol, uint32 * group_rid);
uint32 _samr_open_group(const POLICY_HND *domain_pol, uint32 access_mask,
			uint32 group_rid, POLICY_HND *group_pol);

/*The following definitions come from  samrd/srv_samr_nt5ldap.c  */

BOOL set_nt5ldaprid(struct policy_cache *cache, POLICY_HND *hnd,
				LDAPDB *hds, uint32 rid);
BOOL get_nt5ldaprid(struct policy_cache *cache, const POLICY_HND *hnd,
				LDAPDB **hds, uint32 *rid);
BOOL set_nt5ldapsam(struct policy_cache *cache, POLICY_HND *hnd,
				LDAPDB *hds);
BOOL get_nt5ldapsam(struct policy_cache *cache, const POLICY_HND *hnd,
				LDAPDB **hds);
BOOL set_nt5ldapdomsid(struct policy_cache *cache, POLICY_HND *hnd,
				LDAPDB *hds,
				const DOM_SID *sid);
BOOL get_nt5ldapdomsid(struct policy_cache *cache, const POLICY_HND *hnd,
				LDAPDB **hds,
				DOM_SID *sid);
BOOL set_nt5ldapsid(struct policy_cache *cache, POLICY_HND *hnd,
				LDAPDB *hds, const DOM_SID *sid);
BOOL get_nt5ldapsid(struct policy_cache *cache, const POLICY_HND *hnd,
				LDAPDB **hds, DOM_SID *sid);
uint32 samr_open_by_nt5ldaprid( LDAPDB *hds,
				const POLICY_HND *parent_pol,
				POLICY_HND *pol, uint32 access_mask, uint32 rid);
BOOL pwdbsam_initialise(void);

/*The following definitions come from  samrd/srv_samr_passdb.c  */

uint32 _samr_close(POLICY_HND * hnd);
uint32 _samr_unknown_2d(const POLICY_HND * domain_pol, const DOM_SID * sid);
uint32 _samr_open_domain(const POLICY_HND * connect_pol,
			 uint32 ace_perms,
			 const DOM_SID * sid, POLICY_HND * domain_pol);
uint32 _samr_get_usrdom_pwinfo(const POLICY_HND * user_pol,
			       uint16 * unknown_0,
			       uint16 * unknown_1, uint32 * unknown_2);
uint32 _samr_query_sec_obj(const POLICY_HND * user_pol, SEC_DESC_BUF * buf);
uint32 _samr_enum_dom_users(const POLICY_HND * pol, uint32 * start_idx,
			    uint16 acb_mask, uint16 unk_1, uint32 size,
			    SAM_ENTRY ** sam,
			    UNISTR2 ** uni_acct_name, uint32 * num_sam_users);
uint32 _samr_add_groupmem(const POLICY_HND * pol, uint32 rid, uint32 unknown);
uint32 _samr_del_groupmem(const POLICY_HND * pol, uint32 rid);
uint32 _samr_add_aliasmem(const POLICY_HND * alias_pol, const DOM_SID * sid);
uint32 _samr_del_aliasmem(const POLICY_HND * alias_pol, const DOM_SID * sid);
uint32 _samr_enum_domains(const POLICY_HND * pol, uint32 * start_idx,
			  uint32 size,
			  SAM_ENTRY ** sam,
			  UNISTR2 ** uni_acct_name, uint32 * num_sam_users);
uint32 _samr_enum_dom_groups(const POLICY_HND * pol,
			     uint32 * start_idx, uint32 size,
			     SAM_ENTRY ** sam,
			     UNISTR2 ** uni_acct_name,
			     uint32 * num_sam_groups);
uint32 _samr_enum_dom_aliases(const POLICY_HND * pol,
			      uint32 * start_idx, uint32 size,
			      SAM_ENTRY ** sam,
			      UNISTR2 ** uni_acct_name,
			      uint32 * num_sam_aliases);
uint32 _samr_query_dispinfo(const POLICY_HND * domain_pol, uint16 level,
			    uint32 start_idx,
			    uint32 max_entries,
			    uint32 max_size,
			    uint32 * data_size,
			    uint32 * num_entries, SAM_DISPINFO_CTR * ctr);
uint32 _samr_delete_dom_user(POLICY_HND *user_pol);
uint32 _samr_delete_dom_group(POLICY_HND * group_pol);
uint32 _samr_query_groupmem(const POLICY_HND * group_pol,
			    uint32 * num_mem, uint32 ** rid, uint32 ** attr);
uint32 _samr_set_groupinfo(const POLICY_HND * pol,
			   uint16 switch_level, const GROUP_INFO_CTR * ctr);
uint32 _samr_query_groupinfo(const POLICY_HND * pol,
			     uint16 switch_level, GROUP_INFO_CTR * ctr);
uint32 _samr_query_aliasinfo(const POLICY_HND * alias_pol,
			     uint16 switch_level, ALIAS_INFO_CTR * ctr);
uint32 _samr_query_useraliases(const POLICY_HND * pol,
			       const uint32 * ptr_sid, const DOM_SID2 * sid,
			       uint32 * num_aliases, uint32 ** rid);
uint32 _samr_delete_dom_alias(POLICY_HND * alias_pol);
uint32 _samr_query_aliasmem(const POLICY_HND * alias_pol,
			    uint32 * num_mem, DOM_SID2 ** sid);
uint32 _samr_lookup_names(const POLICY_HND * pol,
			  uint32 num_names1,
			  uint32 flags,
			  uint32 ptr,
			  const UNISTR2 * uni_name,
			  uint32 * num_rids1,
			  uint32 rid[MAX_SAM_ENTRIES],
			  uint32 * num_types1, uint32 type[MAX_SAM_ENTRIES]);
uint32 _samr_chgpasswd_user(const UNISTR2 * uni_dest_host,
			    const UNISTR2 * uni_user_name,
			    const char nt_newpass[516],
			    const uchar nt_oldhash[16],
			    const char lm_newpass[516],
			    const uchar lm_oldhash[16]);
uint32 _samr_get_dom_pwinfo(const UNISTR2 * uni_srv_name,
			    uint16 * unk_0, uint16 * unk_1
#if 0
			    , uint16 * unk_2
#endif
			    );
uint32 _samr_lookup_rids(const POLICY_HND * pol,
			 uint32 num_rids, uint32 flags,
			 const uint32 * rids,
			 uint32 * num_names,
			 UNIHDR ** hdr_name, UNISTR2 ** uni_name,
			 uint32 ** types);
uint32 _samr_open_user(const POLICY_HND * domain_pol,
		       uint32 access_mask, uint32 user_rid,
		       POLICY_HND * user_pol);
uint32 _samr_query_userinfo(const POLICY_HND * pol, uint16 switch_value,
			    SAM_USERINFO_CTR * ctr);
uint32 _samr_set_userinfo(const POLICY_HND * pol, uint16 switch_value,
			  SAM_USERINFO_CTR * ctr);
uint32 _samr_set_userinfo2(const POLICY_HND * pol, uint16 switch_value,
			   SAM_USERINFO_CTR * ctr);
uint32 _samr_query_usergroups(const POLICY_HND * pol,
			      uint32 * num_groups, DOM_GID ** gids);
uint32 _samr_create_dom_alias(const POLICY_HND * domain_pol,
			      const UNISTR2 * uni_acct_name,
			      uint32 access_mask,
			      POLICY_HND * alias_pol, uint32 * rid);
uint32 _samr_create_dom_group(const POLICY_HND * domain_pol,
			      const UNISTR2 * uni_acct_name,
			      uint32 access_mask,
			      POLICY_HND * group_pol, uint32 * rid);
uint32 _samr_query_dom_info(const POLICY_HND * domain_pol,
			    uint16 switch_value, SAM_UNK_CTR * ctr);
uint32 _samr_create_user(const POLICY_HND * domain_pol,
			 const UNISTR2 * uni_username,
			 uint16 acb_info, uint32 access_mask,
			 POLICY_HND * user_pol,
			 uint32 * unknown_0, uint32 * user_rid);
uint32 _samr_connect_anon(const UNISTR2 * srv_name, uint32 access_mask,
			  POLICY_HND * connect_pol);
uint32 _samr_connect(const UNISTR2 * srv_name, uint32 access_mask,
		     POLICY_HND * connect_pol);
uint32 _samr_open_alias(const POLICY_HND * domain_pol,
			uint32 access_mask, uint32 alias_rid,
			POLICY_HND * alias_pol);
uint32 _samr_open_group(const POLICY_HND * domain_pol, uint32 access_mask,
			uint32 group_rid, POLICY_HND * group_pol);
uint32 _samr_lookup_domain(const POLICY_HND * connect_pol,
			   const UNISTR2 * uni_domain, DOM_SID * dom_sid);
BOOL pwdbsam_initialise(void);

/*The following definitions come from  samrd/srv_samr_sam_tdb.c  */

uint32 _samr_enum_domains(const POLICY_HND *pol, uint32 *start_idx, 
				uint32 size,
				SAM_ENTRY **sam,
				UNISTR2 **uni_acct_name,
				uint32 *num_sam_users);
uint32 _samr_connect_anon(const UNISTR2 *srv_name, uint32 access_mask,
				POLICY_HND *connect_pol);
uint32 _samr_connect(const UNISTR2 *srv_name, uint32 access_mask,
				POLICY_HND *connect_pol);
uint32 _samr_lookup_domain(const POLICY_HND *connect_pol,
				const UNISTR2 *uni_domain,
				DOM_SID *dom_sid);
uint32 _samr_close(POLICY_HND *hnd);
uint32 _samr_chgpasswd_user( const UNISTR2 *uni_dest_host,
				const UNISTR2 *uni_user_name,
				const char nt_newpass[516],
				const uchar nt_oldhash[16],
				const char lm_newpass[516],
				const uchar lm_oldhash[16]);
uint32 _samr_get_dom_pwinfo(const UNISTR2 * uni_srv_name,
			    uint16 * unk_0, uint16 * unk_1
#if 0
			    , uint16 * unk_2
#endif
			    );
uint32 _samr_query_sec_obj(const POLICY_HND *pol, SEC_DESC_BUF *buf);

/*The following definitions come from  samrd/srv_samr_tdb.c  */

BOOL set_tdbrid(struct policy_cache *cache, POLICY_HND *hnd,
		TDB_CONTEXT * usr_tdb,
		TDB_CONTEXT * grp_tdb, TDB_CONTEXT * als_tdb, uint32 rid);
BOOL get_tdbrid(struct policy_cache *cache, const POLICY_HND *hnd,
		TDB_CONTEXT ** usr_tdb,
		TDB_CONTEXT ** grp_tdb, TDB_CONTEXT ** als_tdb, uint32 * rid);
BOOL set_tdbsam(struct policy_cache *cache, POLICY_HND *hnd,
		TDB_CONTEXT * tdb);
BOOL get_tdbsam(struct policy_cache *cache, const POLICY_HND *hnd,
		TDB_CONTEXT ** tdb);
BOOL set_tdbdomsid(struct policy_cache *cache, POLICY_HND *hnd,
		   TDB_CONTEXT * usr_tdb,
		   TDB_CONTEXT * usg_tdb,
		   TDB_CONTEXT * usa_tdb,
		   TDB_CONTEXT * grp_tdb,
		   TDB_CONTEXT * als_tdb, const DOM_SID * sid);
BOOL get_tdbdomsid(struct policy_cache *cache, const POLICY_HND *hnd,
		   TDB_CONTEXT ** usr_tdb,
		   TDB_CONTEXT ** usg_tdb,
		   TDB_CONTEXT ** usa_tdb,
		   TDB_CONTEXT ** grp_tdb,
		   TDB_CONTEXT ** als_tdb, DOM_SID * sid);
BOOL set_tdbsid(struct policy_cache *cache, POLICY_HND *hnd,
		TDB_CONTEXT * tdb, const DOM_SID * sid);
BOOL get_tdbsid(struct policy_cache *cache, const POLICY_HND *hnd,
		TDB_CONTEXT ** tdb, DOM_SID * sid);
TDB_CONTEXT *open_usr_db(const DOM_SID * sid, uint32 rid, int perms);
uint32 samr_open_user_tdb(const POLICY_HND *parent_pol,
			  const DOM_SID * sid,
			  TDB_CONTEXT * usr_tdb,
			  POLICY_HND *pol, uint32 ace_perms, uint32 rid);

/*The following definitions come from  samrd/srv_samr_tdb_init.c  */

uint32 initialise_dom_tdb(const DOM_SID * sid);
uint32 initialise_sam_tdb(const char *sam_name, const DOM_SID * sam_sid);
BOOL pwdbsam_initialise(void);

/*The following definitions come from  samrd/srv_samr_usr_nt5ldap.c  */

uint32 _samr_get_usrdom_pwinfo(const POLICY_HND *user_pol,
				uint16 *unknown_0,
				uint16 *unknown_1,
				uint32 *unknown_2);
uint32 _samr_query_sec_obj(const POLICY_HND *pol, SEC_DESC_BUF *buf);
uint32 _samr_query_usergroups(const POLICY_HND *pol,
				uint32 *num_groups,
				DOM_GID **gids);
uint32 _samr_query_useraliases(const POLICY_HND *pol,
				const uint32 *ptr_sid, const DOM_SID2 *sid,
				uint32 *num_aliases, uint32 **rid);
uint32 _samr_open_user(const POLICY_HND *domain_pol,
					uint32 access_mask, uint32 user_rid, 
					POLICY_HND *user_pol);
uint32 _samr_query_userinfo(const POLICY_HND *pol, uint16 switch_value,
				SAM_USERINFO_CTR *ctr);
uint32 _samr_set_userinfo(const POLICY_HND *pol, uint16 switch_value,
				SAM_USERINFO_CTR *ctr);
uint32 _samr_set_userinfo2(const POLICY_HND *pol, uint16 switch_value,
				SAM_USERINFO_CTR *ctr);
uint32 _samr_create_user(const POLICY_HND *domain_pol,
				const UNISTR2 *uni_username,
				uint16 acb_info, uint32 access_mask, 
				POLICY_HND *user_pol,
				uint32 *unknown_0, uint32 *user_rid);
uint32 _samr_delete_dom_user(POLICY_HND *user_pol);

/*The following definitions come from  samrd/srv_samr_usr_tdb.c  */

BOOL tdb_lookup_user(TDB_CONTEXT * tdb, SAM_USER_INFO_21 * usr);
uint32 _samr_get_usrdom_pwinfo(const POLICY_HND *user_pol,
			       uint16 *unknown_0,
			       uint16 *unknown_1, uint32 *unknown_2);
uint32 _samr_query_usergroups(const POLICY_HND *pol,
			      uint32 *num_groups, DOM_GID ** gids);
uint32 _samr_query_useraliases(const POLICY_HND *domain_pol,
			       const uint32 *ptr_sid, const DOM_SID2 * sid,
			       uint32 *num_aliases, uint32 **rid);
uint32 _samr_open_user(const POLICY_HND *domain_pol,
		       uint32 access_mask, uint32 user_rid,
		       POLICY_HND *user_pol);
uint32 _samr_query_userinfo(const POLICY_HND *pol, uint16 switch_value,
			    SAM_USERINFO_CTR * ctr);
uint32 _samr_set_userinfo(const POLICY_HND *pol, uint16 switch_value,
			  SAM_USERINFO_CTR * ctr);
uint32 _samr_set_userinfo2(const POLICY_HND *pol, uint16 switch_value,
			   SAM_USERINFO_CTR * ctr);
uint32 _samr_create_user(const POLICY_HND *domain_pol,
			 const UNISTR2 *uni_username,
			 uint16 acb_info, uint32 access_mask,
			 POLICY_HND *user_pol,
			 uint32 *unknown_0, uint32 *user_rid);
uint32 _samr_delete_dom_user(POLICY_HND *user_pol);

/*The following definitions come from  smbd/afsticket.c  */

int get_afs_ticket_from_srvtab(void);
pid_t get_renewed_ticket(connection_struct* conn);

/*The following definitions come from  smbd/blocking.c  */

BOOL push_blocking_lock_request( char *inbuf, int length, int lock_timeout, int lock_num);
void remove_pending_lock_requests_by_fid(files_struct *fsp);
void remove_pending_lock_requests_by_mid(int mid);
BOOL blocking_locks_pending(void);
void process_blocking_lock_queue(time_t t);

/*The following definitions come from  smbd/challenge.c  */

void generate_next_challenge(char *challenge);
BOOL set_challenge(unsigned char *challenge);
BOOL last_challenge(unsigned char *challenge);

/*The following definitions come from  smbd/chgpasswd.c  */

BOOL pass_oem_change(const char *user,
		     const uchar * lmdata, const uchar * lmhash,
		     const uchar * ntdata, const uchar * nthash);
BOOL update_smbpassword_file(const char *user, const char *password);

/*The following definitions come from  smbd/close.c  */

int close_file(files_struct *fsp, BOOL normal_close);

/*The following definitions come from  smbd/conn.c  */

void conn_init(void);
int conn_num_open(void);
BOOL conn_snum_used(int snum);
connection_struct *conn_find(int cnum);
connection_struct *conn_new(void);
void conn_close_all(void);
BOOL conn_idle_all(time_t t, int deadtime);
void conn_free(connection_struct *conn);

/*The following definitions come from  smbd/connection.c  */

BOOL yield_connection(connection_struct *conn,char *name,int max_connections);
BOOL claim_connection(connection_struct *conn,char *name,int max_connections,BOOL Clear);

/*The following definitions come from  smbd/dfree.c  */

SMB_BIG_UINT sys_disk_free(char *path, BOOL small_query, 
                           SMB_BIG_UINT *bsize,SMB_BIG_UINT *dfree,SMB_BIG_UINT *dsize);

/*The following definitions come from  smbd/dir.c  */

void init_dptrs(void);
char *dptr_path(int key);
char *dptr_wcard(int key);
BOOL dptr_set_wcard(int key, char *wcard);
BOOL dptr_set_attr(int key, uint16 attr);
uint16 dptr_attr(int key);
void dptr_close(int *key);
void dptr_closecnum(connection_struct *conn);
void dptr_idlecnum(connection_struct *conn);
void dptr_closepath(char *path,uint16 spid);
int dptr_create(connection_struct *conn,char *path, BOOL old_handle, BOOL expect_close,uint16 spid);
BOOL dptr_fill(char *buf1,unsigned int key);
void *dptr_fetch(char *buf,int *num);
void *dptr_fetch_lanman2(int dptr_num);
BOOL dir_check_ftype(connection_struct *conn,int mode,SMB_STRUCT_STAT *st,int dirtype);
BOOL get_dir_entry(connection_struct *conn,char *mask,int dirtype,char *fname,
                   SMB_OFF_T *size,int *mode,time_t *date,BOOL check_descend);
void *OpenDir(connection_struct *conn, char *name, BOOL use_veto);
void CloseDir(void *p);
char *ReadDirName(void *p);
BOOL SeekDir(void *p,int pos);
int TellDir(void *p);
void DirCacheAdd( char *path, char *name, char *dname, int snum );
char *DirCacheCheck( char *path, char *name, int snum );
void DirCacheFlush(int snum);

/*The following definitions come from  smbd/dosmode.c  */

mode_t unix_mode(connection_struct *conn,int dosmode,const char *fname);
int dos_mode(connection_struct *conn,char *path,SMB_STRUCT_STAT *sbuf);
int file_chmod(connection_struct *conn,char *fname,int dosmode,SMB_STRUCT_STAT *st);
int file_utime(connection_struct *conn, char *fname, struct utimbuf *times);
BOOL set_filetime(connection_struct *conn, char *fname, time_t mtime);

/*The following definitions come from  smbd/error.c  */

int cached_error_packet(char *inbuf,char *outbuf,files_struct *fsp,int line);
int unix_error_packet(char *inbuf,char *outbuf,int def_class,uint32 def_code,int line);
int error_packet(char *inbuf,char *outbuf,int error_class,uint32 error_code,int line);

/*The following definitions come from  smbd/fileio.c  */

SMB_OFF_T seek_file(files_struct *fsp,SMB_OFF_T pos);
BOOL read_from_write_cache(files_struct *fsp,char *data,SMB_OFF_T pos,size_t n);
ssize_t read_file(files_struct *fsp,char *data,SMB_OFF_T pos,size_t n);
ssize_t write_file(files_struct *fsp, char *data, SMB_OFF_T pos, size_t n);
void delete_write_cache(files_struct *fsp);
void set_filelen_write_cache(files_struct *fsp, SMB_OFF_T file_size);
ssize_t flush_write_cache(files_struct *fsp, enum flush_reason_enum reason);
void sync_file(connection_struct *conn, files_struct *fsp);

/*The following definitions come from  smbd/filename.c  */

BOOL unix_convert(char *name,connection_struct *conn,char *saved_last_component, 
                  BOOL *bad_path, SMB_STRUCT_STAT *pst);
BOOL check_name(char *name,connection_struct *conn);

/*The following definitions come from  smbd/files.c  */

files_struct *file_new(void );
void file_close_conn(connection_struct *conn);
void file_init(void);
void file_close_user(int vuid);
files_struct *file_find_dit(SMB_DEV_T dev, SMB_INO_T inode, struct timeval *tval);
files_struct *file_find_fsp(files_struct *orig_fsp);
files_struct *file_find_di_first(SMB_DEV_T dev, SMB_INO_T inode);
files_struct *file_find_di_next(files_struct *start_fsp);
files_struct *file_find_print(void);
void file_sync_all(connection_struct *conn);
void file_free(files_struct *fsp);
files_struct *file_fsp(char *buf, int where);
void file_chain_reset(void);
void file_chain_save(void);
void file_chain_restore(void);

/*The following definitions come from  smbd/ipc.c  */

void send_trans_reply(char *outbuf,
		      prs_struct *rdata,
		      prs_struct *rparam,
		      uint16 *setup, int lsetup, int max_data_ret,
		      BOOL pipe_data_outstanding);
int reply_trans(connection_struct *conn, char *inbuf,char *outbuf, int size, int bufsize);

/*The following definitions come from  smbd/lanman.c  */

int api_reply(connection_struct * conn, uint16 vuid, char *outbuf, char *data,
	      char *params,
	      int tdscnt, int tpscnt, int mdrcnt, int mprcnt);

/*The following definitions come from  smbd/mangle.c  */

BOOL is_mangled( char *s );
BOOL is_8_3( char *fname, BOOL check_case );
void reset_mangled_cache( void );
BOOL check_mangled_cache( char *s );
void mangle_name_83( char *s);
BOOL name_map_mangle(char *OutName, BOOL need83, BOOL cache83, int snum);

/*The following definitions come from  smbd/message.c  */

int reply_sends(connection_struct *conn,
		char *inbuf,char *outbuf, int dum_size, int dum_buffsize);
int reply_sendstrt(connection_struct *conn,
		   char *inbuf,char *outbuf, int dum_size, int dum_buffsize);
int reply_sendtxt(connection_struct *conn,
		  char *inbuf,char *outbuf, int dum_size, int dum_buffsize);
int reply_sendend(connection_struct *conn,
		  char *inbuf,char *outbuf, int dum_size, int dum_buffsize);

/*The following definitions come from  smbd/negprot.c  */

int reply_negprot(connection_struct *conn, 
		  char *inbuf,char *outbuf, int dum_size, 
		  int dum_buffsize);

/*The following definitions come from  smbd/noquotas.c  */

BOOL disk_quotas(char *path,SMB_BIG_UINT *bsize,SMB_BIG_UINT *dfree,SMB_BIG_UINT *dsize);

/*The following definitions come from  smbd/nttrans.c  */

void fail_next_srvsvc_open(void);
BOOL should_fail_next_srvsvc_open(const char *pipename);
int reply_ntcreate_and_X(connection_struct *conn,
			 char *inbuf,char *outbuf,int length,int bufsize);
int reply_ntcancel(connection_struct *conn,
		   char *inbuf,char *outbuf,int length,int bufsize);
int reply_nttranss(connection_struct *conn,
		   char *inbuf,char *outbuf,int length,int bufsize);
void remove_pending_change_notify_requests_by_fid(files_struct *fsp);
void remove_pending_change_notify_requests_by_filename(files_struct *fsp);
BOOL process_pending_change_notify_queue(time_t t);
BOOL change_notifies_pending(void);
int reply_nttrans(connection_struct *conn,
		  char *inbuf,char *outbuf,int length,int bufsize);

/*The following definitions come from  smbd/open.c  */

int fd_close(struct connection_struct *conn, files_struct *fsp);
files_struct *open_file_shared(connection_struct *conn,char *fname,int share_mode,int ofun,
		      mode_t mode,int oplock_request, int *Access,int *action);
files_struct *open_file_stat(connection_struct *conn,
		   char *fname, int smb_ofun, SMB_STRUCT_STAT *pst, int *action);
files_struct *open_directory(connection_struct *conn,
		   char *fname, int smb_ofun, mode_t unixmode, int *action);
BOOL check_file_sharing(connection_struct *conn,char *fname, BOOL rename_op);

/*The following definitions come from  smbd/oplock.c  */

int32 get_number_of_exclusive_open_oplocks(void);
BOOL receive_local_message(fd_set *fds, char *buffer, int buffer_len, int timeout);
BOOL set_file_oplock(files_struct *fsp, int oplock_type);
void release_file_oplock(files_struct *fsp);
BOOL remove_oplock(files_struct *fsp);
int setup_oplock_select_set( fd_set *fds);
BOOL process_local_message(char *buffer, int buf_size);
BOOL oplock_break_level2(files_struct *fsp, BOOL local_request, int token);
BOOL request_oplock_break(share_mode_entry *share_entry, 
                          SMB_DEV_T dev, SMB_INO_T inode);
BOOL attempt_close_oplocked_file(files_struct *fsp);
BOOL init_oplocks(void);

/*The following definitions come from  smbd/oplock_irix.c  */

struct kernel_oplocks *irix_init_kernel_oplocks(void) ;

/*The following definitions come from  smbd/oplock_linux.c  */

struct kernel_oplocks *linux_init_kernel_oplocks(void) ;

/*The following definitions come from  smbd/password.c  */

void add_session_user(char *user);
BOOL password_ok(const char *orig_user, const char *domain,
		 const char *smb_apasswd, int smb_apasslen,
		 const char *smb_ntpasswd, int smb_ntpasslen,
		 struct passwd *pwd, NET_USER_INFO_3 * info3);
BOOL authorise_login(int snum, char *user, char *domain,
		     char *password, int pwlen,
		     BOOL *guest, BOOL *force, const vuser_key * key);
BOOL check_hosts_equiv(char *user);

/*The following definitions come from  smbd/pipes.c  */

int reply_open_pipe_and_X(connection_struct * conn,
			  char *inbuf, char *outbuf, int length, int bufsize);
int reply_pipe_write(char *inbuf, char *outbuf, int length, int bufsize);
int reply_pipe_write_and_X(char *inbuf, char *outbuf, int length, int bufsize);
int reply_pipe_read_and_X(char *inbuf, char *outbuf, int length, int bufsize);
int reply_pipe_close(connection_struct * conn, char *inbuf, char *outbuf);

/*The following definitions come from  smbd/process.c  */

BOOL push_oplock_pending_smb_message(char *buf, int msg_len);
BOOL receive_next_smb(char *inbuf, int bufsize, int timeout);
void respond_to_all_remaining_local_messages(void);
void process_smb(char *inbuf, char *outbuf);
char *smb_fn_name(int type);
void construct_reply_common(char *inbuf,char *outbuf);
int chain_reply(char *inbuf,char *outbuf,int size,int bufsize);
void check_reload(int t);
void smbd_process(void);

/*The following definitions come from  smbd/reply.c  */

int reply_special(char *inbuf, char *outbuf);
int reply_tcon(connection_struct * conn,
	       char *inbuf, char *outbuf, int dum_size, int dum_buffsize);
int reply_tcon_and_X(connection_struct * conn, char *inbuf, char *outbuf,
		     int length, int bufsize);
int reply_unknown(char *inbuf, char *outbuf);
int reply_ioctl(connection_struct * conn,
		char *inbuf, char *outbuf, int dum_size, int dum_buffsize);
int reply_sesssetup_and_X(connection_struct * conn, char *inbuf, char *outbuf,
			  int length, int bufsize);
int reply_chkpth(connection_struct * conn, char *inbuf, char *outbuf,
		 int dum_size, int dum_buffsize);
int reply_getatr(connection_struct * conn, char *inbuf, char *outbuf,
		 int dum_size, int dum_buffsize);
int reply_setatr(connection_struct * conn, char *inbuf, char *outbuf,
		 int dum_size, int dum_buffsize);
int reply_dskattr(connection_struct * conn, char *inbuf, char *outbuf,
		  int dum_size, int dum_buffsize);
int reply_search(connection_struct * conn, char *inbuf, char *outbuf,
		 int dum_size, int dum_buffsize);
int reply_fclose(connection_struct * conn, char *inbuf, char *outbuf,
		 int dum_size, int dum_buffsize);
int reply_open(connection_struct * conn, char *inbuf, char *outbuf,
	       int dum_size, int dum_buffsize);
int reply_open_and_X(connection_struct * conn, char *inbuf, char *outbuf,
		     int length, int bufsize);
int reply_ulogoffX(connection_struct * conn, char *inbuf, char *outbuf,
		   int length, int bufsize);
int reply_mknew(connection_struct * conn, char *inbuf, char *outbuf,
		int dum_size, int dum_buffsize);
int reply_ctemp(connection_struct * conn, char *inbuf, char *outbuf,
		int dum_size, int dum_buffsize);
int reply_unlink(connection_struct * conn, char *inbuf, char *outbuf,
		 int dum_size, int dum_buffsize);
int reply_readbraw(connection_struct * conn, char *inbuf, char *outbuf,
		   int dum_size, int dum_buffsize);
int reply_lockread(connection_struct * conn, char *inbuf, char *outbuf,
		   int length, int dum_buffsiz);
int reply_read(connection_struct * conn, char *inbuf, char *outbuf, int size,
	       int dum_buffsize);
int reply_read_and_X(connection_struct * conn, char *inbuf, char *outbuf,
		     int length, int bufsize);
int reply_writebraw(connection_struct * conn, char *inbuf, char *outbuf,
		    int size, int dum_buffsize);
int reply_writeunlock(connection_struct * conn, char *inbuf, char *outbuf,
		      int size, int dum_buffsize);
int reply_write(connection_struct * conn, char *inbuf, char *outbuf, int size,
		int dum_buffsize);
int reply_write_and_X(connection_struct * conn, char *inbuf, char *outbuf,
		      int length, int bufsize);
int reply_lseek(connection_struct * conn, char *inbuf, char *outbuf, int size,
		int dum_buffsize);
int reply_flush(connection_struct * conn, char *inbuf, char *outbuf, int size,
		int dum_buffsize);
int reply_exit(connection_struct * conn,
	       char *inbuf, char *outbuf, int dum_size, int dum_buffsize);
int reply_close(connection_struct * conn, char *inbuf, char *outbuf, int size,
		int dum_buffsize);
int reply_writeclose(connection_struct * conn,
		     char *inbuf, char *outbuf, int size, int dum_buffsize);
int reply_lock(connection_struct * conn,
	       char *inbuf, char *outbuf, int length, int dum_buffsize);
int reply_unlock(connection_struct * conn, char *inbuf, char *outbuf,
		 int size, int dum_buffsize);
int reply_tdis(connection_struct * conn,
	       char *inbuf, char *outbuf, int dum_size, int dum_buffsize);
int reply_echo(connection_struct * conn,
	       char *inbuf, char *outbuf, int dum_size, int dum_buffsize);
int reply_printopen(connection_struct * conn,
		    char *inbuf, char *outbuf, int dum_size, int dum_buffsize);
int reply_printclose(connection_struct * conn,
		     char *inbuf, char *outbuf, int dum_size,
		     int dum_buffsize);
int reply_printqueue(connection_struct * conn,
		     char *inbuf, char *outbuf, int dum_size,
		     int dum_buffsize);
int reply_printwrite(connection_struct * conn, char *inbuf, char *outbuf,
		     int dum_size, int dum_buffsize);
int reply_mkdir(connection_struct * conn, char *inbuf, char *outbuf,
		int dum_size, int dum_buffsize);
BOOL rmdir_internals(connection_struct * conn, char *directory);
int reply_rmdir(connection_struct * conn, char *inbuf, char *outbuf,
		int dum_size, int dum_buffsize);
int rename_internals(connection_struct * conn,
		     char *inbuf, char *outbuf, char *name,
		     char *newname, BOOL replace_if_exists);
int reply_mv(connection_struct * conn, char *inbuf, char *outbuf,
	     int dum_size, int dum_buffsize);
int reply_copy(connection_struct * conn, char *inbuf, char *outbuf,
	       int dum_size, int dum_buffsize);
int reply_setdir(connection_struct * conn, char *inbuf, char *outbuf,
		 int dum_size, int dum_buffsize);
SMB_BIG_UINT get_lock_count(char *data, int data_offset,
			    BOOL large_file_format);
SMB_BIG_UINT get_lock_offset(char *data, int data_offset,
			     BOOL large_file_format, BOOL *err);
int reply_lockingX(connection_struct * conn, char *inbuf, char *outbuf,
		   int length, int bufsize);
int reply_readbmpx(connection_struct * conn, char *inbuf, char *outbuf,
		   int length, int bufsize);
int reply_writebmpx(connection_struct * conn, char *inbuf, char *outbuf,
		    int size, int dum_buffsize);
int reply_writebs(connection_struct * conn, char *inbuf, char *outbuf,
		  int dum_size, int dum_buffsize);
int reply_setattrE(connection_struct * conn, char *inbuf, char *outbuf,
		   int size, int dum_buffsize);
int reply_getattrE(connection_struct * conn, char *inbuf, char *outbuf,
		   int size, int dum_buffsize);

/*The following definitions come from  smbd/server.c  */

int smbd_server_fd(void);
BOOL reload_services(BOOL test);
void exit_server(char *reason);

/*The following definitions come from  smbd/service.c  */

BOOL become_service(connection_struct *conn,BOOL do_chdir);
connection_struct *make_connection(char *service,char *user,
				char *domain,
				char *password, int pwlen,
				char *dev,uint16 vuid, int *ecode);
void close_cnum(connection_struct *conn, uint16 vuid);

/*The following definitions come from  smbd/ssl.c  */

int sslutil_init(int isServer);
int sslutil_accept(int fd);
int sslutil_fd_is_ssl(int fd);
int sslutil_connect(int fd);
int sslutil_disconnect(int fd);
int sslutil_negotiate_ssl(int fd, int msg_type);

/*The following definitions come from  smbd/statcache.c  */

void stat_cache_add( char *full_orig_name, char *orig_translated_path);
BOOL stat_cache_lookup(connection_struct *conn, char *name, char *dirpath, 
		       char **start, SMB_STRUCT_STAT *pst);
BOOL reset_stat_cache( void );

/*The following definitions come from  smbd/trans2.c  */

int reply_findclose(connection_struct *conn,
		    char *inbuf,char *outbuf,int length,int bufsize);
int reply_findnclose(connection_struct *conn, 
		     char *inbuf,char *outbuf,int length,int bufsize);
int reply_transs2(connection_struct *conn,
		  char *inbuf,char *outbuf,int length,int bufsize);
int reply_trans2(connection_struct *conn,
		 char *inbuf,char *outbuf,int length,int bufsize);

/*The following definitions come from  smbd/uid.c  */

BOOL become_user(connection_struct *conn, uint16 vuid);
BOOL become_userk(connection_struct *conn, const vuser_key *key);
BOOL unbecome_user(void );

/*The following definitions come from  smbd/unix_acls.c  */

size_t get_nt_acl(files_struct *fsp, SEC_DESC **ppdesc);

/*The following definitions come from  smbd/vfs-wrap.c  */

int vfswrap_dummy_connect(struct vfs_connection_struct *conn, char *service,
			  char *user);
void vfswrap_dummy_disconnect(void);
SMB_BIG_UINT vfswrap_disk_free(char *path, BOOL small_query, SMB_BIG_UINT *bsize, 
			       SMB_BIG_UINT *dfree, SMB_BIG_UINT *dsize);
DIR *vfswrap_opendir(char *fname);
struct dirent *vfswrap_readdir(DIR *dirp);
int vfswrap_mkdir(char *path, mode_t mode);
int vfswrap_rmdir(char *path);
int vfswrap_closedir(DIR *dirp);
int vfswrap_open(char *fname, int flags, mode_t mode);
int vfswrap_close(int fd);
ssize_t vfswrap_read(int fd, char *data, size_t n);
ssize_t vfswrap_write(int fd, char *data, size_t n);
SMB_OFF_T vfswrap_lseek(int filedes, SMB_OFF_T offset, int whence);
int vfswrap_rename(char *old, char *new);
int vfswrap_fsync(int fd);
int vfswrap_stat(char *fname, SMB_STRUCT_STAT *sbuf);
int vfswrap_fstat(int fd, SMB_STRUCT_STAT *sbuf);
int vfswrap_lstat(char *path, 
		  SMB_STRUCT_STAT *sbuf);
int vfswrap_unlink(char *path);
int vfswrap_chmod(char *path, mode_t mode);
int vfswrap_utime(char *path, struct utimbuf *times);
int vfswrap_ftruncate(int fd, SMB_OFF_T offset);
BOOL vfswrap_lock(int fd, int op, SMB_OFF_T offset, SMB_OFF_T count, int type);

/*The following definitions come from  smbd/vfs.c  */

int vfs_init_default(connection_struct *conn);
BOOL vfs_init_custom(connection_struct *conn);
BOOL vfs_directory_exist(connection_struct *conn, char *dname,
                         SMB_STRUCT_STAT *st);
int vfs_unlink(connection_struct *conn, char *fname);
BOOL vfs_file_exist(connection_struct *conn,char *fname,SMB_STRUCT_STAT *sbuf);
ssize_t vfs_write_data(files_struct *fsp,char *buffer,size_t N);
SMB_OFF_T vfs_transfer_file(int in_fd, files_struct *in_fsp, 
			    int out_fd, files_struct *out_fsp,
			    SMB_OFF_T n, char *header, int headlen, int align);
char *vfs_readdirname(connection_struct *conn, void *p);

/*The following definitions come from  smbwrapper/realcalls.c  */

int real_utime(const char *name, struct utimbuf *buf);
int real_utimes(const char *name, struct timeval tv[2]);

/*The following definitions come from  smbwrapper/shared.c  */

void smbw_setup_shared(void);
char *smbw_getshared(const char *name);
void smbw_setshared(const char *name, const char *val);
int smbw_setenv(const char *name, const char *value);
int smbw_shared_fd(int fd);

/*The following definitions come from  smbwrapper/smbw.c  */

void smbw_init(void);
int smbw_fd(int fd);
int smbw_local_fd(int fd);
ino_t smbw_inode(const char *name);
void clean_fname(char *name);
char *smbw_parse_path(const char *fname, char *server, char *share, char *path);
int smbw_path(const char *path);
int smbw_errno(struct cli_state *c);
struct smbw_server *smbw_server(char *server, char *share);
struct smbw_file *smbw_file(int fd);
int smbw_open(const char *fname, int flags, mode_t mode);
ssize_t smbw_pread(int fd, void *buf, size_t count, off_t ofs);
ssize_t smbw_read(int fd, void *buf, size_t count);
ssize_t smbw_write(int fd, void *buf, size_t count);
ssize_t smbw_pwrite(int fd, void *buf, size_t count, off_t ofs);
int smbw_close(int fd);
int smbw_fcntl(int fd, int cmd, long arg);
int smbw_access(const char *name, int mode);
int smbw_readlink(const char *path, char *buf, size_t bufsize);
int smbw_unlink(const char *fname);
int smbw_rename(const char *oldname, const char *newname);
int smbw_utime(const char *fname, void *buf);
int smbw_utimes(const char *fname, void *buf);
int smbw_chown(const char *fname, uid_t owner, gid_t group);
int smbw_chmod(const char *fname, mode_t newmode);
off_t smbw_lseek(int fd, off_t offset, int whence);
int smbw_dup(int fd);
int smbw_dup2(int fd, int fd2);
int smbw_fork(void);

/*The following definitions come from  smbwrapper/smbw_dir.c  */

struct smbw_dir *smbw_dir(int fd);
int smbw_dirp(DIR *dirp);
int smbw_dir_open(const char *fname);
int smbw_dir_fstat(int fd, struct stat *st);
int smbw_dir_close(int fd);
int smbw_getdents(unsigned int fd, struct dirent *dirp, int count);
int smbw_chdir(const char *name);
off_t smbw_dir_lseek(int fd, off_t offset, int whence);
int smbw_mkdir(const char *fname, mode_t mode);
int smbw_rmdir(const char *fname);
char *smbw_getcwd(char *buf, size_t size);
int smbw_fchdir(unsigned int fd);
DIR *smbw_opendir(const char *fname);
struct dirent *smbw_readdir(DIR *dirp);
int smbw_closedir(DIR *dirp);
void smbw_seekdir(DIR *dirp, off_t offset);
off_t smbw_telldir(DIR *dirp);

/*The following definitions come from  smbwrapper/smbw_stat.c  */

void smbw_setup_stat(struct stat *st, char *fname, size_t size, int mode);
BOOL smbw_getatr(struct smbw_server *srv, char *path, 
		 uint16 *mode, size_t *size, 
		 time_t *c_time, time_t *a_time, time_t *m_time,
		 SMB_INO_T *ino);
int smbw_stat_printjob(struct smbw_server *srv,char *path,
		       size_t *size, time_t *m_time);
int smbw_fstat(int fd, struct stat *st);
int smbw_stat(const char *fname, struct stat *st);

/*The following definitions come from  spoolssd/spoolssd.c  */

msrpc_service_fns *get_service_fns(void);

/*The following definitions come from  spoolssd/srv_spoolss_nt.c  */

void init_printer_hnd(void);
uint32 _spoolss_open_printer_ex( const UNISTR2 *printername,
				 const PRINTER_DEFAULT *printer_default,
				 uint32  user_switch, SPOOL_USER_CTR user_ctr,
				 POLICY_HND *handle);
uint32 _spoolss_closeprinter(POLICY_HND *handle);
uint32 _spoolss_deleteprinter(POLICY_HND *handle);
uint32 _spoolss_getprinterdata(const POLICY_HND *handle, UNISTR2 *valuename,
				uint32 in_size,
				uint32 *type,
				uint32 *out_size,
				uint8 **data,
				uint32 *needed);
uint32 _spoolss_rffpcnex(const POLICY_HND *handle, uint32 flags, uint32 options,
			 const UNISTR2 *localmachine, uint32 printerlocal,
			 SPOOL_NOTIFY_OPTION *option);
uint32 _spoolss_rfnpcnex( const POLICY_HND *handle, uint32 change,
			  SPOOL_NOTIFY_OPTION *option, SPOOL_NOTIFY_INFO *info);
uint32 _spoolss_enumprinters( uint32 flags, const UNISTR2 *servername, uint32 level,
			      NEW_BUFFER *buffer, uint32 offered,
			      uint32 *needed, uint32 *returned);
uint32 _spoolss_getprinter(POLICY_HND *handle, uint32 level,
			   NEW_BUFFER *buffer, uint32 offered, uint32 *needed);
uint32 _spoolss_getprinterdriver2(const POLICY_HND *handle, const UNISTR2 *uni_arch, uint32 level, 
				uint32 clientmajorversion, uint32 clientminorversion,
				NEW_BUFFER *buffer, uint32 offered,
				uint32 *needed, uint32 *servermajorversion, uint32 *serverminorversion);
uint32 _spoolss_startpageprinter(const POLICY_HND *handle);
uint32 _spoolss_endpageprinter(const POLICY_HND *handle);
uint32 _spoolss_startdocprinter( const POLICY_HND *handle, uint32 level,
				DOC_INFO *docinfo, uint32 *jobid);
uint32 _spoolss_enddocprinter(const POLICY_HND *handle);
uint32 _spoolss_writeprinter( const POLICY_HND *handle,
				uint32 buffer_size,
				const uint8 *buffer,
				uint32 *buffer_written);
uint32 _spoolss_setprinter(const POLICY_HND *handle, uint32 level,
			   const SPOOL_PRINTER_INFO_LEVEL *info,
			   const DEVMODE_CTR devmode_ctr,
			   SEC_DESC_BUF *secdesc_ctr,
			   uint32 command);
uint32 _spoolss_fcpn(const POLICY_HND *handle);
uint32 _spoolss_addjob(const POLICY_HND *handle, uint32 level,
			NEW_BUFFER *buffer, uint32 offered);
uint32 _spoolss_enumjobs( POLICY_HND *handle, uint32 firstjob, uint32 numofjobs, uint32 level,			  
			  NEW_BUFFER *buffer, uint32 offered,
			  uint32 *needed, uint32 *returned);
uint32 _spoolss_schedulejob( const POLICY_HND *handle, uint32 jobid);
uint32 _spoolss_setjob( const POLICY_HND *handle,
				uint32 jobid,
				uint32 level,
				JOB_INFO *ctr,
				uint32 command);
uint32 _spoolss_enumprinterdrivers( UNISTR2 *name, UNISTR2 *environment, uint32 level,
				    NEW_BUFFER *buffer, uint32 offered,
				    uint32 *needed, uint32 *returned);
uint32 _new_spoolss_enumforms( const POLICY_HND *handle, uint32 level, 
			       NEW_BUFFER *buffer, uint32 offered, 
			       uint32 *needed, uint32 *numofforms);
uint32 _spoolss_enumports( UNISTR2 *name, uint32 level, 
			   NEW_BUFFER *buffer, uint32 offered, 
			   uint32 *needed, uint32 *returned);
uint32 _spoolss_addprinterex( const UNISTR2 *uni_srv_name, uint32 level,
				const SPOOL_PRINTER_INFO_LEVEL *info,
				uint32 unk0, uint32 unk1, uint32 unk2, uint32 unk3,
				uint32 user_switch, const SPOOL_USER_CTR *user,
				POLICY_HND *handle);
uint32 _spoolss_addprinterdriver( const UNISTR2 *server_name,
				uint32 level, const SPOOL_PRINTER_DRIVER_INFO_LEVEL *info);
uint32 _spoolss_getprinterdriverdirectory(UNISTR2 *name, UNISTR2 *uni_environment, uint32 level,
					NEW_BUFFER *buffer, uint32 offered, 
					uint32 *needed);
uint32 _spoolss_enumprinterdata(const POLICY_HND *handle, uint32 idx,
				uint32 in_value_len, uint32 in_data_len,
				uint32 *out_max_value_len, uint16 **out_value, uint32 *out_value_len,
				uint32 *out_type,
				uint32 *out_max_data_len, uint8  **data_out, uint32 *out_data_len);
uint32 _spoolss_setprinterdata( const POLICY_HND *handle,
				const UNISTR2 *value,
				uint32 type,
				uint32 max_len,
				const uint8 *data,
				uint32 real_len,
				uint32 numeric_data);
uint32 _spoolss_addform( const POLICY_HND *handle,
				uint32 level,
				const FORM *form);
uint32 _spoolss_setform( const POLICY_HND *handle,
				const UNISTR2 *uni_name,
				uint32 level,
				const FORM *form);
uint32 _spoolss_enumprintprocessors(UNISTR2 *name, UNISTR2 *environment, uint32 level,
				    NEW_BUFFER *buffer, uint32 offered, 
				    uint32 *needed, uint32 *returned);
uint32 _spoolss_enumprintprocdatatypes(UNISTR2 *name, UNISTR2 *processor, uint32 level,
					NEW_BUFFER *buffer, uint32 offered, 
					uint32 *needed, uint32 *returned);
uint32 _spoolss_enumprintmonitors(UNISTR2 *name,uint32 level,
				    NEW_BUFFER *buffer, uint32 offered, 
				    uint32 *needed, uint32 *returned);
uint32 _spoolss_getjob( POLICY_HND *handle, uint32 jobid, uint32 level,
			NEW_BUFFER *buffer, uint32 offered, 
			uint32 *needed);

/*The following definitions come from  srvsvcd/srv_srvsvc_nt.c  */

uint32 _srv_net_remote_tod(UNISTR2 *srv_name, TIME_OF_DAY_INFO * tod);
uint32 _srv_net_srv_get_info(UNISTR2 *srv_name, uint32 switch_value,
			     SRV_INFO_CTR * ctr);
uint32 _srv_net_share_enum(const UNISTR2 *srv_name,
			   uint32 switch_value, SRV_SHARE_INFO_CTR * ctr,
			   uint32 preferred_len, ENUM_HND * enum_hnd,
			   uint32 *total_entries, uint32 share_level);
uint32 _srv_net_share_add(const UNISTR2 *srv_name,
			  uint32 info_level,
			  const SHARE_INFO_CTR * ctr, uint32 *parm_error);
uint32 _srv_net_share_get_info(const UNISTR2 *srv_name,
			       const UNISTR2 *share_name, uint32 info_level,
			       SHARE_INFO_CTR * ctr);
uint32 _srv_net_sess_enum(const UNISTR2 *srv_name,
			  uint32 switch_value, SRV_SESS_INFO_CTR * ctr,
			  uint32 preferred_len, ENUM_HND * enum_hnd,
			  uint32 *total_entries, uint32 sess_level);
uint32 _srv_net_conn_enum(const UNISTR2 *srv_name,
			  uint32 switch_value, SRV_CONN_INFO_CTR * ctr,
			  uint32 preferred_len, ENUM_HND * enum_hnd,
			  uint32 *total_entries, uint32 conn_level);
uint32 _srv_net_file_enum(const UNISTR2 *srv_name,
			  uint32 switch_value, SRV_FILE_INFO_CTR * ctr,
			  uint32 preferred_len, ENUM_HND * enum_hnd,
			  uint32 *total_entries, uint32 file_level);

/*The following definitions come from  srvsvcd/srvsvcd.c  */

msrpc_service_fns *get_service_fns(void);

/*The following definitions come from  svcctld/srv_svcctl_nt.c  */

uint32 _svc_close(POLICY_HND *pol);
uint32 _svc_open_service(const POLICY_HND *scman_pol,
				 const UNISTR2* uni_svc_name,
				 uint32 des_access,
				 POLICY_HND *pol);
uint32 _svc_stop_service(const POLICY_HND *pol,
				 uint32 unknown,
				 uint32 *unknown0,
				 uint32 *unknown1,
				 uint32 *unknown2,
				 uint32 *unknown3,
				 uint32 *unknown4,
				 uint32 *unknown5,
				 uint32 *unknown6);
uint32 _svc_start_service(const POLICY_HND *pol,
				  uint32 argc,
				  uint32 argc2,
				  const UNISTR2 *argv);
uint32 _svc_open_sc_man(const UNISTR2 *uni_srv_name,
				const UNISTR2 *uni_db_name,
				uint32 des_access,
				POLICY_HND *pol);
uint32 _svc_enum_svcs_status(const POLICY_HND *pol,
				     uint32 service_type,
				     uint32 service_state,
				     uint32 *buf_size,
				     ENUM_HND *resume_hnd,
				     ENUM_SRVC_STATUS *svcs,
				     uint32 *more_buf_size,
				     uint32 *num_svcs);
uint32 _svc_query_disp_name(const POLICY_HND *scman_pol,
				    const UNISTR2 *uni_svc_name,
				    uint32 buf_size,
				    UNISTR2 *uni_disp_name,
				    uint32 *pbuf_size);
uint32 _svc_unknown_3(const POLICY_HND *scman_hnd, POLICY_HND *hnd);

/*The following definitions come from  svcctld/svcctld.c  */

msrpc_service_fns *get_service_fns(void);

/*The following definitions come from  tdb/spinlock.c  */

int tdb_spinlock(TDB_CONTEXT *tdb, int list, int rw_type);
int tdb_spinunlock(TDB_CONTEXT *tdb, int list, int rw_type);
int tdb_create_rwlocks(int fd, unsigned int hash_size);
int tdb_clear_spinlocks(TDB_CONTEXT *tdb);
int tdb_clear_spinlocks(TDB_CONTEXT *tdb);

/*The following definitions come from  tdb/tdb.c  */

void tdb_printfreelist(TDB_CONTEXT *tdb);
const char *tdb_errorstr(TDB_CONTEXT *tdb);
TDB_DATA tdb_fetch(TDB_CONTEXT *tdb, TDB_DATA key);
int tdb_exists(TDB_CONTEXT *tdb, TDB_DATA key);
int tdb_traverse(TDB_CONTEXT *tdb, tdb_traverse_func fn, void *state);
TDB_DATA tdb_firstkey(TDB_CONTEXT *tdb);
TDB_DATA tdb_nextkey(TDB_CONTEXT *tdb, TDB_DATA oldkey);
int tdb_delete(TDB_CONTEXT *tdb, TDB_DATA key);
int tdb_store(TDB_CONTEXT *tdb, TDB_DATA key, TDB_DATA dbuf, int flag);
TDB_CONTEXT *tdb_open(char *name, int hash_size, int tdb_flags,
		      int open_flags, mode_t mode);
int tdb_close(TDB_CONTEXT *tdb);
int tdb_lockall(TDB_CONTEXT *tdb);
void tdb_unlockall(TDB_CONTEXT *tdb);
int tdb_lockkeys(TDB_CONTEXT *tdb, u32 number, TDB_DATA keys[]);
void tdb_unlockkeys(TDB_CONTEXT *tdb);
int tdb_chainlock(TDB_CONTEXT *tdb, TDB_DATA key);
void tdb_chainunlock(TDB_CONTEXT *tdb, TDB_DATA key);

/*The following definitions come from  tdb/tdbutil.c  */

int tdb_lock_bystring(TDB_CONTEXT *tdb, char *keyval);
void tdb_unlock_bystring(TDB_CONTEXT *tdb, char *keyval);
int tdb_fetch_int_byblob(TDB_CONTEXT *tdb, char *keyval, size_t len);
int tdb_fetch_int(TDB_CONTEXT *tdb, char *keystr);
int tdb_store_int_byblob(TDB_CONTEXT *tdb, char *keystr, size_t len, int v);
int tdb_store_int(TDB_CONTEXT *tdb, char *keystr, int v);
int tdb_store_by_string(TDB_CONTEXT *tdb, char *keystr, void *buffer, int len);
TDB_DATA tdb_fetch_by_string(TDB_CONTEXT *tdb, char *keystr);
size_t tdb_pack(char *buf, int bufsize, char *fmt, ...);
int tdb_unpack(char *buf, int bufsize, char *fmt, ...);

/*The following definitions come from  utils/rpctorture.c  */

BOOL do_random_rpc(struct cli_state *cli, uint16 nt_pipe_fnum, int max_len);

/*The following definitions come from  utils/smbpasswd.c  */

int main(int argc, char **argv);

/*The following definitions come from  web/cgi.c  */

void cgi_load_variables(FILE *f1);
char *cgi_variable(char *name);
BOOL am_root(void);
char *cgi_user_name(void);
void cgi_setup(char *rootdir, int auth_required);
char *cgi_baseurl(void);
char *cgi_pathinfo(void);
char *cgi_remote_host(void);
char *cgi_remote_addr(void);
BOOL cgi_waspost(void);

/*The following definitions come from  web/diagnose.c  */

BOOL nmbd_running(void);
BOOL smbd_running(void);

/*The following definitions come from  web/startstop.c  */

void start_smbd(void);
void start_nmbd(void);
void stop_smbd(void);
void stop_nmbd(void);
void kill_pid(pid_t pid);

/*The following definitions come from  web/statuspage.c  */

void status_page(void);

/*The following definitions come from  web/swat.c  */


/*The following definitions come from  winregd/srv_reg_nt.c  */

uint32 _reg_close(POLICY_HND * pol);
uint32 _reg_open(POLICY_HND * pol, uint32 access_mask);
uint32 _reg_open_entry(const POLICY_HND * pol, const UNISTR2 * uni_name,
		       uint32 unknown_0, uint32 access_mask,
		       POLICY_HND * entry_pol);
uint32 _reg_info(POLICY_HND * pol, BUFFER2 * buf, uint32 * type);
BOOL api_reg_rpc(rpcsrv_struct * p);

/*The following definitions come from  winregd/winregd.c  */

msrpc_service_fns *get_service_fns(void);

/*The following definitions come from  wkssvcd/srv_wkssvc_nt.c  */

uint32 _wks_query_info( const UNISTR2 *srv_name, uint16 switch_value,
			WKS_INFO_100 *wks100);

/*The following definitions come from  wkssvcd/wkssvcd.c  */

msrpc_service_fns *get_service_fns(void);
#endif /* _PROTO_H_ */
