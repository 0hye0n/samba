/* This file is automatically generated with "make proto". DO NOT EDIT */


/*The following definitions come from  access.c  */

BOOL check_access(int snum);
BOOL allow_access(char *deny_list,char *allow_list,char *cname,char *caddr);

/*The following definitions come from  asyncdns.c  */

int asyncdns_fd(void);
void start_async_dns(void);
void run_dns_queue(void);
BOOL queue_dns_query(struct packet_struct *p,struct nmb_name *question,
		     struct name_record **n);
BOOL queue_dns_query(struct packet_struct *p,struct nmb_name *question,
		     struct name_record **n);

/*The following definitions come from  charcnv.c  */

char *unix2dos_format(char *str,BOOL overwrite);
char *dos2unix_format(char *str, BOOL overwrite);
int interpret_character_set(char *str, int def);

/*The following definitions come from  charset.c  */

void charset_initialise();
void codepage_initialise(int client_codepage);
void add_char_string(char *s);

/*The following definitions come from  chgpasswd.c  */

BOOL chat_with_program(char *passwordprogram,char *name,char *chatsequence);
BOOL chgpasswd(char *name,char *oldpass,char *newpass);
BOOL chgpasswd(char *name,char *oldpass,char *newpass);

/*The following definitions come from  client.c  */

void cmd_help(struct cli_state *cli, struct client_info *info);

/*The following definitions come from  clientgen.c  */

BOOL cli_send_trans(struct cli_state *cli,
			   int trans, char *name, int pipe_name_len,
               int fid, int flags,
			   char *data,char *param,uint16 *setup, int ldata,int lparam,
			   int lsetup,int mdata,int mparam,int msetup);
BOOL cli_receive_trans(struct cli_state *cli,
			      int trans,int *data_len,
			      int *param_len, char **data,char **param);
BOOL cli_api_pipe(struct cli_state *cli,
	char *pipe_name, int pipe_name_len,
	int prcnt,int drcnt, int srcnt,
	int mprcnt,int mdrcnt,
	int *rprcnt,int *rdrcnt,
	char *param, char *data, uint16 *setup,
	char **rparam,char **rdata);
BOOL cli_NetWkstaUserLogon(struct cli_state *cli,char *user, char *workstation);
BOOL cli_NetShareEnum(struct cli_state *cli, BOOL sort, BOOL *long_share_name,
		       void (*fn)(char *, uint32, char *));
BOOL cli_NetServerEnum(struct cli_state *cli, char *workgroup, uint32 stype,
		       void (*fn)(char *, uint32, char *));
BOOL cli_session_setup(struct cli_state *cli, 
		       char *user, 
		       char *pass, int passlen,
		       char *ntpass, int ntpasslen,
		       char *workgroup);
BOOL cli_send_tconX(struct cli_state *cli, 
		    char *share, char *dev, char *pass, int passlen);
BOOL cli_tdis(struct cli_state *cli);
BOOL cli_rmdir(struct cli_state *cli, char *dname);
BOOL cli_unlink(struct cli_state *cli, char *fname);
int cli_send_message(struct cli_state *cli, 
				char *username, char *desthost,
				char *message, int *total_len);
void cli_do_dir(struct cli_state *cli, struct client_info *info,
				char *Mask,int attribute, BOOL recurse_dir,
				void (*fn)(struct cli_state*, struct client_info*, file_info*));
BOOL cli_stat(struct cli_state *cli, char *file);
BOOL cli_print(struct cli_state *cli, struct client_info *info,
				FILE *f, char *lname, char *rname);
int cli_queue(struct cli_state *cli, struct client_info *info,
				void (*fn)(uint16, char*, uint32, uint8));
BOOL cli_cancel(struct cli_state *cli, uint16 job, uint16 *cancelled);
int cli_pqueue_2(struct cli_state *cli, struct client_info *info,
			void (*fn)(char*, uint16, uint16, char *, time_t, uint32, char *));
BOOL cli_printq_info(struct cli_state *cli, struct client_info *info,
				char *name, uint16 *priority,
				uint16 *start_time, uint16 *until_time,
				char *separator_file, char *print_processor,
				char *params, char *comment,
				uint16 *status, uint16 *jobs,
				char *printers, char *driver_name,
				char **driver_data, int *driver_count);
int cli_long_dir(struct cli_state *cli, struct client_info *info,
				char *Mask,int attribute, BOOL recurse_dir,
				void (*fn)(struct cli_state*, struct client_info*, file_info*));
int cli_short_dir(struct cli_state *cli, struct client_info *info,
				char *Mask,int attribute, BOOL recurse_dir,
				void (*fn)(struct cli_state*, struct client_info*, file_info*));
void cli_dir(struct cli_state *cli, struct client_info *info,
				char *Mask,int attribute, BOOL recurse_dir,
				void (*fn)(struct cli_state*, struct client_info*, file_info*));
int cli_put(struct cli_state *cli, struct client_info *info,
				char *rname,char *lname, file_info *finfo,
				int (*read_fn)(struct client_info *, char*, int, int, FILE *));
int cli_get(struct cli_state *cli, struct client_info *info,
				char *rname,char *lname,file_info *finfo1,
				int handle,
				int (*init_fn)(struct client_info *, int, char*, file_info *),
				int (*write_fn)(struct client_info *, int, char*, int),
				int (*end_fn)(struct client_info*, int, char*, int, file_info*));
BOOL cli_chkpath(struct cli_state *cli, char *path);
BOOL cli_dskattr(struct cli_state *cli,
				uint16 *num_blocks, uint32 *block_size, uint16 *free_blocks);
BOOL cli_mkdir(struct cli_state *cli, char *name);
BOOL cli_move(struct cli_state *cli, char *src, char *dest);
BOOL cli_getatr(struct cli_state *cli, char *fname,
				uint8 *fattr, uint16 *ftime, uint16 *fsize);
BOOL cli_setatr(struct cli_state *cli, char *fname,
				uint8 fattr, uint16 write_time);
BOOL cli_create(struct cli_state *cli,
				char *name, uint16 file_mode, uint16 make_time, uint16 *fnum);
uint16 cli_open(struct cli_state *cli, char *fname, int flags, int share_mode,
			uint16 *fmode, time_t *mtime, uint32 *fsize);
BOOL cli_close(struct cli_state *cli, uint16 fnum, time_t close_time);
BOOL cli_lock(struct cli_state *cli, uint16 fnum, uint32 offset, uint32 len, int timeout);
BOOL cli_unlock(struct cli_state *cli, uint16 fnum, uint32 offset, uint32 len, int timeout);
int cli_readx(struct cli_state *cli, uint16 fnum, char *buf, uint32 offset, uint16 size);
int cli_writeraw(struct cli_state *cli, uint16 fnum,int pos,char *buf,int n);
int cli_write(struct cli_state *cli, uint16 fnum,int pos,char *buf,int n);
int cli_write_x(struct cli_state *cli, uint16 fnum, char *buf, uint32 offset, uint16 size);
BOOL cli_negprot(struct cli_state *cli);
BOOL cli_session_request(struct cli_state *cli,
			char *called_host_name        , int called_name_type,
			char  calling_netbios_name[16], int calling_name_type);
BOOL cli_connect(struct cli_state *cli, char *host, struct in_addr *ip);
BOOL cli_initialise(struct cli_state *cli);
void cli_shutdown(struct cli_state *cli);
char *cli_errstr(struct cli_state *cli);
BOOL cli_error(struct cli_state *cli, uint8 *eclass, uint32 *num);
void cli_sockopt(struct cli_state *cli, char *options);
int cli_setmid(struct cli_state *cli, int mid);
int cli_setpid(struct cli_state *cli, int pid);
BOOL cli_establish_connection(struct cli_state *cli,
				char *dest_host, uint8 name_type, struct in_addr *dest_ip,
				char *my_hostname,
				char *passwd_report,
				char *username, char *user_pass, char *workgroup,
				char *service, char *service_type,
				BOOL do_shutdown, BOOL do_tcon, BOOL encrypted);

/*The following definitions come from  clientsmb.c  */

void cmd_pwd(struct cli_state *cli, struct client_info *info);
void do_cd(struct cli_state *cli, struct client_info *info, char *newdir);
void cmd_cd(struct cli_state *cli, struct client_info *info);
void cmd_dir(struct cli_state *cli, struct client_info *info);
void cmd_get(struct cli_state *cli, struct client_info *info);
void cmd_more(struct cli_state *cli, struct client_info *info);
void cmd_mget(struct cli_state *cli, struct client_info *info);
void cmd_mkdir(struct cli_state *cli, struct client_info *info);
void cmd_put(struct cli_state *cli, struct client_info *info);
void cmd_select(struct cli_state *cli, struct client_info *info);
void cmd_mput(struct cli_state *cli, struct client_info *info);
void cmd_cancel(struct cli_state *cli, struct client_info *info);
void cmd_stat(struct cli_state *cli, struct client_info *info);
void cmd_print(struct cli_state *cli, struct client_info *info);
void cmd_queue(struct cli_state *cli, struct client_info *info);
void cmd_p_queue_2(struct cli_state *cli, struct client_info *info);
void cmd_qinfo(struct cli_state *cli, struct client_info *info);
void cmd_del(struct cli_state *cli, struct client_info *info);
void cmd_rmdir(struct cli_state *cli, struct client_info *info);
void cmd_rename(struct cli_state *cli, struct client_info *info);
void cmd_prompt(struct cli_state *cli, struct client_info *info);
void cmd_newer(struct cli_state *cli, struct client_info *info);
void cmd_archive(struct cli_state *cli, struct client_info *info);
void cmd_lowercase(struct cli_state *cli, struct client_info *info);
void cmd_recurse(struct cli_state *cli, struct client_info *info);
void cmd_translate(struct cli_state *cli, struct client_info *info);
void cmd_printmode(struct cli_state *cli, struct client_info *info);
void cmd_lcd(struct cli_state *cli, struct client_info *info);
void cmd_quit(struct cli_state *cli, struct client_info *info);

/*The following definitions come from  clitar.c  */

void cmd_block(struct cli_state *cli, struct client_info *info);
void cmd_tarmode(struct cli_state *cli, struct client_info *info);
void cmd_setmode(struct cli_state *cli, struct client_info *info);
void cmd_tar(struct cli_state *cli, struct client_info *info);
int process_tar(struct cli_state *cli, struct client_info *info);
int clipfind(char **aret, int ret, char *tok);
int tar_parseargs(struct client_info *info,
				int argc, char *argv[], char *Optarg, int Optind);

/*The following definitions come from  credentials.c  */

char *credstr(uchar *cred);
void cred_session_key(DOM_CHAL *clnt_chal, DOM_CHAL *srv_chal, char *pass, 
		      uchar session_key[8]);
void cred_create(uchar session_key[8], DOM_CHAL *stor_cred, UTIME timestamp, 
		 DOM_CHAL *cred);
int cred_assert(DOM_CHAL *cred, uchar session_key[8], DOM_CHAL *stored_cred,
		UTIME timestamp);
BOOL clnt_deal_with_creds(uchar sess_key[8],
			  DOM_CRED *sto_clnt_cred, DOM_CRED *rcv_srv_cred);
BOOL deal_with_creds(uchar sess_key[8],
		     DOM_CRED *sto_clnt_cred, 
		     DOM_CRED *rcv_clnt_cred, DOM_CRED *rtn_srv_cred);

/*The following definitions come from  dir.c  */

void init_dptrs(void);
char *dptr_path(int key);
char *dptr_wcard(int key);
BOOL dptr_set_wcard(int key, char *wcard);
BOOL dptr_set_attr(int key, uint16 attr);
uint16 dptr_attr(int key);
void dptr_close(int key);
void dptr_closecnum(int cnum);
void dptr_idlecnum(int cnum);
void dptr_closepath(char *path,int pid);
int dptr_create(int cnum,char *path, BOOL expect_close,int pid);
BOOL dptr_fill(char *buf1,unsigned int key);
BOOL dptr_zero(char *buf);
void *dptr_fetch(char *buf,int *num);
void *dptr_fetch_lanman2(char *params,int dptr_num);
BOOL dir_check_ftype(int cnum,int mode,struct stat *st,int dirtype);
BOOL get_dir_entry(int cnum,char *mask,int dirtype,char *fname,int *size,int *mode,time_t *date,BOOL check_descend);
void *OpenDir(int cnum, char *name, BOOL use_veto);
void CloseDir(void *p);
char *ReadDirName(void *p);
BOOL SeekDir(void *p,int pos);
int TellDir(void *p);
void DirCacheAdd( char *path, char *name, char *dname, int snum );
char *DirCacheCheck( char *path, char *name, int snum );
void DirCacheFlush( int snum );

/*The following definitions come from  fault.c  */

void fault_setup(void (*fn)());

/*The following definitions come from  getsmbpass.c  */

char *getsmbpass(char *prompt)    ;

/*The following definitions come from  interface.c  */

void load_interfaces(void);
void iface_set_default(char *ip,char *bcast,char *nmask);
BOOL ismyip(struct in_addr ip);
BOOL ismybcast(struct in_addr bcast);
BOOL is_local_net(struct in_addr from);
int iface_count(void);
struct in_addr *iface_n_ip(int n);
struct in_addr *iface_bcast(struct in_addr ip);
struct in_addr *iface_nmask(struct in_addr ip);
struct in_addr *iface_ip(struct in_addr ip);

/*The following definitions come from  ipc.c  */

int get_printerdrivernumber(int snum);
int reply_trans(char *inbuf,char *outbuf);

/*The following definitions come from  kanji.c  */

char *sj_strtok(char *s1, char *s2);
char *sj_strstr(char *s1, char *s2);
char *sj_strchr (char *s, int c);
char *sj_strrchr(char *s, int c);
int interpret_coding_system(char *str, int def);

/*The following definitions come from  loadparm.c  */

char *lp_string(char *s);
char *lp_logfile(void);
char *lp_smbrun(void);
char *lp_configfile(void);
char *lp_smb_passwd_file(void);
char *lp_serverstring(void);
char *lp_printcapname(void);
char *lp_lockdir(void);
char *lp_rootdir(void);
char *lp_defaultservice(void);
char *lp_msg_command(void);
char *lp_dfree_command(void);
char *lp_hosts_equiv(void);
char *lp_auto_services(void);
char *lp_passwd_program(void);
char *lp_passwd_chat(void);
char *lp_passwordserver(void);
char *lp_workgroup(void);
char *lp_username_map(void);
char *lp_character_set(void);
char *lp_logon_script(void);
char *lp_logon_path(void);
char *lp_logon_drive(void);
char *lp_logon_home(void);
char *lp_remote_announce(void);
char *lp_wins_server(void);
char *lp_interfaces(void);
char *lp_socket_address(void);
char *lp_nis_home_map_name(void);
char *lp_announce_version(void);
char *lp_netbios_aliases(void);
char *lp_driverfile(void);
char *lp_domain_trusted(void);
char *lp_domain_trusting(void);
char *lp_domain_sid(void);
char *lp_domain_other_sids(void);
char *lp_domain_groups(void);
char *lp_domain_admin_users(void);
char *lp_domain_guest_users(void);
char *lp_domain_hostsallow(void);
char *lp_domain_hostsdeny(void);
BOOL lp_dns_proxy(void);
BOOL lp_wins_support(void);
BOOL lp_wins_proxy(void);
BOOL lp_local_master(void);
BOOL lp_domain_controller(void);
BOOL lp_domain_master(void);
BOOL lp_domain_logons(void);
BOOL lp_preferred_master(void);
BOOL lp_load_printers(void);
BOOL lp_use_rhosts(void);
BOOL lp_getwdcache(void);
BOOL lp_readprediction(void);
BOOL lp_readbmpx(void);
BOOL lp_readraw(void);
BOOL lp_writeraw(void);
BOOL lp_null_passwords(void);
BOOL lp_strip_dot(void);
BOOL lp_encrypted_passwords(void);
BOOL lp_syslog_only(void);
BOOL lp_browse_list(void);
BOOL lp_unix_realname(void);
BOOL lp_nis_home_map(void);
BOOL lp_time_server(void);
BOOL lp_bind_interfaces_only(void);
int lp_os_level(void);
int lp_max_ttl(void);
int lp_max_log_size(void);
int lp_mangledstack(void);
int lp_maxxmit(void);
int lp_maxmux(void);
int lp_maxpacket(void);
int lp_keepalive(void);
int lp_passwordlevel(void);
int lp_usernamelevel(void);
int lp_readsize(void);
int lp_shmem_size(void);
int lp_deadtime(void);
int lp_maxprotocol(void);
int lp_security(void);
int lp_printing(void);
int lp_maxdisksize(void);
int lp_lpqcachetime(void);
int lp_syslog(void);
int lp_client_code_page(void);
int lp_announce_as(void);
char *lp_preexec(int );
char *lp_postexec(int );
char *lp_rootpreexec(int );
char *lp_rootpostexec(int );
char *lp_servicename(int );
char *lp_pathname(int );
char *lp_dontdescend(int );
char *lp_username(int );
char *lp_guestaccount(int );
char *lp_invalid_users(int );
char *lp_valid_users(int );
char *lp_admin_users(int );
char *lp_printcommand(int );
char *lp_lpqcommand(int );
char *lp_lprmcommand(int );
char *lp_lppausecommand(int );
char *lp_lpresumecommand(int );
char *lp_printername(int );
char *lp_printerdriver(int );
char *lp_hostsallow(int );
char *lp_hostsdeny(int );
char *lp_magicscript(int );
char *lp_magicoutput(int );
char *lp_comment(int );
char *lp_force_user(int );
char *lp_force_group(int );
char *lp_readlist(int );
char *lp_writelist(int );
char *lp_volume(int );
char *lp_mangled_map(int );
char *lp_veto_files(int );
char *lp_hide_files(int );
char *lp_driverlocation(int );
BOOL lp_alternate_permissions(int );
BOOL lp_revalidate(int );
BOOL lp_casesensitive(int );
BOOL lp_preservecase(int );
BOOL lp_shortpreservecase(int );
BOOL lp_casemangle(int );
BOOL lp_status(int );
BOOL lp_hide_dot_files(int );
BOOL lp_browseable(int );
BOOL lp_readonly(int );
BOOL lp_no_set_dir(int );
BOOL lp_guest_ok(int );
BOOL lp_guest_only(int );
BOOL lp_print_ok(int );
BOOL lp_postscript(int );
BOOL lp_map_hidden(int );
BOOL lp_map_archive(int );
BOOL lp_locking(int );
BOOL lp_strict_locking(int );
BOOL lp_share_modes(int );
BOOL lp_oplocks(int );
BOOL lp_onlyuser(int );
BOOL lp_manglednames(int );
BOOL lp_widelinks(int );
BOOL lp_symlinks(int );
BOOL lp_syncalways(int );
BOOL lp_map_system(int );
BOOL lp_delete_readonly(int );
BOOL lp_fake_oplocks(int );
BOOL lp_recursive_veto_delete(int );
BOOL lp_dos_filetimes(int );
int lp_create_mode(int );
int lp_force_create_mode(int );
int lp_dir_mode(int );
int lp_force_dir_mode(int );
int lp_max_connections(int );
int lp_defaultcase(int );
int lp_minprintspace(int );
char lp_magicchar(int );
BOOL lp_add_home(char *pszHomename, int iDefaultService, char *pszHomedir);
int lp_add_service(char *pszService, int iDefaultService);
BOOL lp_add_printer(char *pszPrintername, int iDefaultService);
BOOL lp_file_list_changed(void);
BOOL lp_do_parameter(int snum, char *pszParmName, char *pszParmValue);
int lp_next_parameter(int snum, int *i, char *label, 
			   char *value, int allparameters);
BOOL lp_snum_ok(int iService);
BOOL lp_loaded(void);
void lp_killunused(BOOL (*snumused)(int ));
BOOL lp_load(char *pszFname,BOOL global_only);
int lp_numservices(void);
void lp_dump(FILE *f);
int lp_servicenumber(char *pszServiceName);
char *volume_label(int snum);
void lp_rename_service(int snum, char *new_name);
void lp_remove_service(int snum);
void lp_copy_service(int snum, char *new_name);
int lp_default_server_announce(void);
int lp_major_announce_version(void);
int lp_minor_announce_version(void);

/*The following definitions come from  locking.c  */

BOOL is_locked(int fnum,int cnum,uint32 count,uint32 offset);
BOOL do_lock(int fnum,int cnum,uint32 count,uint32 offset,int *eclass,uint32 *ecode);
BOOL do_unlock(int fnum,int cnum,uint32 count,uint32 offset,int *eclass,uint32 *ecode);
BOOL locking_init(int read_only);
BOOL locking_end(void);
BOOL lock_share_entry(int cnum, uint32 dev, uint32 inode, int *ptok);
BOOL unlock_share_entry(int cnum, uint32 dev, uint32 inode, int token);
int get_share_modes(int cnum, int token, uint32 dev, uint32 inode, 
		    share_mode_entry **shares);
void del_share_mode(int token, int fnum);
BOOL set_share_mode(int token, int fnum, uint16 port, uint16 op_type);
BOOL remove_share_oplock(int fnum, int token);
int share_mode_forall(void (*fn)(share_mode_entry *, char *));
void share_status(FILE *f);

/*The following definitions come from  locking_shm.c  */

struct share_ops *locking_shm_init(int ronly);

/*The following definitions come from  locking_slow.c  */

struct share_ops *locking_slow_init(int ronly);

/*The following definitions come from  mangle.c  */

int str_checksum(char *s);
BOOL is_8_3(char *fname, BOOL check_case);
void reset_mangled_stack( int size );
BOOL check_mangled_stack(char *s);
BOOL is_mangled( char *s );
void mangle_name_83(char *s);
BOOL name_map_mangle(char *OutName,BOOL need83,int snum);

/*The following definitions come from  md4.c  */

void mdfour(unsigned char *out, unsigned char *in, int n);

/*The following definitions come from  message.c  */

int reply_sends(char *inbuf,char *outbuf);
int reply_sendstrt(char *inbuf,char *outbuf);
int reply_sendtxt(char *inbuf,char *outbuf);
int reply_sendend(char *inbuf,char *outbuf);

/*The following definitions come from  nameannounce.c  */

void announce_request(struct work_record *work, struct in_addr ip);
void do_announce_request(char *info, char *to_name, int announce_type, 
			 int from,
			 int to, struct in_addr dest_ip);
void sync_server(enum state_type state, char *serv_name, char *work_name, 
		 int name_type,
                 struct subnet_record *d,
		 struct in_addr ip);
void announce_my_servers_removed(void);
void announce_server(struct subnet_record *d, struct work_record *work,
		     char *name, char *comment, time_t ttl, int server_type);
void announce_host(time_t t);
void reset_announce_timer();
void announce_master(time_t t);
void announce_remote(time_t t);

/*The following definitions come from  namebrowse.c  */

void expire_browse_cache(time_t t);
struct browse_cache_record *add_browser_entry(char *name, int type, char *wg,
					      time_t ttl, struct subnet_record *d,
                                              struct in_addr ip, BOOL local);
void do_browser_lists(time_t t);

/*The following definitions come from  namedbname.c  */

void set_samba_nb_type(void);
BOOL name_equal(struct nmb_name *n1,struct nmb_name *n2);
BOOL ms_browser_name(char *name, int type);
void remove_name(struct subnet_record *d, struct name_record *n);
struct name_record *find_name_on_subnet(struct subnet_record *d,
			struct nmb_name *name, BOOL self_only);
void dump_names(void);
void load_netbios_names(void);
void remove_netbios_name(struct subnet_record *d,
			char *name,int type, enum name_source source);
struct name_record *add_netbios_entry(struct subnet_record *d,
		char *name, int type, int nb_flags, int ttl, 
                enum name_source source, struct in_addr ip, BOOL new_only);
void expire_names(time_t t);

/*The following definitions come from  namedbresp.c  */

void add_response_record(struct subnet_record *d,
				struct response_record *n);
void remove_response_record(struct subnet_record *d,
				struct response_record *n);
struct response_record *make_response_queue_record(enum state_type state,
				int id,uint16 fd,
				int quest_type, char *name,int type, int nb_flags, time_t ttl,
				int server_type, char *my_name, char *my_comment,
				BOOL bcast,BOOL recurse,
				struct in_addr send_ip, struct in_addr reply_to_ip,
				int reply_id);
struct response_record *find_response_record(struct subnet_record **d,
				uint16 id);

/*The following definitions come from  namedbserver.c  */

void remove_old_servers(struct work_record *work, time_t t,
					BOOL remove_all);
struct server_record *find_server(struct work_record *work, char *name);
struct server_record *add_server_entry(struct subnet_record *d, 
				       struct work_record *work,
				       char *name,int servertype, 
				       int ttl,char *comment,
				       BOOL replace);
void expire_servers(time_t t);

/*The following definitions come from  namedbsubnet.c  */

struct subnet_record *find_subnet(struct in_addr ip);
struct subnet_record *find_subnet_all(struct in_addr ip);
void add_workgroup_to_subnet( struct subnet_record *d, char *group);
void add_my_subnets(char *group);
void write_browse_list(time_t t);

/*The following definitions come from  namedbwork.c  */

struct work_record *remove_workgroup(struct subnet_record *d, 
				     struct work_record *work,
					 BOOL remove_all_servers);
struct work_record *find_workgroupstruct(struct subnet_record *d, 
					 fstring name, BOOL add);
void dump_workgroups(void);

/*The following definitions come from  nameelect.c  */

void check_master_browser(time_t t);
void browser_gone(char *work_name, struct in_addr ip);
void send_election(struct subnet_record *d, char *group,uint32 criterion,
		   int timeup,char *name);
void name_unregister_work(struct subnet_record *d, char *name, int name_type);
void name_register_work(struct subnet_record *d, char *name, int name_type,
				int nb_flags, time_t ttl, struct in_addr ip, BOOL bcast);
void become_local_master(struct subnet_record *d, struct work_record *work);
void become_domain_master(struct subnet_record *d, struct work_record *work);
void become_logon_server(struct subnet_record *d, struct work_record *work);
void unbecome_local_master(struct subnet_record *d, struct work_record *work,
				int remove_type);
void unbecome_domain_master(struct subnet_record *d, struct work_record *work,
				int remove_type);
void unbecome_logon_server(struct subnet_record *d, struct work_record *work,
				int remove_type);
void run_elections(time_t t);
void process_election(struct packet_struct *p,char *buf);
BOOL check_elections(void);

/*The following definitions come from  namelogon.c  */

void process_logon_packet(struct packet_struct *p,char *buf,int len);

/*The following definitions come from  namepacket.c  */

void debug_browse_data(char *outbuf, int len);
void initiate_netbios_packet(uint16 *id,
			     int fd,int quest_type,char *name,int name_type,
			     int nb_flags,BOOL bcast,BOOL recurse,
			     struct in_addr to_ip);
void reply_netbios_packet(struct packet_struct *p1,int trn_id,
				int rcode, int rcv_code, int opcode,
                BOOL recursion_available,
                BOOL recursion_desired,
				struct nmb_name *rr_name,int rr_type,int rr_class,int ttl,
				char *data,int len);
void queue_packet(struct packet_struct *packet);
void run_packet_queue();
BOOL listen_for_packets(BOOL run_election);
BOOL send_mailslot_reply(BOOL unique, char *mailslot,int fd,char *buf,int len,char *srcname,
			 char *dstname,int src_type,int dest_type,
			 struct in_addr dest_ip,struct in_addr src_ip);

/*The following definitions come from  namequery.c  */

BOOL name_status(int fd,char *name,int name_type,BOOL recurse,
		 struct in_addr to_ip,char *master,char *rname,
		 void (*fn)());
BOOL name_query(int fd,char *name,int name_type, 
		BOOL bcast,BOOL recurse,
		struct in_addr to_ip, struct in_addr *ip,void (*fn)());

/*The following definitions come from  nameresp.c  */

void expire_netbios_response_entries(time_t t);
struct response_record *queue_netbios_pkt_wins(
				int fd,int quest_type,enum state_type state,
			    char *name,int name_type,int nb_flags, time_t ttl,
				int server_type, char *my_name, char *my_comment,
				struct in_addr send_ip, struct in_addr reply_to_ip);
struct response_record *queue_netbios_packet(struct subnet_record *d,
			int fd,int quest_type,enum state_type state,char *name,
			int name_type,int nb_flags, time_t ttl,
			int server_type, char *my_name, char *my_comment,
			BOOL bcast,BOOL recurse,
			struct in_addr send_ip, struct in_addr reply_to_ip,
			int reply_id);

/*The following definitions come from  nameserv.c  */

void remove_name_entry(struct subnet_record *d, char *name,int type);
void add_my_name_entry(struct subnet_record *d,char *name,int type,int nb_flags);
void add_domain_logon_names(void);
void add_domain_master_bcast(void);
void add_domain_master_wins(void);
void add_domain_names(time_t t);
void add_my_names(void);
void remove_my_names();
void refresh_my_names(time_t t);
void query_refresh_names(time_t t);

/*The following definitions come from  nameservreply.c  */

void add_name_respond(struct subnet_record *d, int fd, struct in_addr from_ip,
				uint16 response_id,
				struct nmb_name *name,
				int nb_flags, int ttl, struct in_addr register_ip,
				BOOL new_owner, struct in_addr reply_to_ip);
void reply_name_release(struct packet_struct *p);
void reply_name_reg(struct packet_struct *p);
void reply_name_status(struct packet_struct *p);
void reply_name_query(struct packet_struct *p);

/*The following definitions come from  nameservresp.c  */

void debug_state_type(int state);
void response_netbios_packet(struct packet_struct *p);

/*The following definitions come from  namework.c  */

void reset_server(char *name, int state, struct in_addr ip);
void tell_become_backup(void);
BOOL same_context(struct dgram_packet *dgram);
void process_browse_packet(struct packet_struct *p,char *buf,int len);

/*The following definitions come from  nmbd.c  */

BOOL reload_services(BOOL test);

/*The following definitions come from  nmblib.c  */

char *lookup_opcode_name( int opcode );
void debug_nmb_packet(struct packet_struct *p);
char *namestr(struct nmb_name *n);
void free_nmb_packet(struct nmb_packet *nmb);
void free_packet(struct packet_struct *packet);
struct packet_struct *read_packet(int fd,enum packet_type packet_type);
void make_nmb_name(struct nmb_name *n,char *name,int type,char *this_scope);
BOOL send_packet(struct packet_struct *p);
struct packet_struct *receive_packet(int fd,enum packet_type type,int t);

/*The following definitions come from  nmbsync.c  */

void sync_browse_lists(struct subnet_record *d, struct work_record *work,
		       char *name, int nm_type, struct in_addr ip, BOOL local);

/*The following definitions come from  ntclient.c  */

void cmd_lsa_query_info(struct cli_state *cli, struct client_info *info);
void cmd_sam_query_users(struct cli_state *cli, struct client_info *info);
void cmd_nt_login_test(struct cli_state *cli, struct client_info *info);

/*The following definitions come from  nterr.c  */

char *get_nt_error_msg(uint16 nt_code);

/*The following definitions come from  params.c  */

BOOL pm_process( char *FileName,
                 BOOL (*sfunc)(char *),
                 BOOL (*pfunc)(char *, char *) );

/*The following definitions come from  password.c  */

void generate_next_challenge(char *challenge);
BOOL set_challenge(char *challenge);
BOOL last_challenge(char *challenge);
user_struct *get_valid_user_struct(uint16 vuid);
void invalidate_vuid(uint16 vuid);
char *validated_username(uint16 vuid);
uint16 register_vuid(int uid,int gid, char *name,BOOL guest);
void add_session_user(char *user, BOOL *changed_to_guest);
void dfs_unlogin(void);
BOOL password_check(char *password);
BOOL smb_password_ok(struct smb_passwd *smb_pass,
				char lm_pass[24], char nt_pass[24]);
BOOL password_ok(char *user, BOOL *guest,
				char *password, int pwlen,
				char *nt_pass, int nt_pwlen,
				struct passwd *pwd);
BOOL user_ok(char *user,int snum);
BOOL authorise_login(int snum,char *user,char *password, int pwlen, 
		     BOOL *guest,BOOL *force,uint16 vuid);
BOOL check_hosts_equiv(char *user, BOOL *guest);

/*The following definitions come from  pcap.c  */

BOOL pcap_printername_ok(char *pszPrintername, char *pszPrintcapname);
void pcap_printer_fn(void (*fn)());

/*The following definitions come from  pipes.c  */

int reply_open_pipe_and_X(char *inbuf,char *outbuf,int length,int bufsize);
int reply_pipe_close(char *inbuf,char *outbuf);
BOOL api_LsarpcSNPHS(int pnum, int cnum, char *param);
BOOL api_LsarpcTNP(int cnum,int uid, char *param,char *data,
		     int mdrcnt,int mprcnt,
		     char **rdata,char **rparam,
		     int *rdata_len,int *rparam_len);

/*The following definitions come from  predict.c  */

int read_predict(int fd,int offset,char *buf,char **ptr,int num);
void do_read_prediction();
void invalidate_read_prediction(int fd);

/*The following definitions come from  printing.c  */

void lpq_reset(int snum);
void print_file(int fnum);
int get_printqueue(int snum,int cnum,print_queue_struct **queue,
		   print_status_struct *status);
void del_printqueue(int cnum,int snum,int jobid);
void status_printjob(int cnum,int snum,int jobid,int status);
int printjob_encode(int snum, int job);
void printjob_decode(int jobid, int *snum, int *job);

/*The following definitions come from  pwd_validate.c  */

BOOL server_connect_init(struct cli_state *clnt, char my_netbios_name[16],
				struct in_addr dest_ip, char *desthost);
BOOL server_cryptkey(struct cli_state *clnt, char my_netbios_name[16]);
BOOL server_validate2(struct cli_state *clnt, char *user, char *domain, 
		     char *pass, int passlen,
		     char *ntpass, int ntpasslen);
BOOL server_validate(struct cli_state *clnt, char *user, char *domain, 
		     char *pass, int passlen,
		     char *ntpass, int ntpasslen);

/*The following definitions come from  quotas.c  */

BOOL disk_quotas(char *path, int *bsize, int *dfree, int *dsize);
BOOL disk_quotas(char *path, int *bsize, int *dfree, int *dsize);
BOOL disk_quotas(char *path, int *bsize, int *dfree, int *dsize);
BOOL disk_quotas(char *path, int *bsize, int *dfree, int *dsize);
BOOL disk_quotas(char *path, int *bsize, int *dfree, int *dsize);
BOOL disk_quotas(char *path, int *bsize, int *dfree, int *dsize);

/*The following definitions come from  replace.c  */

char *Strstr(char *s, char *p);
time_t Mktime(struct tm      *t);
int InNetGr(char *group,char *host,char *user,char *dom);
void *malloc_wrapped(int size,char *file,int line);
void *realloc_wrapped(void *ptr,int size,char *file,int line);
void free_wrapped(void *ptr,char *file,int line);
void *memcpy_wrapped(void *d,void *s,int l,char *fname,int line);

/*The following definitions come from  reply.c  */

int reply_special(char *inbuf,char *outbuf);
int reply_tcon(char *inbuf,char *outbuf);
int reply_tcon_and_X(char *inbuf,char *outbuf,int length,int bufsize);
int reply_unknown(char *inbuf,char *outbuf);
int reply_ioctl(char *inbuf,char *outbuf);
int reply_sesssetup_and_X(char *inbuf,char *outbuf,int length,int bufsize);
int reply_chkpth(char *inbuf,char *outbuf);
int reply_getatr(char *inbuf,char *outbuf);
int reply_setatr(char *inbuf,char *outbuf);
int reply_dskattr(char *inbuf,char *outbuf);
int reply_search(char *inbuf,char *outbuf);
int reply_fclose(char *inbuf,char *outbuf);
int reply_open(char *inbuf,char *outbuf);
int reply_open_and_X(char *inbuf,char *outbuf,int length,int bufsize);
int reply_ulogoffX(char *inbuf,char *outbuf,int length,int bufsize);
int reply_mknew(char *inbuf,char *outbuf);
int reply_ctemp(char *inbuf,char *outbuf);
int reply_unlink(char *inbuf,char *outbuf);
int reply_readbraw(char *inbuf, char *outbuf);
int reply_lockread(char *inbuf,char *outbuf);
int reply_read(char *inbuf,char *outbuf);
int reply_read_and_X(char *inbuf,char *outbuf,int length,int bufsize);
int reply_writebraw(char *inbuf,char *outbuf);
int reply_writeunlock(char *inbuf,char *outbuf);
int reply_write(char *inbuf,char *outbuf,int dum1,int dum2);
int reply_write_and_X(char *inbuf,char *outbuf,int length,int bufsize);
int reply_lseek(char *inbuf,char *outbuf);
int reply_flush(char *inbuf,char *outbuf);
int reply_exit(char *inbuf,char *outbuf);
int reply_close(char *inbuf,char *outbuf);
int reply_writeclose(char *inbuf,char *outbuf);
int reply_lock(char *inbuf,char *outbuf);
int reply_unlock(char *inbuf,char *outbuf);
int reply_tdis(char *inbuf,char *outbuf);
int reply_echo(char *inbuf,char *outbuf);
int reply_printopen(char *inbuf,char *outbuf);
int reply_printclose(char *inbuf,char *outbuf);
int reply_printqueue(char *inbuf,char *outbuf);
int reply_printwrite(char *inbuf,char *outbuf);
int reply_mkdir(char *inbuf,char *outbuf);
int reply_rmdir(char *inbuf,char *outbuf);
int reply_mv(char *inbuf,char *outbuf);
int reply_copy(char *inbuf,char *outbuf);
int reply_setdir(char *inbuf,char *outbuf);
int reply_lockingX(char *inbuf,char *outbuf,int length,int bufsize);
int reply_readbmpx(char *inbuf,char *outbuf,int length,int bufsize);
int reply_writebmpx(char *inbuf,char *outbuf);
int reply_writebs(char *inbuf,char *outbuf);
int reply_setattrE(char *inbuf,char *outbuf);
int reply_getattrE(char *inbuf,char *outbuf);

/*The following definitions come from  rpc_pipes/lsa_hnd.c  */

void create_pol_hnd(LSA_POL_HND *hnd);
void init_lsa_policy_hnd(void);
BOOL open_lsa_policy_hnd(LSA_POL_HND *hnd);
int find_lsa_policy_by_hnd(LSA_POL_HND *hnd);
BOOL set_lsa_policy_samr_rid(LSA_POL_HND *hnd, uint32 rid);
BOOL set_lsa_policy_samr_pol_status(LSA_POL_HND *hnd, uint32 pol_status);
BOOL set_lsa_policy_samr_sid(LSA_POL_HND *hnd, DOM_SID *sid);
uint32 get_lsa_policy_samr_rid(LSA_POL_HND *hnd);
BOOL close_lsa_policy_hnd(LSA_POL_HND *hnd);

/*The following definitions come from  rpc_pipes/lsaparse.c  */

void make_q_logon_ctrl2(LSA_Q_LOGON_CTRL2 *q_l, char *server_name,
			uint32 function_code);
char* lsa_io_q_logon_ctrl2(BOOL io, LSA_Q_LOGON_CTRL2 *q_l, char *q, char *base, int align, int depth);
void make_r_logon_ctrl2(LSA_R_LOGON_CTRL2 *r_l, uint32 query_level,
				uint32 flags, uint32 pdc_status, uint32 logon_attempts,
				uint32 tc_status, char *trusted_domain_name);
char* lsa_io_r_logon_ctrl2(BOOL io, LSA_R_LOGON_CTRL2 *r_l, char *q, char *base, int align, int depth);
void make_r_trust_dom(LSA_R_TRUST_DOM_LIST *r_t,
			uint32 num_doms, char *dom_name);
char* lsa_io_r_trust_dom(BOOL io, LSA_R_TRUST_DOM_LIST *r_t, char *q, char *base, int align, int depth);
void make_q_trust_dom(LSA_Q_TRUST_DOM_LIST *q_l, char *server_name,
			uint32 function_code);
char* lsa_io_q_trust_dom(BOOL io, LSA_Q_TRUST_DOM_LIST *q_l, char *q, char *base, int align, int depth);
void make_q_open_pol(LSA_Q_OPEN_POL *r_q, char *server_name,
			uint32 attributes, uint32 sec_qos,
			uint32 desired_access);
char* lsa_io_q_open_pol(BOOL io, LSA_Q_OPEN_POL *r_q, char *q, char *base, int align, int depth);
char* lsa_io_r_open_pol(BOOL io, LSA_R_OPEN_POL *r_p, char *q, char *base, int align, int depth);
void make_q_query(LSA_Q_QUERY_INFO *q_q, LSA_POL_HND *hnd, uint16 info_class);
char* lsa_io_q_query(BOOL io, LSA_Q_QUERY_INFO *q_q, char *q, char *base, int align, int depth);
char* lsa_io_q_enum_trust_dom(BOOL io, LSA_Q_ENUM_TRUST_DOM *q_e, char *q, char *base, int align, int depth);
void make_r_enum_trust_dom(LSA_R_ENUM_TRUST_DOM *r_e,
				uint32 enum_context, char *domain_name, char *domain_sid,
				uint32 status);
char* lsa_io_r_enum_trust_dom(BOOL io, LSA_R_ENUM_TRUST_DOM *r_e, char *q, char *base, int align, int depth);
void make_q_close(LSA_Q_CLOSE *q_c, LSA_POL_HND *hnd);
char* lsa_io_q_close(BOOL io, LSA_Q_CLOSE *q_c, char *q, char *base, int align, int depth);
void make_r_close(LSA_R_CLOSE *q_r, LSA_POL_HND *hnd);
char* lsa_io_r_close(BOOL io, LSA_R_CLOSE *r_c, char *q, char *base, int align, int depth);
char* lsa_io_r_query(BOOL io, LSA_R_QUERY_INFO *r_q, char *q, char *base, int align, int depth);
char* lsa_io_q_lookup_sids(BOOL io, LSA_Q_LOOKUP_SIDS *q_s, char *q, char *base, int align, int depth);
char* lsa_io_r_lookup_sids(BOOL io, LSA_R_LOOKUP_SIDS *r_s, char *q, char *base, int align, int depth);
char* lsa_io_q_lookup_rids(BOOL io, LSA_Q_LOOKUP_RIDS *q_r, char *q, char *base, int align, int depth);
char* lsa_io_r_lookup_rids(BOOL io, LSA_R_LOOKUP_RIDS *r_r, char *q, char *base, int align, int depth);
void make_q_req_chal(LSA_Q_REQ_CHAL *q_c,
				char *logon_srv, char *logon_clnt,
				DOM_CHAL *clnt_chal);
char* lsa_io_q_req_chal(BOOL io, LSA_Q_REQ_CHAL *q_c, char *q, char *base, int align, int depth);
char* lsa_io_r_req_chal(BOOL io, LSA_R_REQ_CHAL *r_c, char *q, char *base, int align, int depth);
void make_q_auth_2(LSA_Q_AUTH_2 *q_a,
		char *logon_srv, char *acct_name, uint16 sec_chan, char *comp_name,
		DOM_CHAL *clnt_chal, uint32 clnt_flgs);
char* lsa_io_q_auth_2(BOOL io, LSA_Q_AUTH_2 *q_a, char *q, char *base, int align, int depth);
char* lsa_io_r_auth_2(BOOL io, LSA_R_AUTH_2 *r_a, char *q, char *base, int align, int depth);
void make_q_srv_pwset(LSA_Q_SRV_PWSET *q_s, char sess_key[8],
		char *logon_srv, char *acct_name, uint16 sec_chan, char *comp_name,
		DOM_CRED *cred, char nt_cypher[16]);
char* lsa_io_q_srv_pwset(BOOL io, LSA_Q_SRV_PWSET *q_s, char *q, char *base, int align, int depth);
char* lsa_io_r_srv_pwset(BOOL io, LSA_R_SRV_PWSET *r_s, char *q, char *base, int align, int depth);
char* lsa_io_user_info(BOOL io, LSA_USER_INFO *usr, char *q, char *base, int align, int depth);
char* lsa_io_q_sam_logon(BOOL io, LSA_Q_SAM_LOGON *q_l, char *q, char *base, int align, int depth);
char* lsa_io_r_sam_logon(BOOL io, LSA_R_SAM_LOGON *r_l, char *q, char *base, int align, int depth);
char* lsa_io_q_sam_logoff(BOOL io, LSA_Q_SAM_LOGOFF *q_l, char *q, char *base, int align, int depth);
char* lsa_io_r_sam_logoff(BOOL io, LSA_R_SAM_LOGOFF *r_l, char *q, char *base, int align, int depth);

/*The following definitions come from  rpc_pipes/ntclientlogin.c  */

BOOL do_nt_session_open(struct cli_state *cli, uint16 *fnum,
				char *dest_host, char *myhostname,
				char *mach_acct,
				char *username, char *workgroup,
				uchar sess_key[8], DOM_CRED *clnt_cred);
BOOL do_nt_srv_pwset(struct cli_state *cli, uint16 fnum,
				uint8 sess_key[8], DOM_CRED *clnt_cred, DOM_CRED *rtn_cred,
				char *new_mach_pwd,
				char *dest_host, char *mach_acct, char *myhostname);
void make_nt_login_info(DOM_ID_INFO_1 *id1,
				uchar sess_key[8],
				char *workgroup, char *myhostname,
				uint32 smb_userid, char *username);
BOOL do_nt_login(struct cli_state *cli, uint16 fnum,
				uint8 sess_key[8], DOM_CRED *clnt_cred, DOM_CRED *rtn_cred,
				DOM_ID_INFO_1 *id1, char *dest_host, char *myhostname,
				LSA_USER_INFO *user_info1);
BOOL do_nt_logoff(struct cli_state *cli, uint16 fnum,
				uint8 sess_key[8], DOM_CRED *clnt_cred, DOM_CRED *rtn_cred,
				DOM_ID_INFO_1 *id1, char *dest_host, char *myhostname);
void do_nt_session_close(struct cli_state *cli, uint16 fnum);

/*The following definitions come from  rpc_pipes/ntclientlsa.c  */

BOOL do_lsa_session_open(struct cli_state *cli, struct client_info *info);
void do_lsa_session_close(struct cli_state *cli, struct client_info *info);
BOOL do_lsa_open_policy(struct cli_state *cli, uint16 fnum,
			char *server_name, LSA_POL_HND *hnd);
BOOL do_lsa_query_info_pol(struct cli_state *cli, uint16 fnum,
			LSA_POL_HND *hnd, uint16 info_class,
			fstring domain_name, fstring domain_sid);
BOOL do_lsa_close(struct cli_state *cli, uint16 fnum, LSA_POL_HND *hnd);

/*The following definitions come from  rpc_pipes/ntclientnet.c  */

BOOL do_lsa_logon_ctrl2(struct cli_state *cli, uint16 fnum,
		char *host_name, uint32 status_level);
BOOL do_lsa_auth2(struct cli_state *cli, uint16 fnum,
		char *logon_srv, char *acct_name, uint16 sec_chan, char *comp_name,
        DOM_CHAL *clnt_chal, uint32 neg_flags, DOM_CHAL *srv_chal);
BOOL do_lsa_req_chal(struct cli_state *cli, uint16 fnum,
		char *desthost, char *myhostname,
        DOM_CHAL *clnt_chal, DOM_CHAL *srv_chal);
BOOL do_lsa_srv_pwset(struct cli_state *cli, uint16 fnum,
		uchar sess_key[8], DOM_CRED *sto_clnt_cred,
		char *logon_srv, char *mach_acct, uint16 sec_chan_type, char *comp_name,
        DOM_CRED *clnt_cred, DOM_CRED *srv_cred,
		char nt_owf_new_mach_pwd[16]);
BOOL do_lsa_sam_logon(struct cli_state *cli, uint16 fnum,
		uchar sess_key[8], DOM_CRED *sto_clnt_cred,
		char *logon_srv, char *comp_name,
        DOM_CRED *clnt_cred, DOM_CRED *rtn_cred,
		uint16 logon_level, uint16 switch_value,
		DOM_ID_INFO_1 *id1, uint16 switch_value2,
		LSA_USER_INFO *user_info,
		DOM_CRED *srv_cred);
BOOL do_lsa_sam_logoff(struct cli_state *cli, uint16 fnum,
		uchar sess_key[8], DOM_CRED *sto_clnt_cred,
		char *logon_srv, char *comp_name,
        DOM_CRED *clnt_cred, DOM_CRED *rtn_cred,
		uint16 logon_level, uint16 switch_value,
		DOM_ID_INFO_1 *id1, uint16 switch_value2,
		DOM_CRED *srv_cred);

/*The following definitions come from  rpc_pipes/ntclientpipe.c  */

BOOL rpc_pipe_set_hnd_state(struct cli_state *cli,
				char *pipe_name, uint16 fnum, uint16 device_state);
BOOL rpc_pipe_bind(struct cli_state *cli, char *pipe_name, uint16 fnum, 
				RPC_IFACE *abstract, RPC_IFACE *transfer);

/*The following definitions come from  rpc_pipes/ntclientsamr.c  */

BOOL do_samr_session_open(struct cli_state *cli, struct client_info *info);
void do_samr_session_close(struct cli_state *cli, struct client_info *info);
BOOL do_samr_enum_sam_db(struct cli_state *cli, uint16 fnum, 
				LSA_POL_HND *pol, uint32 size,
				struct acct_info sam[MAX_SAM_ENTRIES],
				int *num_sam_users);
BOOL do_samr_open_policy(struct cli_state *cli, uint16 fnum, 
				char *srv_name, uint32 unknown_0,
				LSA_POL_HND *rtn_pol);
BOOL do_samr_open_secret(struct cli_state *cli, uint16 fnum, 
				LSA_POL_HND *query_pol, uint32 rid,
				char *sid, LSA_POL_HND *rtn_pol);

/*The following definitions come from  rpc_pipes/ntclientstatus.c  */

BOOL do_nt_status_check(struct in_addr dest_ip, char *dest_host, char *myhostname);

/*The following definitions come from  rpc_pipes/ntclienttrust.c  */

BOOL trust_account_check(struct in_addr dest_ip, char *dest_host,
				char *myhostname, char *domain, fstring mach_acct,
				fstring new_mach_pwd);

/*The following definitions come from  rpc_pipes/pipe_hnd.c  */

void reset_chain_pnum(void);
void init_rpc_pipe_hnd(void);
int open_rpc_pipe_hnd(char *pipe_name, int cnum);
char *get_rpc_pipe_hnd_name(int pnum);
BOOL set_rpc_pipe_hnd_state(int pnum, int cnum, uint16 device_state);
BOOL close_rpc_pipe_hnd(int pnum, int cnum);
int get_rpc_pipe_num(char *buf, int where);

/*The following definitions come from  rpc_pipes/pipenetlog.c  */

BOOL api_netlogrpcTNP(int cnum,int uid, char *param,char *data,
		     int mdrcnt,int mprcnt,
		     char **rdata,char **rparam,
		     int *rdata_len,int *rparam_len);

/*The following definitions come from  rpc_pipes/pipentlsa.c  */

BOOL api_ntLsarpcTNP(int cnum,int uid, char *param,char *data,
		     int mdrcnt,int mprcnt,
		     char **rdata,char **rparam,
		     int *rdata_len,int *rparam_len);

/*The following definitions come from  rpc_pipes/pipesamr.c  */

BOOL api_samrTNP(int cnum,int uid, char *param,char *data,
		     int mdrcnt,int mprcnt,
		     char **rdata,char **rparam,
		     int *rdata_len,int *rparam_len);

/*The following definitions come from  rpc_pipes/pipesrvsvc.c  */

BOOL api_srvsvcTNP(int cnum,int uid, char *param,char *data,
		     int mdrcnt,int mprcnt,
		     char **rdata,char **rparam,
		     int *rdata_len,int *rparam_len);

/*The following definitions come from  rpc_pipes/pipeutil.c  */

uint32 get_rpc_call_id(void);
void initrpcreply(char *inbuf, char *q);
void endrpcreply(char *inbuf, char *q, int datalen, int rtnval, int *rlen);
BOOL name_to_rid(char *user_name, uint32 *u_rid, uint32 *g_rid);
char *dom_sid_to_string(DOM_SID *sid);
int make_dom_sids(char *sids_str, DOM_SID *sids, int max_sids);
int make_dom_gids(char *gids_str, DOM_GID *gids);
int create_rpc_request(uint32 call_id, uint8 op_num, char *q, int data_len);
int create_rpc_reply(uint32 call_id, char *q, int data_len);

/*The following definitions come from  rpc_pipes/pipewkssvc.c  */

BOOL api_wkssvcTNP(int cnum,int uid, char *param,char *data,
		     int mdrcnt,int mprcnt,
		     char **rdata,char **rparam,
		     int *rdata_len,int *rparam_len);

/*The following definitions come from  rpc_pipes/samrparse.c  */

char* samr_io_q_close(BOOL io, SAMR_Q_CLOSE *q_u, char *q, char *base, int align, int depth);
char* samr_io_r_close(BOOL io, SAMR_R_CLOSE *r_u, char *q, char *base, int align, int depth);
void make_samr_q_open_secret(SAMR_Q_OPEN_SECRET *q_u,
				LSA_POL_HND *pol, uint32 rid, char *sid);
char* samr_io_q_open_secret(BOOL io, SAMR_Q_OPEN_SECRET *q_u, char *q, char *base, int align, int depth);
char* samr_io_r_open_secret(BOOL io, SAMR_R_OPEN_SECRET *r_u, char *q, char *base, int align, int depth);
void make_samr_q_enum_sam_db(SAMR_Q_ENUM_SAM_DB *q_e, LSA_POL_HND *pol, uint32 size);
char* samr_io_q_enum_sam_db(BOOL io, SAMR_Q_ENUM_SAM_DB *q_e, char *q, char *base, int align, int depth);
void make_samr_r_enum_sam_db(SAMR_R_ENUM_SAM_DB *r_u,
		uint32 num_sam_entries, struct smb_passwd pass[MAX_SAM_ENTRIES], uint32 status);
char* samr_io_r_enum_sam_db(BOOL io, SAMR_R_ENUM_SAM_DB *r_u, char *q, char *base, int align, int depth);
char* samr_io_q_lookup_rids(BOOL io, SAMR_Q_LOOKUP_RIDS *q_u, char *q, char *base, int align, int depth);
void make_samr_r_lookup_rids(SAMR_R_LOOKUP_RIDS *r_u,
		uint32 num_rids, uint32 rid, uint32 status);
char* samr_io_r_lookup_rids(BOOL io, SAMR_R_LOOKUP_RIDS *r_u, char *q, char *base, int align, int depth);
char* samr_io_q_unknown_22(BOOL io, SAMR_Q_UNKNOWN_22 *q_u, char *q, char *base, int align, int depth);
char* samr_io_r_unknown_22(BOOL io, SAMR_R_UNKNOWN_22 *r_u, char *q, char *base, int align, int depth);
char* samr_io_q_unknown_24(BOOL io, SAMR_Q_UNKNOWN_24 *q_u, char *q, char *base, int align, int depth);
void make_samr_r_unknown_24(SAMR_R_UNKNOWN_24 *r_u,
				uint16 unknown_0, NTTIME *expiry, char *mach_acct,
				uint32 acct_ctrl,
				uint32 unknown_id_0, uint32 status);
char* samr_io_r_unknown_24(BOOL io, SAMR_R_UNKNOWN_24 *r_u, char *q, char *base, int align, int depth);
char* samr_io_q_unknown_32(BOOL io, SAMR_Q_UNKNOWN_32 *q_u, char *q, char *base, int align, int depth);
char* samr_io_r_unknown_32(BOOL io, SAMR_R_UNKNOWN_32 *r_u, char *q, char *base, int align, int depth);
void make_samr_q_open_policy(SAMR_Q_OPEN_POLICY *q_u,
				char *srv_name, uint32 unknown_0);
char* samr_io_q_open_policy(BOOL io, SAMR_Q_OPEN_POLICY *q_u, char *q, char *base, int align, int depth);
char* samr_io_r_open_policy(BOOL io, SAMR_R_OPEN_POLICY *r_u, char *q, char *base, int align, int depth);

/*The following definitions come from  rpc_pipes/smbparse.c  */

char* smb_io_utime(BOOL io, UTIME *t, char *q, char *base, int align, int depth);
char* smb_io_time(BOOL io, NTTIME *nttime, char *q, char *base, int align, int depth);
void make_dom_sid(DOM_SID *sid, char *domsid);
char* smb_io_dom_sid(BOOL io, DOM_SID *sid, char *q, char *base, int align, int depth);
void make_uni_hdr(UNIHDR *hdr, int max_len, int len, uint16 terminate);
char* smb_io_unihdr(BOOL io, UNIHDR *hdr, char *q, char *base, int align, int depth);
void make_uni_hdr2(UNIHDR2 *hdr, int max_len, int len, uint16 terminate);
char* smb_io_unihdr2(BOOL io, UNIHDR2 *hdr2, char *q, char *base, int align, int depth);
void make_unistr(UNISTR *str, char *buf);
char* smb_io_unistr(BOOL io, UNISTR *uni, char *q, char *base, int align, int depth);
void make_unistr2(UNISTR2 *str, char *buf, int len);
char* smb_io_unistr2(BOOL io, UNISTR2 *uni2, uint32 buffer, char *q, char *base, int align, int depth);
void make_dom_sid2(DOM_SID2 *sid2, char *sid_str);
char* smb_io_dom_sid2(BOOL io, DOM_SID2 *sid2, char *q, char *base, int align, int depth);
void make_dom_rid2(DOM_RID2 *rid2, uint32 rid);
char* smb_io_dom_rid2(BOOL io, DOM_RID2 *rid2, char *q, char *base, int align, int depth);
void make_dom_rid3(DOM_RID3 *rid3, uint32 rid);
char* smb_io_dom_rid3(BOOL io, DOM_RID3 *rid3, char *q, char *base, int align, int depth);
void make_dom_rid4(DOM_RID4 *rid4, uint16 unknown, uint16 attr, uint32 rid);
char* smb_io_dom_rid4(BOOL io, DOM_RID4 *rid4, char *q, char *base, int align, int depth);
void make_sam_entry(SAM_ENTRY *sam, char *sam_name, uint32 rid);
char* smb_io_sam_entry(BOOL io, SAM_ENTRY *sam, char *q, char *base, int align, int depth);
void make_clnt_srv(DOM_CLNT_SRV *log, char *logon_srv, char *comp_name);
char* smb_io_clnt_srv(BOOL io, DOM_CLNT_SRV *log, char *q, char *base, int align, int depth);
void make_log_info(DOM_LOG_INFO *log, char *logon_srv, char *acct_name,
		uint16 sec_chan, char *comp_name);
char* smb_io_log_info(BOOL io, DOM_LOG_INFO *log, char *q, char *base, int align, int depth);
char* smb_io_chal(BOOL io, DOM_CHAL *chal, char *q, char *base, int align, int depth);
char* smb_io_cred(BOOL io, DOM_CRED *cred, char *q, char *base, int align, int depth);
void make_clnt_info2(DOM_CLNT_INFO2 *clnt,
				char *logon_srv, char *comp_name,
				DOM_CRED *clnt_cred);
char* smb_io_clnt_info2(BOOL io, DOM_CLNT_INFO2 *clnt, char *q, char *base, int align, int depth);
void make_clnt_info(DOM_CLNT_INFO *clnt,
		char *logon_srv, char *acct_name,
		uint16 sec_chan, char *comp_name,
				DOM_CRED *cred);
char* smb_io_clnt_info(BOOL io, DOM_CLNT_INFO *clnt, char *q, char *base, int align, int depth);
void make_logon_id(DOM_LOGON_ID *log, uint32 log_id_low, uint32 log_id_high);
char* smb_io_logon_id(BOOL io, DOM_LOGON_ID *log, char *q, char *base, int align, int depth);
void make_arc4_owf(ARC4_OWF *hash, char data[16]);
char* smb_io_arc4_owf(BOOL io, ARC4_OWF *hash, char *q, char *base, int align, int depth);
void make_id_info1(DOM_ID_INFO_1 *id, char *domain_name,
				uint32 param_ctrl, uint32 log_id_low, uint32 log_id_high,
				char *user_name, char *wksta_name,
				char *sess_key,
				unsigned char lm_cypher[16], unsigned char nt_cypher[16]);
char* smb_io_id_info1(BOOL io, DOM_ID_INFO_1 *id, char *q, char *base, int align, int depth);
void make_sam_info(DOM_SAM_INFO *sam,
				char *logon_srv, char *comp_name, DOM_CRED *clnt_cred,
				DOM_CRED *rtn_cred, uint16 logon_level, uint16 switch_value,
				DOM_ID_INFO_1 *id1, uint16 switch_value2);
char* smb_io_sam_info(BOOL io, DOM_SAM_INFO *sam, char *q, char *base, int align, int depth);
char* smb_io_gid(BOOL io, DOM_GID *gid, char *q, char *base, int align, int depth);
void make_rpc_hdr(RPC_HDR *hdr, enum RPC_PKT_TYPE pkt_type, uint8 frag,
				uint32 call_id, int data_len);
char* smb_io_rpc_hdr(BOOL io, RPC_HDR *rpc, char *q, char *base, int align, int depth);
void make_rpc_iface(RPC_IFACE *ifc, char data[16], uint32 version);
char* smb_io_rpc_iface(BOOL io, RPC_IFACE *ifc, char *q, char *base, int align, int depth);
void make_rpc_addr_str(RPC_ADDR_STR *str, char *name);
char* smb_io_rpc_addr_str(BOOL io, RPC_ADDR_STR *str, char *q, char *base, int align, int depth);
void make_rpc_hdr_bba(RPC_HDR_BBA *bba, uint16 max_tsize, uint16 max_rsize, uint32 assoc_gid);
char* smb_io_rpc_hdr_bba(BOOL io, RPC_HDR_BBA *rpc, char *q, char *base, int align, int depth);
void make_rpc_hdr_rb(RPC_HDR_RB *rpc, 
				uint16 max_tsize, uint16 max_rsize, uint32 assoc_gid,
				uint32 num_elements, uint16 context_id, uint8 num_syntaxes,
				RPC_IFACE *abstract, RPC_IFACE *transfer);
char* smb_io_rpc_hdr_rb(BOOL io, RPC_HDR_RB *rpc, char *q, char *base, int align, int depth);
void make_rpc_results(RPC_RESULTS *res, 
				uint8 num_results, uint16 result, uint16 reason);
char* smb_io_rpc_results(BOOL io, RPC_RESULTS *res, char *q, char *base, int align, int depth);
void make_rpc_hdr_ba(RPC_HDR_BA *rpc, 
				uint16 max_tsize, uint16 max_rsize, uint32 assoc_gid,
				char *pipe_addr,
				uint8 num_results, uint16 result, uint16 reason,
				RPC_IFACE *transfer);
char* smb_io_rpc_hdr_ba(BOOL io, RPC_HDR_BA *rpc, char *q, char *base, int align, int depth);
void make_obj_attr(LSA_OBJ_ATTR *attr, uint32 attributes, uint32 sec_qos);
char* smb_io_obj_attr(BOOL io, LSA_OBJ_ATTR *attr, char *q, char *base, int align, int depth);
void make_rpc_hdr_rr(RPC_HDR_RR *hdr, enum RPC_PKT_TYPE pkt_type,
				uint32 call_id, int data_len, uint8 opnum);
char* smb_io_rpc_hdr_rr(BOOL io, RPC_HDR_RR *rpc, char *q, char *base, int align, int depth);
char* smb_io_pol_hnd(BOOL io, LSA_POL_HND *pol, char *q, char *base, int align, int depth);
char* smb_io_dom_query_3(BOOL io, DOM_QUERY_3 *d_q, char *q, char *base, int align, int depth);
char* smb_io_dom_query_5(BOOL io, DOM_QUERY_3 *d_q, char *q, char *base, int align, int depth);
char* smb_io_dom_query(BOOL io, DOM_QUERY *d_q, char *q, char *base, int align, int depth);
char* smb_io_dom_r_ref(BOOL io, DOM_R_REF *r_r, char *q, char *base, int align, int depth);
char* smb_io_dom_name(BOOL io, DOM_NAME *name, char *q, char *base, int align, int depth);
char* smb_io_neg_flags(BOOL io, NEG_FLAGS *neg, char *q, char *base, int align, int depth);
void make_netinfo_3(NETLOGON_INFO_3 *info, uint32 flags, uint32 logon_attempts);
char* smb_io_netinfo_3(BOOL io, NETLOGON_INFO_3 *info, char *q, char *base, int align, int depth);
void make_netinfo_1(NETLOGON_INFO_1 *info, uint32 flags, uint32 pdc_status);
char* smb_io_netinfo_1(BOOL io, NETLOGON_INFO_1 *info, char *q, char *base, int align, int depth);
void make_netinfo_2(NETLOGON_INFO_2 *info, uint32 flags, uint32 pdc_status,
				uint32 tc_status, char *trusted_dc_name);
char* smb_io_netinfo_2(BOOL io, NETLOGON_INFO_2 *info, char *q, char *base, int align, int depth);

/*The following definitions come from  rpc_pipes/srvparse.c  */

char* srv_io_share_info1_str(BOOL io, SH_INFO_1_STR *sh1, char *q, char *base, int align, int depth);
char* srv_io_share_info1(BOOL io, SH_INFO_1 *sh1, char *q, char *base, int align, int depth);
char* srv_io_share_1_ctr(BOOL io, SHARE_INFO_1_CTR *ctr, char *q, char *base, int align, int depth);
char* srv_io_q_net_share_enum(BOOL io, SRV_Q_NET_SHARE_ENUM *q_n, char *q, char *base, int align, int depth);
char* srv_io_r_net_share_enum(BOOL io, SRV_R_NET_SHARE_ENUM *r_n, char *q, char *base, int align, int depth);

/*The following definitions come from  rpc_pipes/wksparse.c  */

char* wks_io_q_unknown_0(BOOL io, WKS_Q_UNKNOWN_0 *q_u, char *q, char *base, int align, int depth);
char* wks_io_r_unknown_0(BOOL io, WKS_R_UNKNOWN_0 *r_u, char *q, char *base, int align, int depth);

/*The following definitions come from  server.c  */

struct cli_state *pwd_server_connection(void);
void  *dflt_sig(void);
void  killkids(void);
mode_t unix_mode(int cnum,int dosmode);
int dos_mode(int cnum,char *path,struct stat *sbuf);
int dos_chmod(int cnum,char *fname,int dosmode,struct stat *st);
int file_utime(int cnum, char *fname, struct utimbuf *times);
BOOL set_filetime(int cnum, char *fname, time_t mtime);
BOOL unix_convert(char *name,int cnum,pstring saved_last_component, BOOL *bad_path);
int disk_free(char *path,int *bsize,int *dfree,int *dsize);
int sys_disk_free(char *path,int *bsize,int *dfree,int *dsize);
BOOL check_name(char *name,int cnum);
void sync_file(int fnum);
void close_file(int fnum, BOOL normal_close);
BOOL check_file_sharing(int cnum,char *fname);
int check_share_mode( share_mode_entry *share, int deny_mode, char *fname,
                      BOOL fcbopen, int *flags);
void open_file_shared(int fnum,int cnum,char *fname,int share_mode,int ofun,
		      int mode,int oplock_request, int *Access,int *action);
int seek_file(int fnum,uint32 pos);
int read_file(int fnum,char *data,uint32 pos,int n);
int write_file(int fnum,char *data,int n);
BOOL become_service(int cnum,BOOL do_chdir);
int find_service(char *service);
int cached_error_packet(char *inbuf,char *outbuf,int fnum,int line);
int unix_error_packet(char *inbuf,char *outbuf,int def_class,uint32 def_code,int line);
int error_packet(char *inbuf,char *outbuf,int error_class,uint32 error_code,int line);
BOOL oplock_break(uint32 dev, uint32 inode, struct timeval *tval);
BOOL request_oplock_break(share_mode_entry *share_entry, 
                          uint32 dev, uint32 inode);
BOOL snum_used(int snum);
BOOL reload_services(BOOL test);
int setup_groups(char *user, int uid, int gid, int *p_ngroups, 
		 int **p_igroups, gid_t **p_groups,
         int **p_attrs);
int make_connection(char *service,char *user,char *password, int pwlen, char *dev,uint16 vuid);
int find_free_file(void );
int reply_corep(char *outbuf);
int reply_coreplus(char *outbuf);
int reply_lanman1(char *outbuf);
int reply_lanman2(char *outbuf);
int reply_nt1(char *outbuf);
void close_cnum(int cnum, uint16 vuid);
BOOL yield_connection(int cnum,char *name,int max_connections);
BOOL claim_connection(int cnum,char *name,int max_connections,BOOL Clear);
void exit_server(char *reason);
void standard_sub(int cnum,char *str);
char *smb_fn_name(int type);
int chain_reply(char *inbuf,char *outbuf,int size,int bufsize);
int construct_reply(char *inbuf,char *outbuf,int size,int bufsize);

/*The following definitions come from  shmem.c  */

struct shmem_ops *smb_shm_open(int ronly);

/*The following definitions come from  shmem_sysv.c  */

struct shmem_ops *sysv_shm_open(int ronly);

/*The following definitions come from  smbdes.c  */

void E_P16(unsigned char *p14,unsigned char *p16);
void E_P24(unsigned char *p21, unsigned char *c8, unsigned char *p24);
void cred_hash1(unsigned char *out,unsigned char *in,unsigned char *key);
void cred_hash2(unsigned char *out,unsigned char *in,unsigned char *key);

/*The following definitions come from  smbencrypt.c  */

void SMBencrypt(uchar *passwd, uchar *c8, uchar p24[24]);
void SMBNTencrypt(char *passwd, uchar *c8, uchar p24[24]);
void E_md4hash(uchar *passwd, uchar *p16);
void SMBOWFencrypt(uchar passwd[16], uchar *c8, uchar p24[24]);
void nt_lm_owf_gen(char *pwd, char nt_p16[16], char p16[16]);

/*The following definitions come from  smberr.c  */

char *smb_errstr(char *inbuf);

/*The following definitions come from  smbpass.c  */

int pw_file_lock(char *name, int type, int secs);
int pw_file_unlock(int fd);
BOOL get_smbpwd_entries(struct smb_passwd *pw_buf, int *num_entries, int max_num_entries);
struct smb_passwd *get_smbpwd_entry(char *name, int smb_userid);
BOOL add_smbpwd_entry(struct smb_passwd* pwd);
BOOL mod_smbpwd_entry(struct smb_passwd* pwd);

/*The following definitions come from  status.c  */

void Ucrit_addUsername(pstring username);
unsigned int Ucrit_checkUsername(pstring username);
void Ucrit_addPid(int pid);
unsigned int   Ucrit_checkPid(int pid);

/*The following definitions come from  system.c  */

int sys_select(fd_set *fds,struct timeval *tval);
int sys_select(fd_set *fds,struct timeval *tval);
int sys_unlink(char *fname);
int sys_open(char *fname,int flags,int mode);
DIR *sys_opendir(char *dname);
int sys_stat(char *fname,struct stat *sbuf);
int sys_waitpid(pid_t pid,int *status,int options);
int sys_lstat(char *fname,struct stat *sbuf);
int sys_mkdir(char *dname,int mode);
int sys_rmdir(char *dname);
int sys_chdir(char *dname);
int sys_utime(char *fname,struct utimbuf *times);
int sys_rename(char *from, char *to);
int sys_chmod(char *fname,int mode);
char *sys_getwd(char *s);
int sys_chown(char *fname,int uid,int gid);
int sys_chroot(char *dname);
struct hostent *sys_gethostbyname(char *name);

/*The following definitions come from  time.c  */

void GetTimeOfDay(struct timeval *tval);
void TimeInit(void);
int TimeDiff(time_t t);
struct tm *LocalTime(time_t *t);
time_t interpret_long_date(char *p);
void put_long_date(char *p,time_t t);
BOOL null_mtime(time_t mtime);
void put_dos_date(char *buf,int offset,time_t unixdate);
void put_dos_date2(char *buf,int offset,time_t unixdate);
void put_dos_date3(char *buf,int offset,time_t unixdate);
time_t make_unix_date(void *date_ptr);
time_t make_unix_date2(void *date_ptr);
time_t make_unix_date3(void *date_ptr);
char *timestring(void );

/*The following definitions come from  trans2.c  */

int reply_findclose(char *inbuf,char *outbuf,int length,int bufsize);
int reply_findnclose(char *inbuf,char *outbuf,int length,int bufsize);
int reply_transs2(char *inbuf,char *outbuf,int length,int bufsize);
int reply_trans2(char *inbuf,char *outbuf,int length,int bufsize);

/*The following definitions come from  ubiqx/ubi_dLinkList.c  */


/*The following definitions come from  ufc.c  */

char *ufc_crypt(char *key,char *salt);

/*The following definitions come from  uid.c  */

void init_uid(void);
BOOL become_guest(void);
BOOL become_user(connection_struct *conn, int cnum, uint16 vuid);
BOOL unbecome_user(void );
int smbrun(char *cmd,char *outfile,BOOL shared);
void become_root(BOOL save_dir) ;
void unbecome_root(BOOL restore_dir);

/*The following definitions come from  username.c  */

void map_username(char *user);
struct passwd *Get_Pwnam(char *user,BOOL allow_change, BOOL *changed_to_guest);
BOOL user_in_list(char *user,char *list);

/*The following definitions come from  util.c  */

void setup_logging(char *pname,BOOL interactive);
void reopen_logs(void);
char *tmpdir(void);
BOOL is_a_socket(int fd);
BOOL next_token(char **ptr,char *buff,char *sep);
char **toktocliplist(int *ctok, char *sep);
void *MemMove(void *dest,void *src,int size);
void array_promote(char *array,int elsize,int element);
void set_socket_options(int fd, char *options);
void close_sockets(void );
BOOL in_group(gid_t group, int current_gid, int ngroups, int *groups);
char *StrCpy(char *dest,char *src);
char *StrnCpy(char *dest,char *src,int n);
void putip(void *dest,void *src);
int name_mangle( char *In, char *Out, char name_type );
BOOL file_exist(char *fname,struct stat *sbuf);
time_t file_modtime(char *fname);
BOOL directory_exist(char *dname,struct stat *st);
uint32 file_size(char *file_name);
char *attrib_string(int mode);
int StrCaseCmp(char *s, char *t);
int StrnCaseCmp(char *s, char *t, int n);
BOOL strequal(char *s1, char *s2);
BOOL strnequal(char *s1,char *s2,int n);
BOOL strcsequal(char *s1,char *s2);
void strlower(char *s);
void strupper(char *s);
void strnorm(char *s);
BOOL strisnormal(char *s);
void string_replace(char *s,char oldc,char newc);
void unix_format(char *fname);
void dos_format(char *fname);
void show_msg(char *buf);
int smb_len(char *buf);
void _smb_setlen(char *buf,int len);
void smb_setlen(char *buf,int len);
int set_message(char *buf,int num_words,int num_bytes,BOOL zero);
int smb_numwords(char *buf);
int smb_buflen(char *buf);
int smb_buf_ofs(char *buf);
char *smb_buf(char *buf);
int smb_offset(char *p,char *buf);
char *skip_string(char *buf,int n);
BOOL trim_string(char *s,char *front,char *back);
void dos_clean_name(char *s);
void unix_clean_name(char *s);
int ChDir(char *path);
char *GetWd(char *str);
BOOL reduce_name(char *s,char *dir,BOOL widelinks);
void expand_mask(char *Mask,BOOL doext);
BOOL strhasupper(char *s);
BOOL strhaslower(char *s);
int count_chars(char *s,char c);
void make_dir_struct(char *buf,char *mask,char *fname,unsigned int size,int mode,time_t date);
void close_low_fds(void);
int set_blocking(int fd, BOOL set);
int write_socket(int fd,char *buf,int len);
int read_udp_socket(int fd,char *buf,int len);
int read_with_timeout(int fd,char *buf,int mincnt,int maxcnt,long time_out);
int read_max_udp(int fd,char *buffer,int bufsize,int maxtime);
int TvalDiff(struct timeval *tvalold,struct timeval *tvalnew);
BOOL send_keepalive(int client);
int read_data(int fd,char *buffer,int N);
int write_data(int fd,char *buffer,int N);
int transfer_file(int infd,int outfd,int n,char *header,int headlen,int align);
int read_smb_length(int fd,char *inbuf,int timeout);
BOOL receive_smb(int fd,char *buffer, int timeout);
BOOL receive_local_message(int fd, char *buffer, int buffer_len, int timeout);
BOOL push_local_message(char *buf, int msg_len);
BOOL receive_message_or_smb(int smbfd, int oplock_fd, 
                           char *buffer, int buffer_len, 
                           int timeout, BOOL *got_smb);
BOOL send_smb(int fd,char *buffer);
char *name_ptr(char *buf,int ofs);
int name_extract(char *buf,int ofs,char *name);
int name_len( char *s );
BOOL send_one_packet(char *buf,int len,struct in_addr ip,int port,int type);
void msleep(int t);
BOOL in_list(char *s,char *list,BOOL casesensitive);
BOOL string_init(char **dest,char *src);
void string_free(char **s);
BOOL string_set(char **dest,char *src);
BOOL string_sub(char *s,char *pattern,char *insert);
BOOL do_match(char *str, char *regexp, int case_sig);
BOOL mask_match(char *str, char *regexp, int case_sig,BOOL trans2);
void become_daemon(void);
BOOL yesno(char *p);
char *fgets_slash(char *s2,int maxlen,FILE *f);
int set_filelen(int fd, long len);
int byte_checksum(char *buf,int len);
char *dirname_dos(char *path,char *buf);
void *Realloc(void *p,int size);
void Abort(void );
BOOL get_myname(char *my_name,struct in_addr *ip);
BOOL ip_equal(struct in_addr ip1,struct in_addr ip2);
int open_socket_in(int type, int port, int dlevel,uint32 socket_addr);
int open_socket_out(int type, struct in_addr *addr, int port ,int timeout);
int interpret_protocol(char *str,int def);
int interpret_security(char *str,int def);
uint32 interpret_addr(char *str);
struct in_addr *interpret_addr2(char *str);
BOOL zero_ip(struct in_addr ip);
void reset_globals_after_fork();
char *client_name(void);
char *client_addr(void);
void get_home_server_and_dir(char *user_name,
				char *server_name, char *server_dir);
void automount_server_share(char *user_name,
				char *server_name, char *server_dir);
void standard_sub_basic(char *str);
BOOL same_net(struct in_addr ip1,struct in_addr ip2,struct in_addr mask);
int PutUniCode(char *dst,char *src);
struct hostent *Get_Hostbyname(char *name);
BOOL process_exists(int pid);
char *uidtoname(int uid);
char *gidtoname(int gid);
void BlockSignals(BOOL block,int signum);
void ajt_panic(void);
char *readdirname(void *p);
BOOL is_in_path(char *name, name_compare_entry *namelist);
void set_namearray(name_compare_entry **ppname_array, char *namelist);
void free_namearray(name_compare_entry *name_array);
BOOL fcntl_lock(int fd,int op,uint32 offset,uint32 count,int type);
int file_lock(char *name,int timeout);
void file_unlock(int fd);
BOOL is_myname(char *s);
void set_remote_arch(enum remote_arch_types type);
enum remote_arch_types get_remote_arch();
char *skip_unicode_string(char *buf,int n);
char *unistrn2(uint16 *buf, int len);
char *unistr2(uint16 *buf);
int struni2(uint16 *p, char *buf);
char *unistr(char *buf);
int unistrncpy(char *dst, char *src, int len);
int unistrcpy(char *dst, char *src);
void fstrcpy(char *dest, char *src);
void pstrcpy(char *dest, char *src);
char *align4(char *q, char *base);
char *align2(char *q, char *base);
char *align_offset(char *q, char *base, int align_offset_len);
void print_asc(int level, unsigned char *buf,int len);
void dump_data(int level,char *buf1,int len);
char *tab_depth(int depth);
int writefile(BOOL translation, int f, char *b, int n);
int readfile(BOOL translation, char *b, int size, int n, FILE *f);
int printread(BOOL translation, FILE *f,char *b,int n);
