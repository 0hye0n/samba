srcdir = '../..'
blddir = 'bin'

import Options, os, wafsamba

def set_options(opt):
    opt.tool_options('compiler_cc')
    opt.add_option('--libdir',
                   help=("object code libraries [PREFIX/lib]"),
                   action="store", dest='LIBDIR', default=None)
    opt.add_option('--bindir',
                   help=("user executables [PREFIX/bin]"),
                   action="store", dest='BINDIR', default=None)
    opt.add_option('--sbindir',
                   help=("system admin executables [PREFIX/sbin]"),
                   action="store", dest='SBINDIR', default=None)
    opt.add_option('--enable-rpath',
                   help=("Enable use of rpath for installed binaries"),
                   action="store_true", dest='enable_rpath', default=False)
    opt.add_option('--enable-developer',
                   help=("Turn on developer warnings and debugging"),
                   action="store_true", dest='developer', default=False)

@wafsamba.runonce
def configure(conf):
    conf.env.hlist = []

    # load our local waf extensions
    conf.check_tool('wafsamba', tooldir=conf.curdir)

    conf.CONFIG_PATH('LIBDIR', '/lib')
    conf.CONFIG_PATH('BINDIR', '/bin')
    conf.CONFIG_PATH('SBINDIR', '/sbin')

    conf.check_tool('compiler_cc')

    if Options.options.developer:
        conf.ADD_CFLAGS('-Wall -g -DDEVELOPER')

    conf.env['RPATH_ON_INSTALL'] = Options.options.enable_rpath

    conf.DEFUN('_GNU_SOURCE', 1)
    conf.DEFUN('_XOPEN_SOURCE_EXTENDED', 1)
    conf.DEFUN('LIBREPLACE_NETWORK_CHECKS', 1)

    conf.CHECK_HEADERS('unistd.h sys/types.h stdlib.h stdio.h stddef.h')
    conf.CHECK_HEADERS('sys/wait.h sys/stat.h malloc.h grp.h')
    conf.CHECK_HEADERS('crypt.h dlfcn.h dl.h standards.h stdbool.h stdint.h')
    conf.CHECK_HEADERS('sys/select.h setjmp.h utime.h sys/syslog.h syslog.h')
    conf.CHECK_HEADERS('sys/time.h time.h stdarg.h vararg.h sys/mount.h mntent.h')
    conf.CHECK_HEADERS('stropts.h unix.h string.h strings.h sys/param.h limits.h')
    conf.CHECK_HEADERS('sys/socket.h netinet/in.h netdb.h arpa/inet.h netinet/in_systm.h')
    conf.CHECK_HEADERS('netinet/ip.h netinet/tcp.h netinet/in_ip.h sys/sockio.h sys/un.h')
    conf.CHECK_HEADERS('sys/uio.h ifaddrs.h direct.h dirent.h')
    conf.CHECK_HEADERS('windows.h winsock2.h ws2tcpip.h')

    if 'HAVE_STDDEF_H' in conf.env and 'HAVE_STDLIB_H' in conf.env:
        conf.DEFUN('STDC_HEADERS', 1)

    if 'HAVE_SYS_TIME_H' in conf.env and 'HAVE_TIME_H' in conf.env:
        conf.DEFUN('TIME_WITH_SYS_TIME', 1)

    conf.define('SHLIBEXT', "so", quote=True)

    conf.check(type_name='long long')
    conf.CHECK_TYPES('intptr_t uintptr_t ptrdiff_t')
    conf.CHECK_TYPES('comparison_fn_t socklen_t bool')

    conf.CHECK_TYPE('int8_t', 'char')
    conf.CHECK_TYPE('int16_t', 'short')
    conf.CHECK_TYPE('uint16_t', 'unsigned short')
    conf.CHECK_TYPE('int32_t', 'int')
    conf.CHECK_TYPE('uint32_t', 'unsigned')
    conf.CHECK_TYPE('int64_t', 'long long')
    conf.CHECK_TYPE('uint64_t', 'unsigned long long')
    conf.CHECK_TYPE('size_t', 'unsigned int')
    conf.CHECK_TYPE('ssize_t', 'int')
    conf.CHECK_TYPE('ino_t', 'unsigned')
    conf.CHECK_TYPE('loff_t', 'off_t')
    conf.CHECK_TYPE('bool', 'off_t')

    conf.CHECK_TYPE_IN('struct ifaddrs', 'ifaddrs.h')
    conf.CHECK_TYPE_IN('struct addrinfo', 'netdb.h')
    conf.CHECK_TYPE_IN('struct sockaddr', 'sys/socket.h')

    conf.CHECK_FUNCS('shl_load shl_unload shl_findsym')
    conf.CHECK_FUNCS('pipe strftime srandom random srand rand usleep setbuffer')
    conf.CHECK_FUNCS('lstat getpgrp utime utimes seteuid setresuid setegid')
    conf.CHECK_FUNCS('setresgid chroot bzero strerror vsyslog setlinebuf mktime')
    conf.CHECK_FUNCS('ftruncate chsize rename waitpid wait4 strlcpy strlcat')
    conf.CHECK_FUNCS('initgroups memmove strdup pread pwrite strndup strcasestr')
    conf.CHECK_FUNCS('strtok_r mkdtemp dup2 dprintf vdprintf isatty chown lchown')
    conf.CHECK_FUNCS('link readlink symlink realpath fdatasync snprintf vsnprintf')
    conf.CHECK_FUNCS('asprintf vasprintf setenv unsetenv strnlen strtoull __strtoull')
    conf.CHECK_FUNCS('strtouq strtoll __strtoll strtoq memmem printf memset memcpy')
    conf.CHECK_FUNCS('connect gethostbyname if_nametoindex socketpair')
    conf.CHECK_FUNCS('inet_ntoa inet_ntop dirfd getdirentries getdents syslog')
    conf.CHECK_FUNCS('timegm getifaddrs freeifaddrs')

    conf.CHECK_FUNCS_IN('dlopen dlsym dlerror dlclose', 'dl')
    conf.CHECK_FUNCS_IN('poptGetContext', 'popt')

    conf.check_cc(fragment='''
    #include <stdarg.h>
    va_list ap1,ap2;
    va_copy(ap1,ap2);
    int main(void)
    { return 0; }''',
                define_name="HAVE_VA_COPY",
		execute=0,
		link=0,
                define_ret=0,
                quote=0,
		msg="Checking for va_copy")


    # we could also put code fragments like this in separate files,
    # for example in test/snprintf.c
    conf.check_cc(fragment='''
#include <sys/types.h>
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
void foo(const char *format, ...) {
       va_list ap;
       int len;
       char buf[20];
       long long l = 1234567890;
       l *= 100;

       va_start(ap, format);
       len = vsnprintf(buf, 0, format, ap);
       va_end(ap);
       if (len != 5) exit(1);

       va_start(ap, format);
       len = vsnprintf(0, 0, format, ap);
       va_end(ap);
       if (len != 5) exit(2);

       if (snprintf(buf, 3, "hello") != 5 || strcmp(buf, "he") != 0) exit(3);

       if (snprintf(buf, 20, "%lld", l) != 12 || strcmp(buf, "123456789000") != 0) exit(4);
       if (snprintf(buf, 20, "%zu", 123456789) != 9 || strcmp(buf, "123456789") != 0) exit(5);
       if (snprintf(buf, 20, "%2\$d %1\$d", 3, 4) != 3 || strcmp(buf, "4 3") != 0) exit(6);
       if (snprintf(buf, 20, "%s", 0) < 3) exit(7);

       printf("1");
       exit(0);
}
main() { foo("hello"); }
''',
                define_name="HAVE_C99_VSNPRINTF",
		execute=1,
                define_ret=1,
                quote=0,
		msg="Checking for C99 vsnprintf")

    conf.SAMBA_CONFIG_H()
    conf.SAMBA_BUILD_ENV()

def build(bld):
    bld.set_rpath()

    REPLACE_SOURCE = 'replace.c snprintf.c'

    bld.SAMBA_LIBRARY('replace',
                      REPLACE_SOURCE)

    TEST_SOURCES = '''test/testsuite.c test/main.c test/strptime.c
                      test/os2_delete.c test/getifaddrs.c'''

    bld.SAMBA_BINARY('replace_testsuite',
                     TEST_SOURCES,
                     'replace')
