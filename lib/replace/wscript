#! /usr/bin/env python

srcdir = '../..'
blddir = 'bin'

import sys
sys.path.insert(0, srcdir+"/buildtools/wafsamba")
import wafsamba
import Options, os

def set_options(opt):
    opt.tool_options('compiler_cc')
    # TODO: we are not yet obeying these default paths at install time
    opt.add_option('--libdir',
                   help=("object code libraries [PREFIX/lib"),
                   action="store", dest='LIBDIR', default='${PREFIX}/lib')
    opt.add_option('--bindir',
                   help=("user executables [PREFIX/bin]"),
                   action="store", dest='BINDIR', default='${PREFIX}/bin')
    opt.add_option('--sbindir',
                   help=("system admin executables [PREFIX/sbin]"),
                   action="store", dest='SBINDIR', default='${PREFIX}/sbin')
    opt.add_option('--enable-rpath',
                   help=("Enable use of rpath for installed binaries"),
                   action="store_true", dest='enable_rpath', default=False)
    opt.add_option('--enable-developer',
                   help=("Turn on developer warnings and debugging"),
                   action="store_true", dest='developer', default=False)
    opt.add_option('--timestamp-dependencies',
                   help=("use file timestamps instead of content for build dependencies (BROKEN)"),
                   action="store_true", dest='timestamp_dependencies', default=False)

@wafsamba.runonce
def configure(conf):
    conf.env.hlist = []
    conf.env.srcdir = conf.srcdir

    if Options.options.timestamp_dependencies:
        conf.ENABLE_TIMESTAMP_DEPENDENCIES()

    # load our local waf extensions
    conf.check_tool('wafsamba', tooldir=conf.srcdir + "/buildtools/wafsamba")

    conf.check_tool('compiler_cc')
    # gccdeps can be useful for debugging recursion in #include lines
    conf.check_tool('gccdeps', tooldir=conf.srcdir + "/buildtools/wafsamba")

    # make the install paths available in environment
    conf.env.LIBDIR = Options.options.LIBDIR
    conf.env.BINDIR = Options.options.BINDIR
    conf.env.SBINDIR = Options.options.SBINDIR

    conf.env.RPATH_ON_INSTALL = Options.options.enable_rpath

    # we should use the PIC options in waf instead
    conf.ADD_CFLAGS('-fPIC')

    # check for pkgconfig
    conf.check_cfg(atleast_pkgconfig_version='0.0.0')

    conf.DEFINE('_GNU_SOURCE', 1, add_to_cflags=True)
    conf.DEFINE('_XOPEN_SOURCE_EXTENDED', 1, add_to_cflags=True)
    conf.DEFINE('LIBREPLACE_NETWORK_CHECKS', 1)

    conf.CHECK_HEADERS('unistd.h sys/types.h stdlib.h stdio.h stddef.h')
    conf.CHECK_HEADERS('ctype.h locale.h acl/libacl.h compat.h')
    conf.CHECK_HEADERS('acl/libacl.h attr/xattr.h compat.h ctype.h dustat.h')
    conf.CHECK_HEADERS('fcntl.h fnmatch.h glob.h history.h krb5.h langinfo.h')
    conf.CHECK_HEADERS('libaio.h locale.h ndir.h net/if.h pwd.h readline.h')
    conf.CHECK_HEADERS('readline/history.h readline/readline.h shadow.h sys/acl.h')
    conf.CHECK_HEADERS('sys/attributes.h sys/capability.h sys/dir.h sys/epoll.h')
    conf.CHECK_HEADERS('sys/fcntl.h sys/filio.h sys/filsys.h sys/fs/s5param.h sys/fs/vx/quota.h')
    conf.CHECK_HEADERS('sys/id.h sys/ioctl.h sys/ipc.h sys/mman.h sys/mode.h sys/ndir.h sys/priv.h')
    conf.CHECK_HEADERS('sys/resource.h sys/security.h sys/shm.h sys/statfs.h sys/statvfs.h sys/termio.h')
    conf.CHECK_HEADERS('sys/vfs.h sys/xattr.h termio.h termios.h')
    conf.CHECK_HEADERS('sys/wait.h sys/stat.h malloc.h grp.h')
    conf.CHECK_HEADERS('crypt.h dlfcn.h dl.h standards.h stdbool.h stdint.h')
    conf.CHECK_HEADERS('sys/select.h setjmp.h utime.h sys/syslog.h syslog.h')
    conf.CHECK_HEADERS('sys/time.h time.h stdarg.h vararg.h sys/mount.h mntent.h')
    conf.CHECK_HEADERS('stropts.h unix.h string.h strings.h sys/param.h limits.h')
    conf.CHECK_HEADERS('sys/socket.h netinet/in.h netdb.h arpa/inet.h netinet/in_systm.h')
    conf.CHECK_HEADERS('netinet/ip.h netinet/tcp.h netinet/in_ip.h sys/sockio.h sys/un.h')
    conf.CHECK_HEADERS('sys/uio.h ifaddrs.h direct.h dirent.h')
    conf.CHECK_HEADERS('windows.h winsock2.h ws2tcpip.h')
    conf.CHECK_HEADERS('resolv.h libintl.h errno.h')
    conf.CHECK_HEADERS('gcrypt.h getopt.h iconv.h')
    conf.CHECK_HEADERS('sys/inotify.h memory.h nss.h popt.h sasl/sasl.h')
    conf.CHECK_HEADERS('security/pam_appl.h sys/inotify.h zlib.h asm/unistd.h')

    if 'HAVE_STDDEF_H' in conf.env and 'HAVE_STDLIB_H' in conf.env:
        conf.DEFINE('STDC_HEADERS', 1)

    if 'HAVE_SYS_TIME_H' in conf.env and 'HAVE_TIME_H' in conf.env:
        conf.DEFINE('TIME_WITH_SYS_TIME', 1)

    conf.define('SHLIBEXT', "so", quote=True)

    conf.CHECK_TYPES('"long long" intptr_t uintptr_t ptrdiff_t')
    conf.CHECK_TYPES('comparison_fn_t socklen_t bool')
    conf.CHECK_TYPE('_Bool', define='HAVE__Bool')

    conf.CHECK_TYPE('int8_t', 'char')
    conf.CHECK_TYPE('int16_t', 'short')
    conf.CHECK_TYPE('uint16_t', 'unsigned short')
    conf.CHECK_TYPE('int32_t', 'int')
    conf.CHECK_TYPE('uint32_t', 'unsigned')
    conf.CHECK_TYPE('int64_t', 'long long')
    conf.CHECK_TYPE('uint64_t', 'unsigned long long')
    conf.CHECK_TYPE('size_t', 'unsigned int')
    conf.CHECK_TYPE('ssize_t', 'int')
    conf.CHECK_TYPE('ino_t', 'unsigned')
    conf.CHECK_TYPE('loff_t', 'off_t')
    conf.CHECK_TYPE('bool', 'off_t')
    conf.CHECK_TYPE('offset_t', 'loff_t')
    conf.CHECK_TYPE('volatile int', define='HAVE_VOLATILE')

    conf.CHECK_TYPE_IN('struct ifaddrs', 'ifaddrs.h')
    conf.CHECK_TYPE_IN('struct addrinfo', 'netdb.h')
    conf.CHECK_TYPE_IN('struct sockaddr', 'sys/socket.h')
    conf.CHECK_CODE('struct sockaddr_in6 x', define='HAVE_STRUCT_SOCKADDR_IN6')
    conf.CHECK_TYPE_IN('struct sockaddr_storage', 'sys/socket.h')
    conf.CHECK_TYPE_IN('sa_family_t', 'sys/socket.h')

    conf.CHECK_TYPE_IN('sig_atomic_t', 'signal.h', define='HAVE_SIG_ATOMIC_T_TYPE')

    conf.CHECK_CODE('''
                       struct sockaddr_storage sa_store;
                       struct addrinfo *ai = NULL;
                       struct in6_addr in6addr;
                       int idx = if_nametoindex("iface1");
                       int s = socket(AF_INET6, SOCK_STREAM, 0);
                       int ret = getaddrinfo(NULL, NULL, NULL, &ai);
                       if (ret != 0) {
			  const char *es = gai_strerror(ret);
                       }
                       freeaddrinfo(ai);
                       ''',
                    define='HAVE_IPV6')

    # check if signal() takes a void function
    if conf.CHECK_CODE('return *(signal (0, 0)) (0) == 1', define='RETSIGTYPE_INT', msg='Checking return type of signal handlers'):
        conf.DEFINE('RETSIGTYPE', 'int')
    else:
        conf.DEFINE('RETSIGTYPE', 'void')

    conf.CHECK_FUNCS('shl_load shl_unload shl_findsym')
    conf.CHECK_FUNCS('pipe strftime srandom random srand rand usleep setbuffer')
    conf.CHECK_FUNCS('lstat getpgrp utime utimes seteuid setresuid setegid')
    conf.CHECK_FUNCS('setresgid chroot bzero strerror vsyslog setlinebuf mktime')
    conf.CHECK_FUNCS('ftruncate chsize rename waitpid wait4 strlcpy strlcat')
    conf.CHECK_FUNCS('initgroups memmove strdup pread pwrite strndup strcasestr')
    conf.CHECK_FUNCS('strtok_r mkdtemp dup2 dprintf vdprintf isatty chown lchown')
    conf.CHECK_FUNCS('link readlink symlink realpath fdatasync snprintf vsnprintf')
    conf.CHECK_FUNCS('asprintf vasprintf setenv unsetenv strnlen strtoull __strtoull')
    conf.CHECK_FUNCS('strtouq strtoll __strtoll strtoq memmem printf memset memcpy')
    conf.CHECK_FUNCS('connect gethostbyname if_nametoindex socketpair')
    conf.CHECK_FUNCS('inet_ntoa inet_aton inet_ntop inet_pton')
    conf.CHECK_FUNCS('dirfd getdirentries getdents syslog getaddrinfo freeaddrinfo')
    conf.CHECK_FUNCS('gai_strerror get_current_dir_name')
    conf.CHECK_FUNCS('timegm getifaddrs freeifaddrs mmap setgroups setsid')
    conf.CHECK_FUNCS('getgrent_r getgrgid_r getgrnam_r getgrouplist getpagesize')
    conf.CHECK_FUNCS('getpwent_r getpwnam_r getpwuid_r epoll_create')


    conf.CHECK_FUNCS_IN('dlopen dlsym dlerror dlclose', 'dl')
    conf.CHECK_FUNCS_IN('poptGetContext', 'popt')
    conf.CHECK_FUNCS_IN('res_search', 'resolv')
    conf.CHECK_FUNCS_IN('gettext', 'intl')
    conf.CHECK_FUNCS_IN('pthread_create', 'pthread')

    conf.CHECK_FUNCS_IN('crypt', 'crypt', checklibc=True)

    conf.CHECK_VARIABLE('rl_event_hook', define='HAVE_DECL_RL_EVENT_HOOK', always=True)

    conf.CHECK_VARIABLE('__FUNCTION__', define='HAVE_FUNCTION_MACRO')

    conf.CHECK_DECLS('snprintf vsnprintf asprintf vasprintf')

    conf.CHECK_DECLS('dirfd environ errno getgrent_r getpwent_r', reverse=True)
    conf.CHECK_DECLS('pread pwrite setenv setresgid setresuid', reverse=True)

    conf.CHECK_SIZEOF('char int "long long" long off_t short size_t ssize_t')
    conf.CHECK_SIZEOF('void*', define='SIZEOF_VOID_P')

    if conf.CONFIG_SET('HAVE_EPOLL_CREATE') and conf.CONFIG_SET('HAVE_SYS_EPOLL_H'):
        conf.DEFINE('HAVE_EPOLL', 1)

    conf.CHECK_CODE('va_list ap1,ap2; va_copy(ap1,ap2)',
                    define="HAVE_VA_COPY",
                    msg="Checking for va_copy")

    conf.CHECK_CODE('''
                    #define eprintf(...) fprintf(stderr, __VA_ARGS__)
                    eprintf("bla", "bar")
                    ''', define='HAVE__VA_ARGS__MACRO')

    conf.CHECK_CODE('gettimeofday(NULL, NULL)', 'HAVE_GETTIMEOFDAY_TZ', execute=False)

    conf.CHECK_CODE('#include "test/snprintf.c"',
                    define="HAVE_C99_VSNPRINTF",
                    execute=1,
                    addmain=False,
                    msg="Checking for C99 vsnprintf")

    if Options.options.developer:
        conf.ADD_CFLAGS('-Wall -g -Wfatal-errors -W -Wshadow -Wstrict-prototypes -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Werror-implicit-function-declaration -Wformat=2 -Wno-format-y2k')

    conf.SAMBA_CONFIG_H()
    conf.SAMBA_BUILD_ENV()

    # look for a method of finding the list of network interfaces
    for method in ['HAVE_IFACE_GETIFADDRS', 'HAVE_IFACE_AIX', 'HAVE_IFACE_IFCONF', 'HAVE_IFACE_IFREQ']:
        if conf.CHECK_CODE('''
                           #define %s 1
                           #define NO_CONFIG_H 1
                           #define AUTOCONF_TEST 1
                           #define SOCKET_WRAPPER_NOT_REPLACE
                           #include "replace.c"
                           #include "inet_ntop.c"
                           #include "snprintf.c"
                           #include "getifaddrs.c"
                           #define getifaddrs_test main
                           #include "test/getifaddrs.c"
                           ''' % method,
                           method,
                           addmain=False,
                           execute=True):
            break

    conf.CHECK_CODE('''
		    typedef struct {unsigned x;} FOOBAR;
                    #define X_FOOBAR(x) ((FOOBAR) { x })
                    #define FOO_ONE X_FOOBAR(1)
                    FOOBAR f = FOO_ONE;
                    static const struct {
                        FOOBAR y;
                    } f2[] = {
                        {FOO_ONE}
                    };
                    static const FOOBAR f3[] = {FOO_ONE};
                    ''',
                    define='HAVE_IMMEDIATE_STRUCTURES')

    conf.CHECK_CODE('mkdir("foo",0777)', define='HAVE_MKDIR_MODE')

    conf.CHECK_STRUCTURE_MEMBER('struct stat', 'st_mtim.tv_nsec', define='HAVE_STAT_TV_NSEC')
    # we need the st_rdev test under two names
    conf.CHECK_STRUCTURE_MEMBER('struct stat', 'st_rdev', define='HAVE_STRUCT_STAT_ST_RDEV')
    conf.CHECK_STRUCTURE_MEMBER('struct stat', 'st_rdev', define='HAVE_ST_RDEV')
    conf.CHECK_STRUCTURE_MEMBER('struct sockaddr_storage', 'ss_family')

    conf.CHECK_CODE('struct sockaddr_un sunaddr; sunaddr.sun_family = AF_UNIX;',
                    define='HAVE_UNIXSOCKET')


    conf.CHECK_CODE('''
                    struct stat st;
                    char tpl[20]="/tmp/test.XXXXXX";
                    int fd = mkstemp(tpl);
                    if (fd == -1) exit(1);
                    unlink(tpl);
                    if (fstat(fd, &st) != 0) exit(1);
                    if ((st.st_mode & 0777) != 0600) exit(1);
                    exit(0);
                    ''',
                    define='HAVE_SECURE_MKSTEMP',
                    execute=True,
                    mandatory=True) # lets see if we get a mandatory failure for this one

    if conf.CHECK_CFLAGS('-fvisibility=hidden', 'VISIBILITY_CFLAGS'):
        conf.CHECK_CODE('''void vis_foo1(void) {}
                           __attribute__((visibility("default"))) void vis_foo2(void) {}''',
                        cflags=conf.env.VISIBILITY_CFLAGS,
                        define='HAVE_VISIBILITY_ATTR')

    if conf.CHECK_FUNCS('getpass getpassphrase'):
        # if we have both, then we prefer getpassphrase
        conf.DEFINE(REPLACE_GETPASS_BY_GETPASSPHRASE, 1)
        conf.DEFINE(REPLACE_GETPASS, 1)

    conf.CHECK_CODE('''#include "getpass.c"
                       int main(void) { return 0; }''',
                    addmain=False,
                    define='REPLACE_GETPASS',
                    cflags='-DNO_CONFIG_H')

def build(bld):
    bld.set_rpath()

    # libreplace needs to put the library in the right build groups
    # as libreplace is a base library for everything, even for our
    # compilers, we need libreplace to build very early
    bld.SETUP_BUILD_GROUPS()

    REPLACE_SOURCE = 'replace.c snprintf.c'

    bld.SAMBA_LIBRARY('replace',
                      source=REPLACE_SOURCE,
                      group='base_libraries',
                      deps='LIBREPLACE_GETPASS')

    TEST_SOURCES = '''test/testsuite.c test/main.c test/strptime.c
                      test/os2_delete.c test/getifaddrs.c'''

    bld.SAMBA_BINARY('replace_testsuite',
                     TEST_SOURCES,
                     deps='replace')

    NET_SOURCES = []
    if bld.CONFIG_SET('HAVE_INET_NTOA'):  NET_SOURCES.append('inet_ntoa.c')
    if bld.CONFIG_SET('HAVE_INET_ATON'):  NET_SOURCES.append('inet_aton.c')
    if bld.CONFIG_SET('HAVE_INET_NTOP'):  NET_SOURCES.append('inet_ntop.c')
    if bld.CONFIG_SET('HAVE_INET_PTON'):  NET_SOURCES.append('inet_pton.c')
    if bld.CONFIG_SET('HAVE_SOCKETPAIR'): NET_SOURCES.append('socketpair.c')

    bld.SAMBA_SUBSYSTEM('LIBREPLACE_NETWORK', NET_SOURCES, deps='replace')


    CRYPT_SOURCES = []
    if not 'HAVE_CRYPT' in bld.env: CRYPT_SOURCES.append('crypt.c')

    bld.SAMBA_SUBSYSTEM('LIBREPLACE_EXT', CRYPT_SOURCES)

    bld.SAMBA_SUBSYSTEM('LIBREPLACE_GETPASS', 'getpass.c',
                        enabled=bld.CONFIG_SET('REPLACE_GETPASS'))

    bld.CHECK_PROJECT_RULES()
