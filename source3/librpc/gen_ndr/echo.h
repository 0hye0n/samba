/* header auto-generated by pidl */

#ifndef _HEADER_rpcecho
#define _HEADER_rpcecho

struct echo_info1 {
	uint8_t v;/* [keepref] */
};

struct echo_info2 {
	uint16_t v;/* [keepref] */
};

struct echo_info3 {
	uint32_t v;/* [keepref] */
};

struct echo_info4 {
	uint64_t v;/* [keepref] */
};

struct echo_info5 {
	uint8_t v1;/* [keepref] */
	uint64_t v2;/* [keepref] */
};

struct echo_info6 {
	uint8_t v1;/* [keepref] */
	struct echo_info1 info1;/* [keepref] */
};

struct echo_info7 {
	uint8_t v1;/* [keepref] */
	struct echo_info4 info4;/* [keepref] */
};

union echo_Info {
	struct echo_info1 info1;/* [keepref,case] */
	struct echo_info2 info2;/* [keepref,case(2)] */
	struct echo_info3 info3;/* [keepref,case(3)] */
	struct echo_info4 info4;/* [keepref,case(4)] */
	struct echo_info5 info5;/* [keepref,case(5)] */
	struct echo_info6 info6;/* [keepref,case(6)] */
	struct echo_info7 info7;/* [keepref,case(7)] */
}/* [switch_type(uint16)] */;

enum echo_Enum1 {
	ECHO_ENUM1=1,
	ECHO_ENUM2=2
};

enum echo_Enum1_32 {
	ECHO_ENUM1_32=1,
	ECHO_ENUM2_32=2
};

struct echo_Enum2 {
	enum echo_Enum1 e1;/* [keepref] */
	enum echo_Enum1_32 e2;/* [keepref] */
};

union echo_Enum3 {
	enum echo_Enum1 e1;/* [keepref,case(ECHO_ENUM1)] */
	struct echo_Enum2 e2;/* [keepref,case(ECHO_ENUM2)] */
}/* [switch_type(uint16)] */;

struct echo_Surrounding {
	uint32_t x;/* [keepref] */
	uint16_t *surrounding;/* [keepref,size_is(x)] */
};


struct echo_AddOne {
	struct {
		uint32_t in_data;/* [keepref] */
	} in;

	struct {
		uint32_t *out_data;/* [keepref,ref] */
	} out;

};


struct echo_EchoData {
	struct {
		uint32_t len;/* [keepref] */
		uint8_t *in_data;/* [keepref,size_is(len)] */
	} in;

	struct {
		uint8_t *out_data;/* [keepref,size_is(len)] */
	} out;

};


struct echo_SinkData {
	struct {
		uint32_t len;/* [keepref] */
		uint8_t *data;/* [keepref,size_is(len)] */
	} in;

};


struct echo_SourceData {
	struct {
		uint32_t len;/* [keepref] */
	} in;

	struct {
		uint8_t *data;/* [keepref,size_is(len)] */
	} out;

};


struct echo_TestCall {
	struct {
		const char *s1;/* [keepref,ref,charset(UTF16)] */
	} in;

	struct {
		const char **s2;/* [keepref,ref,charset(UTF16)] */
	} out;

};


struct echo_TestCall2 {
	struct {
		uint16_t level;/* [keepref] */
	} in;

	struct {
		union echo_Info *info;/* [keepref,ref,switch_is(level)] */
		NTSTATUS result;
	} out;

};


struct echo_TestSleep {
	struct {
		uint32_t seconds;/* [keepref] */
	} in;

	struct {
		uint32_t result;
	} out;

};


struct echo_TestEnum {
	struct {
		enum echo_Enum1 *foo1;/* [keepref,ref] */
		struct echo_Enum2 *foo2;/* [keepref,ref] */
		union echo_Enum3 *foo3;/* [keepref,ref,switch_is(*foo1)] */
	} in;

	struct {
		enum echo_Enum1 *foo1;/* [keepref,ref] */
		struct echo_Enum2 *foo2;/* [keepref,ref] */
		union echo_Enum3 *foo3;/* [keepref,ref,switch_is(*foo1)] */
	} out;

};


struct echo_TestSurrounding {
	struct {
		struct echo_Surrounding *data;/* [keepref,ref] */
	} in;

	struct {
		struct echo_Surrounding *data;/* [keepref,ref] */
	} out;

};


struct echo_TestDoublePointer {
	struct {
		uint16_t ***data;/* [keepref,ref] */
	} in;

	struct {
		uint16_t result;
	} out;

};

#endif /* _HEADER_rpcecho */
