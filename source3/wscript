#! /usr/bin/env python

srcdir = '..'
blddir = 'bin'

import sys, os
sys.path.insert(0, srcdir+"/buildtools/wafsamba")
import wafsamba, Options

def set_options(opt):
    opt.recurse('../lib/replace')
    opt.recurse('../lib/nss_wrapper')
    opt.recurse('../lib/socket_wrapper')
    opt.recurse('../lib/uid_wrapper')

def configure(conf):
    conf.define('PACKAGE_NAME', 'samba')
    conf.define('PACKAGE_STRING', 'samba 3')
    conf.define('PACKAGE_TARNAME', 'samba')
    conf.define('PACKAGE_URL', '')
    conf.define('PACKAGE_VERSION', '3')
    conf.define('PACKAGE_BUGREPORT', 'samba-technical@samba.org')

    conf.DEFINE('CONFIG_H_IS_FROM_SAMBA', 1)
    conf.DEFINE('_SAMBA_BUILD_', 3, add_to_cflags=True)
    conf.DEFINE('HAVE_CONFIG_H', 1, add_to_cflags=True)
    if Options.options.developer:
        conf.ADD_CFLAGS('-DDEVELOPER -DDEBUG_PASSWORD')

    # set a limit on recursing in the waf preprocessor
    conf.env.preprocessor_recursion_limit = 10

    conf.ADD_EXTRA_INCLUDES('#source3 #source3/include #lib/replace #lib/talloc #lib/tevent #source3/libaddns #source3/librpc')

    conf.sub_config('../lib/replace')
    conf.sub_config('../lib/nss_wrapper')
    conf.sub_config('../lib/socket_wrapper')
    conf.sub_config('../lib/uid_wrapper')

    conf.CHECK_HEADERS('execinfo.h libexc.h libunwind.h')

    # Check for inotify support
    conf.CHECK_HEADERS('linux/inotify.h asm/unistd.h sys/inotify.h', add_headers=False)
    conf.CHECK_FUNCS('inotify_init')
    if "HAVE_LINUX_INOTIFY_H" in conf.env and "HAVE_INOTIFY_INIT" in conf.env:
        conf.DEFINE('HAVE_INOTIFY', 1)

    # Look for CUPS
    conf.find_program('cups-config', var='CUPS_CONFIG')
    if conf.env.CUPS_CONFIG:
        conf.check_cfg(path="cups-config", args="--cflags --ldflags --libs", package="", uselib_store="CUPS")
        conf.CHECK_HEADERS('cups/cups.h cups/language.h', add_headers=False)

    # Check for LDAP
    conf.CHECK_HEADERS('ldap.h lber.h')
    conf.CHECK_TYPE('ber_tag_t', 'unsigned int')

    # Check for kerberos
    conf.find_program('krb5-config', var='KRB5_CONFIG')
    if conf.env.KRB5_CONFIG:
        conf.check_cfg(path="krb5-config", args="--cflags --libs",
                       package="gssapi", uselib_store="KRB5")
        conf.CHECK_HEADERS('krb5.h krb5/locate_plugin.h')
        conf.CHECK_HEADERS('gssapi.h gssapi/gssapi_generic.h gssapi/gssapi.h com_err.h')

    conf.SAMBA_CONFIG_H('include/config.h')
