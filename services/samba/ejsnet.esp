<%

/*
 * Copyright (C)  Rafal Szczesniak 2007
 */

/* JSON-RPC mappings to the libnet functions */

jsonrpc_include("resources.esp");


function _NetContext(params, error)
{
  if (params.length < 1)
  {
    error.setError(jsonrpc.Constant.ServerError.ParameterMismatch,
		   "too few parameters(usage: [ <credentials ])");
    return error;
  }
  
  var creds = params[0];
  if (creds == undefined)
  {
    error.setError(jsonrpc.Constant.ServerError.ParameterMismatch,
		   "credentials parameter is undefined");
    return error;
  }
  
  if (creds.domain == undefined ||
      typeof(creds.domain) != "string")
  {
    error.setError(jsonrpc.Constant.ServerError.ParameterMismatch,
		   "a valid string is expected in credentials.domain");
    return error;
  }
  
  if (creds.username == undefined ||
      typeof(creds.username) != "string")
  {
    error.setError(jsonrpc.Constant.ServerError.ParameterMismatch,
		   "a valid string is expected in credentials.username");
    return error;
  }
  
  if (creds.password == undefined ||
      typeof(creds.username) != "string")
  {
    error.setError(jsonrpc.Constant.ServerError.ParameterMismatch,
		   "a valid string is expected in credentials.password");
    return error;
  }
  
  var credentials = credentials_init();
  credentials.set_domain(creds.domain);
  credentials.set_username(creds.username);
  credentials.set_password(creds.password);
  
  var netCtx = NetContext(credentials);

  return session.resources.set(netCtx, "netCtx", error);
}
jsonrpc.method.NetContext = _NetContext;


/*
 * Local Variables:
 * mode: c
 * End:
 */

%>
