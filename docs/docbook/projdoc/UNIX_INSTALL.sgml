<chapter id="install">

<title>How to Install and Test SAMBA</title>

<sect1>
	<title>Obtaining and installing samba</title>

	<para>Binary packages of samba are included in almost any Linux or 
	Unix distribution. There are also some packages available at 
	<ulink url="http://samba.org/">the samba homepage</ulink>
	</para>

	<para>If you need to compile samba from source, check the 
	appropriate appendix chapter.</para>
</sect1>

<sect1>
	<title>Create the smb configuration file. </title>
	
	<!--FIXME: Add notes about different types of configuration -->

	<para>There are sample configuration files in the examples 
	subdirectory in the distribution. I suggest you read them 
	carefully so you can see how the options go together in 
	practice. See the man page for all the options.</para>

	<para>The simplest useful configuration file would be 
	something like this:</para>

	<para><programlisting>
	[global]
	   workgroup = MYGROUP

	   [homes]
	      guest ok = no
	      read only = no
	</programlisting></para>
	
	<para>which would allow connections by anyone with an 
	account on the server, using either their login name or 
	"homes" as the service name. (Note that I also set the 
	workgroup that Samba is part of. See BROWSING.txt for details)</para>
	
	<para>Note that <command>make install</command> will not install 
	a <filename>smb.conf</filename> file. You need to create it 
	yourself. </para>
	
	<para>Make sure you put the smb.conf file in the same place 
	you specified in the<filename>Makefile</filename> (the default is to 
	look for it in <filename>/usr/local/samba/lib/</filename>).</para>

	<para>For more information about security settings for the 
	[homes] share please refer to the document UNIX_SECURITY.txt.</para>
</sect1>

<sect1>
	<title>Test your config file with 
	<command>testparm</command></title>

	<para>It's important that you test the validity of your
	<filename>smb.conf</filename> file using the testparm program. 
	If testparm runs OK then it will list the loaded services. If 
	not it will give an error message.</para>

	<para>Make sure it runs OK and that the services look 
	reasonable before proceeding. </para>

	<para>Always run testparm again when you change 
	<filename>smb.conf</filename>!</para>

</sect1>

<sect1>
	<title>Try listing the shares available on your 
	server</title>

	<para><prompt>$ </prompt><userinput>smbclient -L 
	<replaceable>yourhostname</replaceable></userinput></para>

	<para>You should get back a list of shares available on 
	your server. If you don't then something is incorrectly setup. 
	Note that this method can also be used to see what shares 
	are available on other LanManager clients (such as WfWg).</para>

	<para>If you choose user level security then you may find 
	that Samba requests a password before it will list the shares. 
	See the <command>smbclient</command> man page for details. (you 
	can force it to list the shares without a password by
	adding the option -U% to the command line. This will not work 
	with non-Samba servers)</para>
</sect1>

<sect1>
	<title>Try connecting with the unix client</title>
	
	<para><prompt>$ </prompt><userinput>smbclient <replaceable>
	//yourhostname/aservice</replaceable></userinput></para>
	
	<para>Typically the <replaceable>yourhostname</replaceable> 
	would be the name of the host where you installed <command>
	smbd</command>. The <replaceable>aservice</replaceable> is 
	any service you have defined in the <filename>smb.conf</filename> 
	file. Try your user name if you just have a [homes] section
	in <filename>smb.conf</filename>.</para>

	<para>For example if your unix host is bambi and your login 
	name is fred you would type:</para>

	<para><prompt>$ </prompt><userinput>smbclient //bambi/fred
	</userinput></para>
</sect1>

<sect1>
	<title>Try connecting from a DOS, WfWg, Win9x, WinNT, 
	Win2k, OS/2, etc... client</title>
	
	<para>Try mounting disks. eg:</para>

	<para><prompt>C:\WINDOWS\> </prompt><userinput>net use d: \\servername\service
	</userinput></para>

	<para>Try printing. eg:</para>

	<para><prompt>C:\WINDOWS\> </prompt><userinput>net use lpt1:
	\\servername\spoolservice</userinput></para>

	<para><prompt>C:\WINDOWS\> </prompt><userinput>print filename
	</userinput></para>

	<para>Celebrate, or send me a bug report!</para>
</sect1>

<sect1>
	<title>What If Things Don't Work?</title>
	
	<para>If nothing works and you start to think "who wrote 
	this pile of trash" then I suggest you do step 2 again (and 
	again) till you calm down.</para>

	<para>Then you might read the file HOWTO chapter Diagnosis and the 
	FAQ. If you are still stuck then try the mailing list or 
	newsgroup (look in the README for details). Samba has been 
	successfully installed at thousands of sites worldwide, so maybe 
	someone else has hit your problem and has overcome it. You could 
	also use the WWW site to scan back issues of the samba-digest.</para>

	<para>When you fix the problem PLEASE send me some updates to the
	documentation (or source code) so that the next person will find it
	easier. </para>

	<sect2>
		<title>Diagnosing Problems</title>

		<para>If you have installation problems then go to the
		<ulink url="Diagnosis.html">Diagnosis</ulink> chapter to try to find the 
		problem.</para>
	</sect2>
	
	<sect2>
		<title>Scope IDs</title>

		<para>By default Samba uses a blank scope ID. This means 
		all your windows boxes must also have a blank scope ID. 
		If you really want to use a non-blank scope ID then you will 
		need to use the 'netbios scope' smb.conf option.
                All your PCs will need to have the same setting for 
		this to work. I do not recommend scope IDs.</para>
	</sect2>


	<sect2>
		<title>Choosing the Protocol Level</title>

		<para>The SMB protocol has many dialects. Currently 
		Samba supports 5, called CORE, COREPLUS, LANMAN1, 
		LANMAN2 and NT1.</para>

		<para>You can choose what maximum protocol to support 
		in the <filename>smb.conf</filename> file. The default is 
		NT1 and that is the best for the vast majority of sites.</para>

		<para>In older versions of Samba you may have found it 
		necessary to use COREPLUS. The limitations that led to 
		this have mostly been fixed. It is now less likely that you 
		will want to use less than LANMAN1. The only remaining advantage 
		of COREPLUS is that for some obscure reason WfWg preserves 
		the case of passwords in this protocol, whereas under LANMAN1, 
		LANMAN2 or NT1 it uppercases all passwords before sending them,
		forcing you to use the "password level=" option in some cases.</para>

		<para>The main advantage of LANMAN2 and NT1 is support for 
		long filenames with some clients (eg: smbclient, Windows NT 
		or Win95). </para>

		<para>See the smb.conf(5) manual page for more details.</para>

		<para>Note: To support print queue reporting you may find 
		that you have to use TCP/IP as the default protocol under 
		WfWg. For some reason if you leave Netbeui as the default 
		it may break the print queue reporting on some systems. 
		It is presumably a WfWg bug.</para>
	</sect2>
	
	<sect2>
		<title>Printing from UNIX to a Client PC</title>

		<para>To use a printer that is available via a smb-based 
		server from a unix host with LPR you will need to compile the 
		smbclient program. You then need to install the script 
		"smbprint". Read the instruction in smbprint for more details.
		</para>

		<para>There is also a SYSV style script that does much 
		the same thing called smbprint.sysv. It contains instructions.</para>

		<para>See the CUPS manual for information about setting up 
		printing from a unix host with CUPS to a smb-based server. </para>
	</sect2>

	<sect2>
		<title>Locking</title>

		<para>One area which sometimes causes trouble is locking.</para>

		<para>There are two types of locking which need to be 
		performed by a SMB server. The first is "record locking" 
		which allows a client to lock a range of bytes in a open file. 
		The second is the "deny modes" that are specified when a file 
		is open.</para>

		<para>Record locking semantics under Unix is very
		different from record locking under Windows. Versions
		of Samba before 2.2 have tried to use the native
		fcntl() unix system call to implement proper record
		locking between different Samba clients. This can not
		be fully correct due to several reasons. The simplest
		is the fact that a Windows client is allowed to lock a
		byte range up to 2^32 or 2^64, depending on the client
		OS. The unix locking only supports byte ranges up to
		2^31. So it is not possible to correctly satisfy a
		lock request above 2^31. There are many more
		differences, too many to be listed here.</para>

		<para>Samba 2.2 and above implements record locking
		completely independent of the underlying unix
		system. If a byte range lock that the client requests
		happens to fall into the range 0-2^31, Samba hands
		this request down to the Unix system. All other locks
		can not be seen by unix anyway.</para>

		<para>Strictly a SMB server should check for locks before 
		every read and write call on a file. Unfortunately with the 
		way fcntl() works this can be slow and may overstress the 
		rpc.lockd. It is also almost always unnecessary as clients 
		are supposed to independently make locking calls before reads 
		and writes anyway if locking is important to them. By default 
		Samba only makes locking calls when explicitly asked
		to by a client, but if you set "strict locking = yes" then it will
		make lock checking calls on every read and write. </para>

		<para>You can also disable by range locking completely 
		using "locking = no". This is useful for those shares that 
		don't support locking or don't need it (such as cdroms). In 
		this case Samba fakes the return codes of locking calls to 
		tell clients that everything is OK.</para>

		<para>The second class of locking is the "deny modes". These 
		are set by an application when it opens a file to determine 
		what types of access should be allowed simultaneously with 
		its open. A client may ask for DENY_NONE, DENY_READ, DENY_WRITE 
		or DENY_ALL. There are also special compatibility modes called 
		DENY_FCB and  DENY_DOS.</para>

		<!-- FIXME: Sync this with oplocks.sgml -->
	</sect2>
	
	<sect2>
		<title>Mapping Usernames</title>
	
		<para>If you have different usernames on the PCs and 
		the unix server then take a look at the "username map" option. 
		See the smb.conf man page for details.</para>
	</sect2>

</sect1>	
</chapter>
