<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<refentry id="mount.cifs.8">

<refmeta>
	<refentrytitle>mount.cifs</refentrytitle>
	<manvolnum>8</manvolnum>
</refmeta>


<refnamediv>
	<refname>mount.cifs</refname>
	<refpurpose>mount using the Common Internet File System (CIFS)</refpurpose>
</refnamediv>

<refsynopsisdiv>
	<cmdsynopsis>

		<command>mount.cifs</command>
		<arg choice="req">service</arg>	
		<arg choice="req">mount-point</arg>	
		<arg choice="opt">-o options</arg>	
	</cmdsynopsis>
</refsynopsisdiv>

<refsect1>
	<title>DESCRIPTION</title>

	<para>This tool is part of the <citerefentry><refentrytitle>samba</refentrytitle>
	<manvolnum>7</manvolnum></citerefentry> suite.</para>

	<para>mount.cifs mounts a Linux CIFS filesystem. It
is usually invoked indirectly by
the <citerefentry><refentrytitle>mount</refentrytitle><manvolnum>8</manvolnum></citerefentry> command when using the 
"-t cifs" option. This command only works in Linux, and the kernel must
support the cifs filesystem. The CIFS protocol is the successor to the 
SMB protocol and is supported by most Windows servers and many other
commercial servers and Network Attached Storage appliances as well as 
by the popular Open Source server Samba.
	</para>

	<para>
	The mount.cifs utility attaches the UNC name (exported network resource) to
	the local directory <emphasis>mount-point</emphasis>. It is possible to set the mode for mount.cifs to 
setuid root to allow non-root users to mount shares to directories for which they
have write permission.
	</para>

	<para>
		Options to <emphasis>mount.cifs</emphasis> are specified as a comma-separated
list of key=value pairs. It is possible to send options other
than those listed here, assuming that the cifs filesystem kernel module (cifs.ko) supports them.   
Unrecognized cifs mount options passed to the cifs vfs kernel code will be logged to the
kernel log.

	</para>

	<para><emphasis>mount.cifs</emphasis> causes the cifs vfs to launch a thread named cifsd. After mounting it keeps running until
		the mounted resource is unmounted (usually via the umount utility).
	</para>

</refsect1>

<refsect1>
	<title>OPTIONS</title>
	<variablelist>
		<varlistentry><term>user=<replaceable>arg</replaceable></term>

		<listitem><para>specifies the username to connect as. If
				this is not given, then the environment variable <emphasis>USER</emphasis> is used. This option can also take the
form "user%password" or "workgroup/user" or
"workgroup/user%password" to allow the password and workgroup
to be specified as part of the username.
		</para>

<note>
	<para>
	The cifs vfs accepts the parameter <parameter>user=</parameter>, or for users familiar with smbfs it accepts the longer form of the parameter <parameter>username=</parameter>.  Similarly the longer smbfs style parameter names may be accepted as synonyms for the shorter cifs parameters <parameter>pass=</parameter>,<parameter>dom=</parameter> and <parameter>cred=</parameter>.
	</para>
</note>

		</listitem>
	</varlistentry>

	<varlistentry><term>password=<replaceable>arg</replaceable></term>

		<listitem><para>specifies the CIFS password. If this
option is not given then the environment variable
<emphasis>PASSWD</emphasis> is used. If the password is not specified 
directly or indirectly via an argument to mount <emphasis>mount.cifs</emphasis> will prompt
for a password, unless the guest option is specified.
</para>

<para>Note that a password which contains the delimiter
character (i.e. a comma ',') will fail to be parsed correctly
on the command line.  However, the same password defined
in the PASSWD environment variable or via a credentials file (see
below) or entered at the password prompt will be read correctly.
</para>
	</listitem></varlistentry>

	<varlistentry><term>credentials=<replaceable>filename</replaceable></term>

		<listitem><para>
				specifies a file that contains a username
				and/or password. The format of the file is:
			</para>

<programlisting>
		username=<replaceable>value</replaceable>
		password=<replaceable>value</replaceable>
</programlisting>
		
		<para>
This is preferred over having passwords in plaintext in a
shared file, such as <filename>/etc/fstab</filename>. Be sure to protect any
credentials file properly.
		</para>
	</listitem></varlistentry>

	<varlistentry>
		<term>uid=<replaceable>arg</replaceable></term>

		<listitem><para>sets the uid that will own all files on
	the mounted filesystem.
	It may be specified as either a username or a numeric uid.
	This parameter is ignored when the target server supports
	the CIFS Unix extensions.</para></listitem>
	</varlistentry>

	<varlistentry>
		<term>gid=<replaceable>arg</replaceable></term>

		<listitem><para>sets the gid that will own all files on
the mounted filesystem.
It may be specified as either a groupname or a numeric 
gid. This parameter is ignored when the target server supports
the CIFS Unix extensions.
		</para></listitem>
	</varlistentry>

	<varlistentry>
		<term>port=<replaceable>arg</replaceable></term>

		<listitem><para>sets the port number on the server to attempt to contact to negotiate
CIFS support.  If the CIFS server is not listening on this port or
if it is not specified, the default ports will be tried i.e. 
port 445 is tried and if no response then port 139 is tried.
		</para></listitem>
	</varlistentry>

        <varlistentry>
                <term>netbiosname=<replaceable>arg</replaceable></term>

                <listitem><para>When mounting to servers via port 139, specifies the RFC1001
                source name to use to represent the client netbios machine
                name when doing the RFC1001 netbios session initialize.
		</para></listitem>
        </varlistentry>

	<varlistentry>
		<term>file_mode=<replaceable>arg</replaceable></term>

		<listitem><para>If the server does not support the CIFS Unix extensions this
				overrides the default file mode.</para></listitem>
	</varlistentry>

	<varlistentry>
		<term>dir_mode=<replaceable>arg</replaceable></term>

		<listitem><para>If the server does not support the CIFS Unix extensions this
				overrides the default mode for directories. </para></listitem>
	</varlistentry>

	<varlistentry>
		<term>ip=<replaceable>arg</replaceable></term>

		<listitem><para>sets the destination host or IP address.</para></listitem>
	</varlistentry>

	<varlistentry>
		<term>domain=<replaceable>arg</replaceable></term>

		<listitem><para>sets the domain (workgroup) of the user </para></listitem>
	</varlistentry>

	<varlistentry>
		<term>guest</term>

		<listitem><para>don't prompt for a password </para></listitem>

	</varlistentry>

	<varlistentry>
		<term>iocharset</term>

		<listitem><para>Charset used to convert local path names to and from
		Unicode. Unicode is used by default for network path
		names if the server supports it. If iocharset is
		not specified then the nls_default specified
		during the local client kernel build will be used.
		If server does not support Unicode, this parameter is
		unused. </para></listitem>

	</varlistentry>

	<varlistentry>
		<term>ro</term>

		<listitem><para>mount read-only</para></listitem>

	</varlistentry>

	<varlistentry>
		<term>rw</term>
		<listitem><para>mount read-write</para></listitem>
	</varlistentry>

        <varlistentry>
                <term>setuids</term>
                <listitem><para>If the CIFS Unix extensions are negotiated with the server
                the client will attempt to set the effective uid and gid of
                the local process on newly created files, directories, and
                devices (create, mkdir, mknod).</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>nosetuids</term>
                <listitem><para>The client will not attempt to set the uid and gid on
                on newly created files, directories, and devices (create,
                mkdir, mknod) which will result in the server setting the
                uid and gid to the default (usually the server uid of the
                user who mounted the share).  Letting the server (rather than
                the client) set the uid and gid is the default. This
                parameter has no effect if the CIFS Unix Extensions are not
                negotiated.</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>perm</term>
                <listitem><para>Client does permission checks (vfs_permission check of uid
                and gid of the file against the mode and desired operation),
                Note that this is in addition to the normal ACL check on the
                target machine done by the server software.
                Client permission checking is enabled by default.</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>noperm</term>
                <listitem><para>Client does not do permission checks.  This can expose
                files on this mount to access by other users on the local
                client system. It is typically only needed when the server
                supports the CIFS Unix Extensions but the UIDs/GIDs on the
                client and server system do not match closely enough to allow
                access by the user doing the mount.
                Note that this does not affect the normal ACL check on the
                target machine done by the server software (of the server
                ACL against the user name provided at mount time).</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>directio</term>
                <listitem><para>Do not do inode data caching on files opened on this mount.
                This precludes mmaping files on this mount. In some cases
                with fast networks and little or no caching benefits on the
                client (e.g. when the application is doing large sequential
                reads bigger than page size without rereading the same data)
                this can provide better performance than the default
                behavior which caches reads (readahead) and writes
                (writebehind) through the local Linux client pagecache
                if oplock (caching token) is granted and held. Note that
                direct allows write operations larger than page size
                to be sent to the server. On some kernels this requires the cifs.ko module
		to be built with the CIFS_EXPERIMENTAL configure option.</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>mapchars</term>
                <listitem><para>Translate six of the seven reserved characters (not backslash, but including the colon, question mark, pipe, asterik, greater than and less than characters)
                to the remap range (above 0xF000), which also
                allows the CIFS client to recognize files created with
                such characters by Windows's POSIX emulation. This can
                also be useful when mounting to most versions of Samba
                (which also forbids creating and opening files
                whose names contain any of these seven characters).
                This has no effect if the server does not support
                Unicode on the wire.</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>nomapchars</term>
                <listitem><para>Do not translate any of these seven characters (default)</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>intr</term>
                <listitem><para>currently unimplemented</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>nointr</term>
                <listitem><para>(default) currently unimplemented </para></listitem>
        </varlistentry>

        <varlistentry>
                <term>hard</term>
                <listitem><para>The  program  accessing  a file on the cifs mounted file system will hang when the
              server crashes.</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>soft</term>
                <listitem><para>(default) The  program  accessing  a file on the cifs mounted file system will not hang when the server crashes and will return errors to the user application.</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>--verbose</term>
                <listitem><para>Print additional debugging information for the mount. Note that this parameter must be specified before the -o. For example:</para><para>mount -t cifs //server/share /mnt --verbose -o user=username</para></listitem>
        </varlistentry>

	<varlistentry>
                <term>noacl</term>
                <listitem><para>Do not allow POSIX ACL operations even if server would support them.</para><para>
		The CIFS client can get and set POSIX ACLs (getfacl, setfacl) to Samba servers
		version 3.10 and later.  Setting POSIX ACLs requires enabling both XATTR and
		then POSIX support in the CIFS configuration options when building the cifs
		module.  POSIX ACL support can be disabled on a per mount basic by specifying
		"noacl" on mount.</para>
	</listitem>
	</varlistentry>

        <varlistentry>
                <term>serverino</term>
                <listitem><para>Use inode numbers (unique persistent file identifiers)
		returned by the server instead of automatically generating
                temporary inode numbers on the client.  Although server inode numbers
                make it easier to spot hardlinked files (as they will have
                the same inode numbers) and inode numbers may be persistent (which is
		userful for some sofware),
                the server does not guarantee that the inode numbers
                are unique if multiple server side mounts are exported under a
                single share (since inode numbers on the servers might not
                be unique if multiple filesystems are mounted under the same
                shared higher level directory).  Note that not all 
                servers support returning server inode numbers, although
		those that support the CIFS Unix Extensions, and Windows 2000 and
		later servers typically do support this (although not necessarily
		on every local server filesystem). Parameter has no effect if
                the server lacks support for returning inode numbers or equivalent.
		</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>noserverino</term>
                <listitem><para>client generates inode numbers (rather than using the actual one
                from the server) by default.
		</para></listitem>
        </varlistentry>

        <varlistentry>
                <term>nouser_xattr</term>
                <listitem><para>(default) Do not allow getfattr/setfattr to get/set xattrs, even if server would support it otherwise. </para></listitem>
        </varlistentry>

	<varlistentry>
		<term>rsize=<replaceable>arg</replaceable></term>
		<listitem><para>default network read size</para></listitem>
	</varlistentry>

	<varlistentry>
		<term>wsize=<replaceable>arg</replaceable></term>

		<listitem><para>default network write size</para></listitem>
	</varlistentry>

	</variablelist>
</refsect1>

<refsect1>
	<title>ENVIRONMENT VARIABLES</title>

	<para>
		The variable <emphasis>USER</emphasis> may contain the username of the
person to be used to authenticate to the server.
The variable can be used to set both username and
password by using the format username%password.
	</para>
	
	<para>
		The variable <emphasis>PASSWD</emphasis> may contain the password of the
person using the client.
	</para>

	<para>
		The variable <emphasis>PASSWD_FILE</emphasis> may contain the pathname
of a file to read the password from. A single line of input is
read and used as the password.
	</para>

</refsect1>

<refsect1>
	<title>NOTES</title>
	
	<para>This command may be used only by root, unless installed setuid, in which case the noeexec and nosuid mount flags are enabled.</para>
</refsect1>

<refsect1>
	<title>CONFIGURATION</title>
		<para>
The primary mechanism for making configuration changes and for reading 
debug information for the cifs vfs is via the Linux /proc filesystem.
In the directory <filename>/proc/fs/cifs</filename> are various 
configuration files and pseudo files which can display debug information.  
For more information see the kernel file <filename>fs/cifs/README</filename>.
</para>
</refsect1>

<refsect1>
	<title>BUGS</title>

	<para>Mounting using the CIFS URL specification is currently not supported.
	</para>

	<para>The credentials file does not handle usernames or passwords with
		leading space.</para>

	<para>
Note that the typical response to a bug report is a suggestion
to try the latest version first. So please try doing that first,
and always include which versions you use of relevant software
when reporting bugs (minimum: mount.cifs (try mount.cifs -V), kernel (see /proc/version) and
server type you are trying to contact.
</para>
</refsect1>



<refsect1>
	<title>VERSION</title>

	<para>This man page is correct for version 1.34 of 
	the cifs vfs filesystem (roughly Linux kernel 2.6.12).</para>
</refsect1>

<refsect1>
	<title>SEE ALSO</title>
	<para>
	Documentation/filesystems/cifs.txt and fs/cifs/README in the linux kernel
	source tree may contain additional options and information.
</para>
        <para><citerefentry><refentrytitle>umount.cifs</refentrytitle>
        <manvolnum>8</manvolnum></citerefentry></para>

</refsect1>

<refsect1>
	<title>AUTHOR</title>
	
	<para>Steve French</para>

	<para>The syntax and manpage were loosely based on that of smbmount. It 
		was converted to Docbook/XML by Jelmer Vernooij.</para>

	<para>The maintainer of the Linux cifs vfs and the userspace
		tool <emphasis>mount.cifs</emphasis> is <ulink url="mailto:sfrench@samba.org">Steve French</ulink>.
		The <ulink url="mailto:linux-cifs-client@lists.samba.org">Linux CIFS Mailing list</ulink> 
		is the preferred place to ask questions regarding these programs. 
	</para>

</refsect1>

</refentry>
